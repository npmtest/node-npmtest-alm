{"/home/travis/build/npmtest/node-npmtest-alm/test.js":"/* istanbul instrument in package npmtest_alm */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-alm/lib.npmtest_alm.js":"/* istanbul instrument in package npmtest_alm */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_alm = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_alm = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-alm/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-alm && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_alm */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_alm\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_alm.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_alm.rollup.js'] =\n            local.assetsDict['/assets.npmtest_alm.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_alm.__dirname + '/lib.npmtest_alm.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-alm/node_modules/alm/src/server.js":"/**\n * The location of this file is important as its our main backend entry point\n * It is used by:\n * - our `bin/alm`\n * - extenal users invoking `node <this file>`\n * So don't move it :)\n */\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Load up TypeScript\n */\nvar byots = require(\"byots\");\nvar ensureImport = byots;\n/** Other imports */\nvar express = require(\"express\");\nvar http = require(\"http\");\nvar https = require(\"https\");\nvar cookieParser = require(\"cookie-parser\");\nvar errorCodes_1 = require(\"./server/errorCodes\");\nvar path = require(\"path\");\nvar fs = require(\"fs\");\nvar open = require(\"open\");\nvar serverStarted = require(\"./server/serverStarted\");\nvar events_1 = require(\"./common/events\");\nvar cl = require(\"./server/commandLine\");\nvar session = require(\"./server/disk/session\");\nvar chalk = require(\"chalk\");\nvar utils = require(\"./common/utils\");\nvar fsu = require(\"./server/utils/fsu\");\nvar bundlerMaster_1 = require(\"./server/workers/external/demoReact/bundler/bundlerMaster\");\nvar types = require(\"./common/types\");\n// `Where` to statically serve `what`\nvar staticServing = (_a = {\n        '': path.resolve(__dirname, 'public'),\n        // Monaco works best with its own loader,\n        // We will serve it up from node_modules\n        '/vs': utils.getDirectory(fsu.consistentPath(require.resolve('monaco/build/vs/loader'))),\n        // Note:\n        // - the names of these modules come from the `define` call in the `contribution` file ;)\n        // - the path is ofcourse to the contribution file.\n        '/vs/language/css': utils.getDirectory(fsu.consistentPath(require.resolve('monaco-css/release/min/monaco.contribution'))),\n        '/vs/basic-languages/src': utils.getDirectory(fsu.consistentPath(require.resolve('monaco-languages/release/src/monaco.contribution')))\n    },\n    /**\n     * Live demo\n     */\n    _a[types.liveDemoMountUrl] = bundlerMaster_1.liveDemoFolder,\n    _a);\n/**\n * To use official monaco:\n * npm install monaco-editor-core --save-dev\n */\n// monacoSourceDir = fsu.travelUpTheDirectoryTreeTillYouFind(__dirname, 'node_modules') + '/monaco-editor-core/dev/vs'; // DEBUG\nvar clOptions = cl.getOptions();\n/** If the cl options favor early exit (e.g. -i) do that */\nif (clOptions.init) {\n    session.readDiskSessionsFile();\n    console.log('[TSCONFIG] Initialized');\n    process.exit(0);\n}\n/** Build server */\nif (clOptions.build) {\n    var sessionFileContents = session.readDiskSessionsFile();\n    var tsconfig = sessionFileContents.relativePathToTsconfig;\n    var doBuild = require('./build').doBuild;\n    var doBuildTyped = doBuild;\n    doBuildTyped(tsconfig);\n}\n/** Enable HTTPS if all options are passed in */\nvar useHttps = clOptions.httpskey && clOptions.httpscert;\n// Create express app and http|https server\nvar app = express();\nvar server = useHttps\n    ? https.createServer({ key: fs.readFileSync(clOptions.httpskey), cert: fs.readFileSync(clOptions.httpscert) }, app)\n    : http.createServer(app);\n// Basic auth\nif (clOptions.auth) {\n    var basicAuth = require('basic-auth-connect');\n    var _b = clOptions.auth.split(':'), user = _b[0], pass = _b[1];\n    app.use(basicAuth(user, pass));\n}\n// Everything uses cookies\napp.use(cookieParser());\n// Optionally setup a dev time server\nvar devtime_1 = require(\"./server/devtime\");\ndevtime_1.setup(app);\n// After dev setup forward to static server\nObject.keys(staticServing).map(function (where) {\n    var what = staticServing[where];\n    if (where) {\n        app.use(where, express.static(what, {}));\n    }\n    else {\n        app.use(express.static(what, {}));\n    }\n});\n// Setup a socket server\nvar socketServer_1 = require(\"./socket/socketServer\");\nsocketServer_1.register(server);\n/** Register an image server */\nvar imgServer_1 = require(\"./server/imgServer\");\nimgServer_1.registerImgServerWithExpress(app);\n/**\n * Emitted once the server starts listening\n */\nexports.listeningAtUrl = new events_1.TypedEvent();\n// Start listening\nvar getPort_1 = require(\"./server/utils/getPort\");\ngetPort_1.getPort(clOptions.port).then(function (port) {\n    /** If the user *did* specify a port and we end up not using it */\n    if (clOptions.port !== cl.defaultPort\n        && port !== clOptions.port) {\n        console.log(chalk.magenta(\"[WEB] WARNING: Desired port is not available so using port \" + port));\n    }\n    // Also setup in clOptions for future use.\n    clOptions.port = port;\n    server.listen(port, clOptions.host, function (err) {\n        if (err) {\n            console.error(err);\n            errorCodes_1.exit(errorCodes_1.errorCodes.couldNotListen);\n        }\n        var host = clOptions.host in { 'localhost': true, '127.0.0.1': true, '0.0.0.0': true } ? 'localhost' : clOptions.host;\n        var url = \"http://\" + host + \":\" + port;\n        if (clOptions.open) {\n            open(url);\n        }\n        console.log(\"DASHBOARD:\", (clOptions.open) ? \"(launched in browser)\" : chalk.magenta(\"(Please open in chrome)\"), chalk.green(url));\n        exports.listeningAtUrl.emit({ url: url });\n        serverStarted.started();\n    });\n});\n/**\n * Notify user of updates\n */\nvar serverState = require(\"./serverState\");\nserverState.addRoute(app);\n/** Does not exist when we run from `./node_modules/alm_src` */\nif (fs.existsSync(__dirname + '/../package.json')) {\n    var pkg = require('../package.json');\n    var version = pkg.version;\n    console.log(\"Version: \" + version);\n    serverState.setServerState({ version: version });\n    var notifier = require('update-notifier')({\n        pkg: pkg,\n    });\n    notifier.notify({\n        defer: false\n    });\n    if (notifier.update) {\n        var update = notifier.update;\n        serverState.setServerState({ update: update, version: version });\n    }\n}\nvar _a;\n","/home/travis/build/npmtest/node-npmtest-alm/node_modules/alm/src/server/errorCodes.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.errorCodes = {\n    success: 0,\n    unknownError: 1,\n    couldNotListen: 2,\n};\nfunction exit(code) {\n    if (code === void 0) { code = exports.errorCodes.success; }\n    if (code == exports.errorCodes.couldNotListen) {\n        console.log('here');\n        console.error(\"Could not listen on specified port\");\n    }\n    process.exit(code);\n}\nexports.exit = exit;\n","/home/travis/build/npmtest/node-npmtest-alm/node_modules/alm/src/server/serverStarted.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar flm = require(\"./workers/fileListing/fileListingMaster\");\nvar psm = require(\"./workers/lang/projectServiceMaster\");\nvar lm = require(\"./workers/lint/lintMaster\");\nvar tm = require(\"./workers/tested/testedMaster\");\nvar activeProjectConfig = require(\"./disk/activeProjectConfig\");\nvar watchEditorConfig = require(\"./disk/watchEditorConfig\");\nfunction started() {\n    flm.start();\n    psm.start();\n    lm.start();\n    tm.start();\n    activeProjectConfig.start();\n    watchEditorConfig.start();\n}\nexports.started = started;\n","/home/travis/build/npmtest/node-npmtest-alm/node_modules/alm/src/server/workers/fileListing/fileListingMaster.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar sw = require(\"../../utils/simpleWorker\");\nvar contract = require(\"./fileListingContract\");\nvar events_1 = require(\"../../../common/events\");\nvar workingDir = require(\"../../disk/workingDir\");\nvar serverExit_1 = require(\"../../../socket/serverExit\");\nvar chalk = require(\"chalk\");\n/** called whenever the list of files we know about is updated */\nexports.filePathsUpdated = new events_1.TypedEvent();\n/** only starts getting called when the initial file paths listing is completed */\nexports.filePathsCompleted = new events_1.TypedEvent();\n/**\n * Incremental and buffered\n */\nexports.fileListingDelta = new events_1.TypedEvent();\nvar gfileListingDelta = exports.fileListingDelta;\nvar Master;\n(function (Master) {\n    Master.increment = function (q) {\n        return Promise.resolve({\n            num: ++q.num\n        });\n    };\n    Master.abort = function (q) {\n        console.log(chalk.red(q.errorMessage));\n        serverExit_1.emitServerExit();\n        return Promise.resolve({});\n    };\n    /** warning, this function is named differently from the event filePathsUpdated for a reason */\n    Master.fileListUpdated = function (q) {\n        if (q.completed) {\n            exports.filePathsCompleted.emit({ filePaths: q.filePaths, rootDir: workingDir.getProjectRoot(), completed: q.completed });\n        }\n        exports.filePathsUpdated.emit({ filePaths: q.filePaths, rootDir: workingDir.getProjectRoot(), completed: q.completed });\n        return Promise.resolve({});\n    };\n    Master.fileListingDelta = function (q) {\n        gfileListingDelta.emit(q);\n        return Promise.resolve({});\n    };\n})(Master || (Master = {}));\n// Ensure that the namespace follows the contract\nvar _checkTypes = Master;\n// launch worker\nexports.worker = sw.startWorker({\n    workerPath: __dirname + '/fileListingWorker',\n    workerContract: contract.worker,\n    masterImplementation: Master,\n    onCrashRestart: function () {\n        start();\n    }\n}).worker;\nfunction start() {\n    exports.worker.setupWatch({ directory: workingDir.getProjectRoot() });\n}\nexports.start = start;\n","/home/travis/build/npmtest/node-npmtest-alm/node_modules/alm/src/server/utils/simpleWorker.js":"\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// This code is designed to be used by both the parent and the child\nvar cp = require(\"child_process\");\nvar path = require(\"path\");\nexports.resolve = Promise.resolve.bind(Promise);\n/**\n * The main function you should call from master\n */\nfunction startWorker(config) {\n    var parent = new Parent();\n    parent.startWorker(config.workerPath, showError, [], config.onCrashRestart || (function () { return null; }));\n    function showError(error) {\n        if (error) {\n            console.error('Failed to start a worker:', error);\n        }\n    }\n    var worker = parent.sendAllToIpc(config.workerContract);\n    parent.registerAllFunctionsExportedFromAsResponders(config.masterImplementation);\n    return { parent: parent, worker: worker };\n}\nexports.startWorker = startWorker;\n/**\n * The main function you should call from worker\n */\nfunction runWorker(config) {\n    var child = new Child();\n    child.registerAllFunctionsExportedFromAsResponders(config.workerImplementation);\n    var master = child.sendAllToIpc(config.masterContract);\n    return { child: child, master: master };\n}\nexports.runWorker = runWorker;\n/** Creates a Guid (UUID v4) */\nfunction createId() {\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n        var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);\n        return v.toString(16);\n    });\n}\n/** Used by parent and child for keepalive */\nvar orphanExitCode = 100;\nvar RequesterResponder = (function () {\n    function RequesterResponder() {\n        var _this = this;\n        ///////////////////////////////// REQUESTOR /////////////////////////\n        this.currentListeners = {};\n        /** Only relevant when we only want the last of this type */\n        this.currentLastOfType = {};\n        this.pendingRequests = [];\n        this.pendingRequestsChanged = function (pending) { return null; };\n        /**\n         * This is used by both the request and the reponse\n         */\n        this.sendToIpcHeart = function (data, message) {\n            // If we don't have a child exit\n            if (!_this.sendTarget()) {\n                console.log('PARENT ERR: no child when you tried to send :', message);\n                return Promise.reject(new Error(\"No worker active to recieve message: \" + message));\n            }\n            // Initialize if this is the first call of this type\n            if (!_this.currentListeners[message])\n                _this.currentListeners[message] = {};\n            // Create an id unique to this call and store the defered against it\n            var id = createId();\n            var promise = new Promise(function (resolve, reject) {\n                _this.currentListeners[message][id] = { resolve: resolve, reject: reject, promise: promise };\n            });\n            // Send data to worker\n            _this.pendingRequests.push(message);\n            _this.pendingRequestsChanged(_this.pendingRequests);\n            _this.sendTarget().send({ message: message, id: id, data: data, request: true });\n            return promise;\n        };\n        ////////////////////////////////// RESPONDER ////////////////////////\n        this.responders = {};\n        this.processRequest = function (m) {\n            var parsed = m;\n            if (!parsed.message || !_this.responders[parsed.message]) {\n                // TODO: handle this error scenario. Either the message is invalid or we do not have a registered responder\n                return;\n            }\n            var message = parsed.message;\n            var responsePromise;\n            try {\n                responsePromise = _this.responders[message](parsed.data);\n            }\n            catch (err) {\n                responsePromise = Promise.reject({ method: message, message: err.message, stack: err.stack, details: err.details || {} });\n            }\n            responsePromise\n                .then(function (response) {\n                // console.log('I have the response for:',parsed.message)\n                _this.sendTarget().send({\n                    message: message,\n                    /** Note: to process a request we just pass the id as we recieve it */\n                    id: parsed.id,\n                    data: response,\n                    error: null,\n                    request: false\n                });\n                // console.log('I sent the response', parsed.message);\n            })\n                .catch(function (error) {\n                _this.sendTarget().send({\n                    message: message,\n                    /** Note: to process a request we just pass the id as we recieve it */\n                    id: parsed.id,\n                    data: null,\n                    error: error,\n                    request: false\n                });\n            });\n        };\n    }\n    /** process a message from the child */\n    RequesterResponder.prototype.processResponse = function (m) {\n        var parsed = m;\n        this.pendingRequests.shift();\n        this.pendingRequestsChanged(this.pendingRequests.slice());\n        if (!parsed.message || !parsed.id) {\n            console.log('PARENT ERR: Invalid JSON data from child:', m);\n        }\n        else if (!this.currentListeners[parsed.message] || !this.currentListeners[parsed.message][parsed.id]) {\n            console.log('PARENT ERR: No one was listening:', parsed.message, parsed.data);\n        }\n        else {\n            if (parsed.error) {\n                this.currentListeners[parsed.message][parsed.id].reject(parsed.error);\n                console.log(parsed.error);\n                console.log(\"======================= STACK (\" + parsed.error.method + \") ==========================\");\n                console.log(parsed.error.stack);\n            }\n            else {\n                this.currentListeners[parsed.message][parsed.id].resolve(parsed.data);\n            }\n            delete this.currentListeners[parsed.message][parsed.id];\n            // If there is current last one queued then that needs to be resurrected\n            if (this.currentLastOfType[parsed.message]) {\n                var last_1 = this.currentLastOfType[parsed.message];\n                delete this.currentLastOfType[parsed.message];\n                var lastPromise = this.sendToIpcHeart(last_1.data, parsed.message);\n                lastPromise.then(function (res) { return last_1.defer.resolve(res); }, function (rej) { return last_1.defer.reject(rej); });\n            }\n        }\n    };\n    /**\n     * Send all the member functions to IPC\n     */\n    RequesterResponder.prototype.sendAllToIpc = function (contract) {\n        var _this = this;\n        var toret = {};\n        Object.keys(contract).forEach(function (key) {\n            toret[key] = _this.sendToIpc(contract[key], key);\n        });\n        return toret;\n    };\n    /**\n     * Takes a sync named function\n     * and returns a function that will execute this function by name using IPC\n     * (will only work if the process on the other side has this function as a registered responder)\n     */\n    RequesterResponder.prototype.sendToIpc = function (func, name) {\n        var _this = this;\n        name = func.name || name;\n        if (!name) {\n            console.error('NO NAME for function', func.toString());\n            throw new Error('Name not specified for function: \\n' + func.toString());\n        }\n        return function (data) { return _this.sendToIpcHeart(data, name); };\n    };\n    /**\n     * If there are more than one pending then we only want the last one as they come in.\n     * All others will get the default value\n     */\n    RequesterResponder.prototype.sendToIpcOnlyLast = function (func, defaultResponse) {\n        var _this = this;\n        return function (data) {\n            var message = func.name;\n            // If we don't have a child exit\n            if (!_this.sendTarget()) {\n                console.log('PARENT ERR: no child when you tried to send :', message);\n                return Promise.reject(new Error(\"No worker active to recieve message: \" + message));\n            }\n            // Allow if this is the only call of this type\n            if (!Object.keys(_this.currentListeners[message] || {}).length) {\n                return _this.sendToIpcHeart(data, message);\n            }\n            else {\n                // Note:\n                // The last needs to continue once the current one finishes\n                // That is done in our response handler\n                // If there is already something queued as last.\n                // Then it is no longer last and needs to be fed a default value\n                if (_this.currentLastOfType[message]) {\n                    _this.currentLastOfType[message].defer.resolve(defaultResponse);\n                }\n                // this needs to be the new last\n                var promise_1 = new Promise(function (resolve, reject) {\n                    _this.currentLastOfType[message] = {\n                        data: data,\n                        defer: { promise: promise_1, resolve: resolve, reject: reject }\n                    };\n                });\n                return promise_1;\n            }\n        };\n    };\n    RequesterResponder.prototype.addToResponders = function (func, name) {\n        name = func.name || name;\n        if (!name) {\n            console.error('NO NAME for function', func.toString());\n            throw new Error('Name not specified for function: \\n' + func.toString());\n        }\n        this.responders[name] = func;\n    };\n    RequesterResponder.prototype.registerAllFunctionsExportedFromAsResponders = function (aModule) {\n        var _this = this;\n        Object.keys(aModule)\n            .filter(function (funcName) { return typeof aModule[funcName] == 'function'; })\n            .forEach(function (funcName) { return _this.addToResponders(aModule[funcName], funcName); });\n    };\n    return RequesterResponder;\n}());\n/** The parent */\nvar Parent = (function (_super) {\n    __extends(Parent, _super);\n    function Parent() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.node = process.execPath;\n        /** If we get this error then the situation if fairly hopeless */\n        _this.gotENOENTonSpawnNode = false;\n        _this.sendTarget = function () { return _this.child; };\n        _this.stopped = false;\n        return _this;\n    }\n    /** start worker */\n    Parent.prototype.startWorker = function (childJsPath, terminalError, customArguments, onCrashRestart) {\n        var _this = this;\n        if (customArguments === void 0) { customArguments = []; }\n        try {\n            var fileName_1 = path.basename(childJsPath);\n            this.child = cp.fork(childJsPath, customArguments, { cwd: path.dirname(childJsPath), env: process.env });\n            this.child.on('error', function (error) {\n                var err = error;\n                if (err.code === \"ENOENT\" && err.path === _this.node) {\n                    _this.gotENOENTonSpawnNode = true;\n                }\n                console.log('CHILD ERR ONERROR:', err.message, err.stack, err);\n                _this.child = null;\n            });\n            this.child.on('message', function (message) {\n                // console.log('PARENT: A child asked me', message.message)\n                if (message.request) {\n                    _this.processRequest(message);\n                }\n                else {\n                    _this.processResponse(message);\n                }\n            });\n            this.child.on('close', function (code) {\n                if (_this.stopped) {\n                    return;\n                }\n                // Handle process dropping\n                // If orphaned then Definitely restart\n                if (code === orphanExitCode) {\n                    _this.startWorker(childJsPath, terminalError, customArguments, onCrashRestart);\n                    onCrashRestart();\n                }\n                else if (_this.gotENOENTonSpawnNode) {\n                    terminalError(new Error('gotENOENTonSpawnNode'));\n                }\n                else {\n                    console.log(fileName_1 + \" worker restarting. Don't know why it stopped with code:\", code);\n                    _this.startWorker(childJsPath, terminalError, customArguments, onCrashRestart);\n                    onCrashRestart();\n                }\n            });\n        }\n        catch (err) {\n            terminalError(err);\n        }\n    };\n    /** stop worker */\n    Parent.prototype.stopWorker = function () {\n        this.stopped = true;\n        if (!this.child)\n            return;\n        try {\n            this.child.kill('SIGTERM');\n        }\n        catch (ex) {\n            console.error('failed to kill worker child');\n        }\n        this.child = null;\n    };\n    return Parent;\n}(RequesterResponder));\nexports.Parent = Parent;\nvar Child = (function (_super) {\n    __extends(Child, _super);\n    function Child() {\n        var _this = _super.call(this) || this;\n        _this.sendTarget = function () { return process; };\n        _this.connected = true;\n        // Keep alive\n        _this.keepAlive();\n        process.on('exit', function () { return _this.connected = false; });\n        // Start listening\n        process.on('message', function (message) {\n            // console.error('--------CHILD: parent told me :-/', message.message)\n            if (message.request) {\n                _this.processRequest(message);\n            }\n            else {\n                _this.processResponse(message);\n            }\n        });\n        return _this;\n    }\n    /** keep the child process alive while its connected and die otherwise */\n    Child.prototype.keepAlive = function () {\n        var _this = this;\n        setInterval(function () {\n            // We have been orphaned\n            if (!_this.connected) {\n                process.exit(orphanExitCode);\n            }\n        }, 1000);\n    };\n    return Child;\n}(RequesterResponder));\nexports.Child = Child;\n","/home/travis/build/npmtest/node-npmtest-alm/node_modules/alm/src/server/workers/fileListing/fileListingContract.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * There are two contracts\n * A contract on how the master --calls--> worker\n * A contract on how the worker --calls--> master\n */\nexports.worker = {\n    echo: {},\n    setupWatch: {}\n};\nexports.master = {\n    increment: {},\n    fileListUpdated: {},\n    fileListingDelta: {},\n    abort: {},\n};\n","/home/travis/build/npmtest/node-npmtest-alm/node_modules/alm/src/common/events.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar CompositeDisposible = (function () {\n    function CompositeDisposible() {\n        var _this = this;\n        this.disposibles = [];\n        this.add = function (disposible) {\n            _this.disposibles.push(disposible);\n        };\n        this.dispose = function () {\n            _this.disposibles.forEach(function (d) { return d.dispose(); });\n        };\n    }\n    return CompositeDisposible;\n}());\nexports.CompositeDisposible = CompositeDisposible;\n/** passes through events as they happen. You will not get events from before you start listening */\nvar TypedEvent = (function () {\n    function TypedEvent() {\n        var _this = this;\n        this.listeners = [];\n        this.listenersOncer = [];\n        this.on = function (listener) {\n            _this.listeners.push(listener);\n            return {\n                dispose: function () { return _this.off(listener); }\n            };\n        };\n        this.once = function (listener) {\n            _this.listenersOncer.push(listener);\n        };\n        this.off = function (listener) {\n            var callbackIndex = _this.listeners.indexOf(listener);\n            if (callbackIndex > -1)\n                _this.listeners.splice(callbackIndex, 1);\n        };\n        this.emit = function (event) {\n            /** Update any `current` listeners */\n            _this._last = event;\n            while (_this._currentQueue.length) {\n                var item = _this._currentQueue.pop();\n                item.resolve(event);\n            }\n            /** Update any general listeners */\n            _this.listeners.forEach(function (listener) { return listener(event); });\n            /** Clear the `once` queue */\n            _this.listenersOncer.forEach(function (listener) { return listener(event); });\n            _this.listenersOncer = [];\n        };\n        this.pipe = function (te) {\n            return _this.on(function (e) { return te.emit(e); });\n        };\n        /**\n         * A promise that is resolved on first event\n         * ... or immediately with the last value\n         */\n        this._currentQueue = [];\n        this._last = null;\n        this.current = function () {\n            if (_this._last != null) {\n                return Promise.resolve(_this._last);\n            }\n            else {\n                var promise_1 = new Promise(function (resolve, reject) {\n                    _this._currentQueue.push({ promise: promise_1, resolve: resolve, reject: reject });\n                });\n                return promise_1;\n            }\n        };\n        /**\n         * Allows you to join in with the last value\n         * So you don't need to do .current + .on\n         */\n        this.join = function (listener) {\n            if (_this._last != null) {\n                listener(_this._last);\n            }\n            return _this.on(listener);\n        };\n    }\n    return TypedEvent;\n}());\nexports.TypedEvent = TypedEvent;\n/** single event listener queue */\nvar SingleListenerQueue = (function () {\n    function SingleListenerQueue() {\n        var _this = this;\n        this.listener = null;\n        this.pending = [];\n        this.pendingCount = function () { return _this.pending.length; };\n    }\n    SingleListenerQueue.prototype.on = function (listener) {\n        var _this = this;\n        this.listener = listener;\n        // clear pending\n        this.pending.forEach(function (evt) { return _this.listener(evt); });\n        this.pending = [];\n    };\n    SingleListenerQueue.prototype.off = function () {\n        this.listener = null;\n    };\n    SingleListenerQueue.prototype.emit = function (event) {\n        if (!this.listener) {\n            this.pending.push(event);\n        }\n        else {\n            this.listener(event);\n        }\n    };\n    return SingleListenerQueue;\n}());\nexports.SingleListenerQueue = SingleListenerQueue;\n","/home/travis/build/npmtest/node-npmtest-alm/node_modules/alm/src/server/disk/workingDir.js":"/**\n * Controls the root directory we are working off of\n */\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar fsu = require(\"../utils/fsu\");\nvar utils = require(\"../../common/utils\");\nvar settings = require(\"./settings\");\nvar events_1 = require(\"../../common/events\");\nexports.projectRootUpdated = new events_1.TypedEvent();\nvar projectRoot = fsu.consistentPath(process.cwd());\nexports.projectRootUpdated.emit({ filePath: projectRoot });\nfunction getProjectRoot() {\n    return projectRoot;\n}\nexports.getProjectRoot = getProjectRoot;\nfunction setProjectRoot(rootDir) {\n    projectRoot = fsu.consistentPath(rootDir);\n    process.chdir(projectRoot);\n    settings.addWorkingDir(projectRoot);\n    exports.projectRootUpdated.emit({ filePath: projectRoot });\n}\nexports.setProjectRoot = setProjectRoot;\nfunction makeRelative(filePath) {\n    return fsu.makeRelativePath(projectRoot, filePath);\n}\nexports.makeRelative = makeRelative;\nfunction makeAbsolute(relativeFilePath) {\n    return fsu.resolve(projectRoot, relativeFilePath);\n}\nexports.makeAbsolute = makeAbsolute;\nfunction makeAbsoluteIfNeeded(filePathOrRelativeFilePath) {\n    if (!fsu.isAbsolute(filePathOrRelativeFilePath)) {\n        return makeAbsolute(filePathOrRelativeFilePath);\n    }\n    else {\n        return fsu.consistentPath(filePathOrRelativeFilePath);\n    }\n}\nexports.makeAbsoluteIfNeeded = makeAbsoluteIfNeeded;\nfunction makeRelativeUrl(url) {\n    var _a = utils.getFilePathAndProtocolFromUrl(url), filePath = _a.filePath, protocol = _a.protocol;\n    var relativeFilePath = makeRelative(filePath);\n    return utils.getUrlFromFilePathAndProtocol({ protocol: protocol, filePath: relativeFilePath });\n}\nexports.makeRelativeUrl = makeRelativeUrl;\nfunction makeAbsoluteUrl(relativeUrl) {\n    var _a = utils.getFilePathAndProtocolFromUrl(relativeUrl), relativeFilePath = _a.filePath, protocol = _a.protocol;\n    var filePath = makeAbsolute(relativeFilePath);\n    return utils.getUrlFromFilePathAndProtocol({ protocol: protocol, filePath: filePath });\n}\nexports.makeAbsoluteUrl = makeAbsoluteUrl;\n","/home/travis/build/npmtest/node-npmtest-alm/node_modules/alm/src/server/utils/fsu.js":"/**\n * Wraps fs and path into a nice \"consistentPath\" API\n */\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/** we work with \"/\" for all paths (so does the typescript language service) */\nfunction consistentPath(filePath) {\n    return filePath.split('\\\\').join('/');\n}\nexports.consistentPath = consistentPath;\nvar path = require(\"path\");\nvar fs = require(\"fs\");\nvar mkdirp = require(\"mkdirp\");\nvar rimraf = require(\"rimraf\");\n/**\n * Resolves to to an absolute path.\n * @param from,to,to,to...\n */\nfunction resolve() {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n    }\n    return consistentPath(path.resolve.apply(path, args));\n}\nexports.resolve = resolve;\n/**\n * Could be called ends with :)\n */\nfunction isExt(path, ext) {\n    return path && ext && path.indexOf(ext, path.length - ext.length) !== -1;\n}\nexports.isExt = isExt;\n/**\n * Converts \"C:\\boo\" , \"C:\\boo\\foo.ts\" => \"./foo.ts\"; Works on unix as well.\n */\nfunction makeRelativePath(relativeFolder, filePath) {\n    var relativePath = path.relative(relativeFolder, filePath).split('\\\\').join('/');\n    if (relativePath[0] !== '.') {\n        relativePath = './' + relativePath;\n    }\n    return relativePath;\n}\nexports.makeRelativePath = makeRelativePath;\nfunction removeExt(filePath) {\n    var lastIndex = filePath.lastIndexOf('.');\n    if (lastIndex == -1 /** Didn't find `.` */\n        || (lastIndex === 0 && (filePath[1] === '/' || filePath[2] === '/'))) {\n        return filePath;\n    }\n    return filePath.substr(0, lastIndex);\n}\nexports.removeExt = removeExt;\nfunction readFile(filePath) {\n    return fs.readFileSync(filePath, 'utf8');\n}\nexports.readFile = readFile;\n/** Will write the file and even make directories if needed */\nfunction writeFile(filePath, content) {\n    mkdirp.sync(path.dirname(filePath));\n    fs.writeFileSync(filePath, content, 'utf8');\n}\nexports.writeFile = writeFile;\nfunction deleteFile(filePath) {\n    fs.unlinkSync(filePath);\n}\nexports.deleteFile = deleteFile;\nfunction deleteDir(dirPath) {\n    return new Promise(function (resolve) {\n        rimraf(dirPath, { glob: false, maxBusyTries: 10 }, function (e) {\n            if (e) {\n                console.error('Failed to delete Dir: ', dirPath);\n            }\n            resolve({});\n        });\n    });\n}\nexports.deleteDir = deleteDir;\n/** see if a file exists */\nexports.existsSync = function (filePath) { return fs.existsSync(filePath); };\n/** see if path is absolute */\nexports.isAbsolute = function (filePath) { return path.isAbsolute(filePath); };\n/** is the filePath a directory? */\nexports.isDir = function (filePath) { return fs.lstatSync(filePath).isDirectory(); };\n/**\n * See if path is relative.\n */\n//  Not particularly awesome e.g. '/..foo' will be not relative ,\n//  but it shouldn't matter as the significance is really about if `cwd` matters\nfunction isRelative(str) {\n    if (!str.length)\n        return false;\n    return str[0] == '.' || str.substring(0, 2) == \"./\" || str.substring(0, 3) == \"../\";\n}\nexports.isRelative = isRelative;\n/**\n  * returns the path if found\n  * @throws an error \"not found\" if not found */\nfunction travelUpTheDirectoryTreeTillYouFind(startDir, fileOrDirectory, \n    /** This is useful if we don't want to file `node_modules from inside node_modules` */\n    abortIfInside) {\n    /** This is useful if we don't want to file `node_modules from inside node_modules` */\n    if (abortIfInside === void 0) { abortIfInside = false; }\n    while (fs.existsSync(startDir)) {\n        var potentialFile = startDir + '/' + fileOrDirectory;\n        /** This means that we were *just* in this directory */\n        if (before == potentialFile) {\n            if (abortIfInside) {\n                throw new Error(\"not found\");\n            }\n        }\n        if (fs.existsSync(potentialFile)) {\n            return consistentPath(potentialFile);\n        }\n        else {\n            var before = startDir;\n            startDir = path.dirname(startDir);\n            // At root:\n            if (startDir == before)\n                throw new Error(\"not found\");\n        }\n    }\n}\nexports.travelUpTheDirectoryTreeTillYouFind = travelUpTheDirectoryTreeTillYouFind;\n/**\n * Gets the sub directories of a directory\n */\nfunction getDirs(rootDir) {\n    var files = fs.readdirSync(rootDir);\n    var dirs = [];\n    for (var _i = 0, files_1 = files; _i < files_1.length; _i++) {\n        var file = files_1[_i];\n        if (file[0] != '.') {\n            var filePath = rootDir + \"/\" + file;\n            var stat = fs.statSync(filePath);\n            if (stat.isDirectory()) {\n                dirs.push(filePath);\n            }\n        }\n    }\n    return dirs;\n}\nexports.getDirs = getDirs;\n","/home/travis/build/npmtest/node-npmtest-alm/node_modules/alm/src/common/utils.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction log() {\n    console.log('log');\n}\nexports.log = log;\n/**\n * Create a quick lookup map from list\n */\nfunction createMap(arr) {\n    return arr.reduce(function (result, key) {\n        result[key] = true;\n        return result;\n    }, {});\n}\nexports.createMap = createMap;\n/**\n * Create a quick lookup map from list\n */\nfunction createMapByKey(arr, getKey) {\n    var result = {};\n    arr.forEach(function (item) {\n        var key = getKey(item);\n        result[key] = result[key] ? result[key].concat(item) : [item];\n    });\n    return result;\n}\nexports.createMapByKey = createMapByKey;\n/**\n * Turns keys into values and values into keys\n */\nfunction reverseKeysAndValues(obj) {\n    var toret = {};\n    Object.keys(obj).forEach(function (key) {\n        toret[obj[key]] = key;\n    });\n    return toret;\n}\nexports.reverseKeysAndValues = reverseKeysAndValues;\n/** Sloppy but effective code to find distinct */\nfunction distinct(arr) {\n    var map = createMap(arr);\n    return Object.keys(map);\n}\nexports.distinct = distinct;\nexports.uniq = distinct;\n/**\n * Values for dictionary\n */\nfunction values(dict) {\n    return Object.keys(dict).map(function (key) { return dict[key]; });\n}\nexports.values = values;\n/**\n * Debounce\n */\nvar now = function () { return new Date().getTime(); };\nfunction debounce(func, milliseconds, immediate) {\n    if (immediate === void 0) { immediate = false; }\n    var timeout, args, context, timestamp, result;\n    var wait = milliseconds;\n    var later = function () {\n        var last = now() - timestamp;\n        if (last < wait && last > 0) {\n            timeout = setTimeout(later, wait - last);\n        }\n        else {\n            timeout = null;\n            if (!immediate) {\n                result = func.apply(context, args);\n                if (!timeout)\n                    context = args = null;\n            }\n        }\n    };\n    return function () {\n        context = this;\n        args = arguments;\n        timestamp = now();\n        var callNow = immediate && !timeout;\n        if (!timeout)\n            timeout = setTimeout(later, wait);\n        if (callNow) {\n            result = func.apply(context, args);\n            context = args = null;\n        }\n        return result;\n    };\n}\nexports.debounce = debounce;\n;\n/**\n * Like debounce but will also call if a state change is significant enough to not ignore silently\n * Note:\n *  - Significant changes : the function is called *immediately* without debouncing (but still marked for future debouncing).\n */\nfunction triggeredDebounce(config) {\n    var lastArg, lastCallTimeStamp;\n    var hasALastArg = false; // true if we are `holding back` any previous arg\n    var pendingTimeout = null;\n    var later = function () {\n        var timeSinceLast = now() - lastCallTimeStamp;\n        if (timeSinceLast < config.milliseconds) {\n            if (pendingTimeout) {\n                clearTimeout(pendingTimeout);\n                pendingTimeout = null;\n            }\n            pendingTimeout = setTimeout(later, config.milliseconds - timeSinceLast);\n        }\n        else {\n            config.func(lastArg);\n            hasALastArg = false;\n        }\n    };\n    return function (arg) {\n        var stateChangeSignificant = hasALastArg && config.mustcall(arg, lastArg);\n        if (stateChangeSignificant) {\n            config.func(lastArg);\n        }\n        lastArg = arg;\n        hasALastArg = true;\n        lastCallTimeStamp = now();\n        later();\n    };\n}\nexports.triggeredDebounce = triggeredDebounce;\n;\nfunction throttle(func, milliseconds, options) {\n    var context, args, result;\n    var timeout = null;\n    var previous = 0;\n    if (!options)\n        options = {};\n    var gnow = now;\n    var later = function () {\n        previous = options.leading === false ? 0 : gnow();\n        timeout = null;\n        result = func.apply(context, args);\n        if (!timeout)\n            context = args = null;\n    };\n    return function () {\n        var now = gnow();\n        if (!previous && options.leading === false)\n            previous = now;\n        var remaining = milliseconds - (now - previous);\n        context = this;\n        args = arguments;\n        if (remaining <= 0 || remaining > milliseconds) {\n            if (timeout) {\n                clearTimeout(timeout);\n                timeout = null;\n            }\n            previous = now;\n            result = func.apply(context, args);\n            if (!timeout)\n                context = args = null;\n        }\n        else if (!timeout && options.trailing !== false) {\n            timeout = setTimeout(later, remaining);\n        }\n        return result;\n    };\n}\nexports.throttle = throttle;\n;\nfunction once(func) {\n    var ran = false;\n    var memo = undefined;\n    return function () {\n        if (ran)\n            return memo;\n        ran = true;\n        memo = func.apply(this, arguments);\n        func = null;\n        return memo;\n    };\n}\nexports.once = once;\nfunction rangeLimited(args) {\n    var num = args.num, min = args.min, max = args.max, loopAround = args.loopAround;\n    var limited = Math.max(Math.min(num, max), min);\n    if (loopAround && limited > num) {\n        return max;\n    }\n    if (loopAround && limited < num) {\n        return min;\n    }\n    return limited;\n}\nexports.rangeLimited = rangeLimited;\n/**\n * Is TypeSript or is JavaScript file checks\n */\nexports.isTs = function (filePath, ext) {\n    if (ext === void 0) { ext = getExt(filePath); }\n    return ext == 'ts' || ext == 'tsx';\n};\nexports.isTsx = function (filePath, ext) {\n    if (ext === void 0) { ext = getExt(filePath); }\n    return ext == 'tsx';\n};\nexports.isJs = function (filePath, ext) {\n    if (ext === void 0) { ext = getExt(filePath); }\n    return ext == 'js' || ext == 'jsx';\n};\nexports.isJsOrTs = function (filePath) {\n    var ext = getExt(filePath);\n    return exports.isJs(filePath, ext) || exports.isTs(filePath, ext);\n};\n/** `/asdf/bar/j.ts` => `ts` */\nfunction getExt(filePath) {\n    var parts = filePath.split('.');\n    return parts[parts.length - 1].toLowerCase();\n}\nexports.getExt = getExt;\n/**\n * `/asdf/bar/j.ts` => `/asdf/bar/j`\n * `/asdf/bar/j.d.ts` => `/asdf/bar/j.d`\n */\nfunction removeExt(filePath) {\n    var dot = filePath.lastIndexOf('.');\n    if (dot === -1) {\n        return filePath;\n    }\n    return filePath.substring(0, dot);\n}\nexports.removeExt = removeExt;\n/**\n * asdf/asdf:123 => asdf/asdf + 122\n * Note: returned line is 0 based\n */\nfunction getFilePathLine(query) {\n    var _a = query.split(':'), filePath = _a[0], lineNum = _a[1];\n    var line = lineNum ? parseInt(lineNum) - 1 : 0;\n    line = line > 0 ? line : 0;\n    return { filePath: filePath, line: line };\n}\nexports.getFilePathLine = getFilePathLine;\n/** `/asdf/bar/j.ts` => `j.ts` */\nfunction getFileName(fullFilePath) {\n    var parts = fullFilePath.split('/');\n    return parts[parts.length - 1];\n}\nexports.getFileName = getFileName;\n/** `/asdf/bar/j.ts` => `/asdf/bar` */\nfunction getDirectory(filePath) {\n    var directory = filePath.substring(0, filePath.lastIndexOf(\"/\"));\n    return directory;\n}\nexports.getDirectory = getDirectory;\n/** Folder + filename only e.g. `/asdf/something/tsconfig.json` => `something/tsconfig.json` */\nfunction getDirectoryAndFileName(filePath) {\n    var directoryPath = getDirectory(filePath);\n    var directoryName = getFileName(directoryPath);\n    var fileName = getFileName(filePath);\n    return directoryName + \"/\" + fileName;\n}\nexports.getDirectoryAndFileName = getDirectoryAndFileName;\n/**\n * shallow equality of sorted arrays\n */\nfunction arraysEqual(a, b) {\n    if (a === b)\n        return true;\n    if (a == null || b == null)\n        return false;\n    if (a.length !== b.length)\n        return false;\n    for (var i = 0; i < a.length; ++i) {\n        if (a[i] !== b[i])\n            return false;\n    }\n    return true;\n}\nexports.arraysEqual = arraysEqual;\n/** Creates a Guid (UUID v4) */\nfunction createId() {\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n        var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);\n        return v.toString(16);\n    });\n}\nexports.createId = createId;\n/** Creates a Guid (UUID v4) */\nexports.createGuid = createId;\n// Not optimized\nfunction selectMany(arr) {\n    var result = [];\n    for (var i = 0; i < arr.length; i++) {\n        for (var j = 0; j < arr[i].length; j++) {\n            result.push(arr[i][j]);\n        }\n    }\n    return result;\n}\nexports.selectMany = selectMany;\n/** From `file://filePath` to `filePath` */\nfunction getFilePathFromUrl(url) {\n    var filePath = getFilePathAndProtocolFromUrl(url).filePath;\n    return filePath;\n}\nexports.getFilePathFromUrl = getFilePathFromUrl;\n/** We consistently have tabs with protocol + filePath */\nfunction getFilePathAndProtocolFromUrl(url) {\n    // TODO: error handling\n    var protocol = url.substr(0, url.indexOf('://'));\n    var filePath = url.substr((protocol + '://').length);\n    return { protocol: protocol, filePath: filePath };\n}\nexports.getFilePathAndProtocolFromUrl = getFilePathAndProtocolFromUrl;\nfunction getUrlFromFilePathAndProtocol(config) {\n    return config.protocol + '://' + config.filePath;\n}\nexports.getUrlFromFilePathAndProtocol = getUrlFromFilePathAndProtocol;\n/**\n * Promise.resolve is something I call the time (allows you to take x|promise and return promise ... aka make sync prog async if needed)\n */\nexports.resolve = Promise.resolve.bind(Promise);\n/** Useful for various editor related stuff e.g. completions */\nvar punctuations = createMap([';', '{', '}', '(', ')', '.', ':', '<', '>', \"'\", '\"']);\n/** Does the prefix end in punctuation */\nexports.prefixEndsInPunctuation = function (prefix) { return prefix.length && prefix.trim().length && punctuations[prefix.trim()[prefix.trim().length - 1]]; };\n/** String based enum pattern */\nfunction stringEnum(x) {\n    // make values same as keys\n    Object.keys(x).map(function (key) { return x[key] = key; });\n}\nexports.stringEnum = stringEnum;\n/**\n * Just adds your intercept function to be called whenever the original function is called\n * Calls your function *before* the original is called\n */\nfunction intercepted(config) {\n    return function () {\n        config.intercept.apply(null, arguments);\n        return config.orig.apply(config.context, arguments);\n    };\n}\nexports.intercepted = intercepted;\n/**\n * path.relative for browser\n * from : https://github.com/substack/path-browserify/blob/master/index.js\n * but modified to not depened on `path.resolve` as from and to are already resolved in our case\n */\nexports.relative = function (from, to) {\n    function trim(arr) {\n        var start = 0;\n        for (; start < arr.length; start++) {\n            if (arr[start] !== '')\n                break;\n        }\n        var end = arr.length - 1;\n        for (; end >= 0; end--) {\n            if (arr[end] !== '')\n                break;\n        }\n        if (start > end)\n            return [];\n        return arr.slice(start, end - start + 1);\n    }\n    var fromParts = trim(from.split('/'));\n    var toParts = trim(to.split('/'));\n    var length = Math.min(fromParts.length, toParts.length);\n    var samePartsLength = length;\n    for (var i = 0; i < length; i++) {\n        if (fromParts[i] !== toParts[i]) {\n            samePartsLength = i;\n            break;\n        }\n    }\n    var outputParts = [];\n    for (var i = samePartsLength; i < fromParts.length; i++) {\n        outputParts.push('..');\n    }\n    outputParts = outputParts.concat(toParts.slice(samePartsLength));\n    return outputParts.join('/');\n};\nexports.imageUrl = '/images';\nvar supportedImages = {\n    'svg': 'image/svg+xml',\n    'gif': 'image/gif',\n    'png': 'image/png',\n    'jpg': 'image/jpeg',\n    'jpeg': 'image/jpeg',\n    'bmp': 'image/bmp'\n};\nvar imageExtensions = Object.keys(supportedImages);\n/**\n * Provides info on the image files we support\n */\nfunction isImage(url) {\n    return imageExtensions.some(function (ext) { return url.endsWith(\".\" + ext); });\n}\nexports.isImage = isImage;\nfunction getImageMimeType(filePath) {\n    var ext = getExt(filePath);\n    return supportedImages[ext];\n}\nexports.getImageMimeType = getImageMimeType;\n/**\n * Great for find and replace\n */\nfunction findOptionsToQueryRegex(options) {\n    // Note that Code mirror only takes `query` string *tries* to detect case senstivity, regex on its own\n    // So simpler if we just convert options into regex, and then code mirror will happy use the regex as is\n    var str = options.query;\n    var query;\n    /** This came from search.js in code mirror */\n    var defaultQuery = /x^/;\n    if (!options.isRegex) {\n        // from CMs search.js\n        str = str.replace(/[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g, \"\\\\$&\");\n    }\n    if (options.isFullWord) {\n        str = \"\\\\b\" + str + \"\\\\b\";\n    }\n    try {\n        query = new RegExp(str, options.isCaseSensitive ? \"g\" : \"gi\");\n    }\n    catch (e) {\n        query = defaultQuery;\n    }\n    if (query.test(\"\")) {\n        query = defaultQuery;\n    }\n    return query;\n}\nexports.findOptionsToQueryRegex = findOptionsToQueryRegex;\n/**\n * Quick and dirty pad left\n */\nfunction padLeft(str, paddingValue) {\n    var pad = '                                       ';\n    return pad.substring(0, paddingValue - str.length) + str;\n}\nexports.padLeft = padLeft;\nfunction extend() {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n    }\n    var newObj = {};\n    for (var _a = 0, args_1 = args; _a < args_1.length; _a++) {\n        var obj = args_1[_a];\n        for (var key in obj) {\n            //copy all the fields\n            newObj[key] = obj[key];\n        }\n    }\n    return newObj;\n}\nexports.extend = extend;\n;\n/**\n * Simple timer\n */\nfunction timer() {\n    var timeStart = new Date().getTime();\n    return {\n        /** <integer>s e.g 2s etc. */\n        get seconds() {\n            var seconds = Math.ceil((new Date().getTime() - timeStart) / 1000) + 's';\n            return seconds;\n        },\n        /** Milliseconds e.g. 2000ms etc. */\n        get ms() {\n            var ms = (new Date().getTime() - timeStart) + 'ms';\n            return ms;\n        }\n    };\n}\nexports.timer = timer;\n/**\n * Returns a nice conversion of milliseconds into seconds / mintues as needed\n */\nfunction formatMilliseconds(ms) {\n    if (ms < 1000)\n        return ms + \"ms\";\n    var s = ms / 1000;\n    if (s < 60) {\n        return s.toFixed(2) + \"s\";\n    }\n    var m = s / 60;\n    return m.toFixed(2) + \"min\";\n}\nexports.formatMilliseconds = formatMilliseconds;\n/**\n * If you add a new schema make sure you download its schema as well\n */\nexports.supportedAutocompleteConfigFileNames = {\n    'tsconfig.json': true,\n    'package.json': true,\n    'tslint.json': true,\n    'alm.json': true,\n};\n/**\n * Files for which we have autocomplete intelligence\n */\nfunction isSupportedConfigFileForAutocomplete(filePath) {\n    var fileName = getFileName(filePath);\n    return !!exports.supportedAutocompleteConfigFileNames[fileName];\n}\nexports.isSupportedConfigFileForAutocomplete = isSupportedConfigFileForAutocomplete;\nexports.supportedHoverConfigFileNames = {\n    'package.json': true,\n};\n/**\n * Files for which we have hover intelligence\n */\nfunction isSupportedConfigFileForHover(filePath) {\n    var fileName = getFileName(filePath);\n    return !!exports.supportedHoverConfigFileNames[fileName];\n}\nexports.isSupportedConfigFileForHover = isSupportedConfigFileForHover;\nexports.cancellationToken = function () {\n    var cancelled = false;\n    return {\n        get isCancelled() {\n            return cancelled;\n        },\n        cancel: function () { return cancelled = true; }\n    };\n};\nexports.cancelled = \"cancelled\";\n/**\n * Cancellable For Each\n */\nfunction cancellableForEach(config) {\n    return new Promise(function (resolve, reject) {\n        var index = 0;\n        var lookAtNext = function () {\n            // Completed?\n            if (index === config.items.length) {\n                resolve({});\n            }\n            else if (config.cancellationToken.isCancelled) {\n                reject(exports.cancelled);\n            }\n            else {\n                var nextItem = config.items[index++];\n                config.cb(nextItem);\n                // Yield the thread for a bit\n                setTimeout(lookAtNext);\n            }\n        };\n        lookAtNext();\n    });\n}\nexports.cancellableForEach = cancellableForEach;\n/**\n * https://github.com/facebook/react/issues/5465#issuecomment-157888325\n */\nvar makeCancelable = function (promise) {\n    var hasCanceled_ = false;\n    var wrappedPromise = new Promise(function (resolve, reject) {\n        promise.then(function (val) {\n            return hasCanceled_ ? reject({ isCanceled: true }) : resolve(val);\n        });\n        promise.catch(function (error) {\n            return hasCanceled_ ? reject({ isCanceled: true }) : reject(error);\n        });\n    });\n    return {\n        promise: wrappedPromise,\n        cancel: function () {\n            hasCanceled_ = true;\n        },\n    };\n};\n/**\n * For promise chains that might become invalid fast\n */\nfunction onlyLastCall(call) {\n    /**\n     * Kept the delay to 0 as I am using this in select list view\n     * and that really benifits from immediate feedback.\n     */\n    var delay = 0;\n    var timeout;\n    var _resolve;\n    var _reject;\n    var _cancel = function () { return null; };\n    var later = function () {\n        timeout = null;\n        var _a = makeCancelable(call()), promise = _a.promise, cancel = _a.cancel;\n        _cancel = cancel;\n        promise\n            .then(function (res) {\n            _resolve(res);\n        })\n            .catch(function (rej) {\n            _reject(rej);\n        });\n    };\n    var trueCall = function () { return new Promise(function (resolve, reject) {\n        if (timeout) {\n            clearTimeout(timeout);\n        }\n        // Cancel any pending\n        _cancel();\n        _resolve = resolve;\n        _reject = reject;\n        timeout = setTimeout(later, delay);\n    }); };\n    return trueCall;\n}\nexports.onlyLastCall = onlyLastCall;\n","/home/travis/build/npmtest/node-npmtest-alm/node_modules/alm/src/server/disk/settings.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar mkdirp = require(\"mkdirp\");\nvar fsu = require(\"../utils/fsu\");\nvar json = require(\"../../common/json\");\n/**\n * From http://stackoverflow.com/questions/19275776/node-js-how-to-get-the-os-platforms-user-data-folder/26227660#26227660\n\nOS X - '/Users/user/Library/Preferences'\nWindows 8 - 'C:\\Users\\User\\AppData\\Roaming'\nWindows XP - 'C:\\Documents and Settings\\User\\Application Data'\nLinux - `/home/bas/.local/share` (http://askubuntu.com/a/14536/7327)\n */\nvar userDataDir = process.env.APPDATA || (process.platform == 'darwin' ? process.env.HOME + '/Library/Preferences' : process.env.HOME + '/.local/share');\nexports.appSettingsFolder = userDataDir + '/alm';\nmkdirp.sync(exports.appSettingsFolder);\nvar settingsFilePath = exports.appSettingsFolder + '/settingsV1.json';\nfunction getSettingsFilePath() {\n    return settingsFilePath;\n}\nexports.getSettingsFilePath = getSettingsFilePath;\n/**\n * Get / Set Settings\n */\nfunction getSettings() {\n    var settings = {\n        workingDirs: []\n    };\n    if (fsu.existsSync(settingsFilePath)) {\n        var parsed = json.parse(fsu.readFile(settingsFilePath));\n        if (parsed.error) {\n            console.error('Could not parse the settings file:', parsed.error);\n            return settings;\n        }\n        /** Other validations */\n        if (!Array.isArray(parsed.data.workingDirs)) {\n            console.error('settings.workingDirs should be an array');\n            return settings;\n        }\n        /** All good! */\n        settings = parsed.data;\n    }\n    return settings;\n}\nfunction setSettings(settings) {\n    var str = json.stringify(settings);\n    fsu.writeFile(settingsFilePath, str);\n}\n/**\n * Various setting functions\n */\nfunction addWorkingDir(workingDir) {\n    var settings = getSettings();\n    if (settings.workingDirs.find(function (x) { return x === workingDir; }))\n        return;\n    settings.workingDirs.push(workingDir);\n    setSettings(settings);\n}\nexports.addWorkingDir = addWorkingDir;\n","/home/travis/build/npmtest/node-npmtest-alm/node_modules/alm/src/common/json.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Over JSON.parse:\n * * allows BOM\n * * allows // comments\n * * provides a typed error detail on parse error\n */\nfunction parse(str) {\n    str = stripBOM(str);\n    var lines = splitlines(str);\n    var filteredLines = lines.map(function (x) {\n        if (x.trim().startsWith('//')) {\n            return '';\n        }\n        else {\n            return x;\n        }\n    });\n    var content = filteredLines.join('\\n');\n    try {\n        return { data: json_parse(content) };\n    }\n    catch (e) {\n        var error = e;\n        var indexToPosition = function (index) {\n            var beforeLines = splitlines(content.substr(0, index));\n            return {\n                line: Math.max(beforeLines.length - 1, 0),\n                ch: Math.max(beforeLines[beforeLines.length - 1].length - 1, 0)\n            };\n        };\n        var fromIndex = Math.max(error.at - 1, 0);\n        var toIndex = Math.min(error.at + 1, content.length);\n        return {\n            error: {\n                message: e.message,\n                from: indexToPosition(fromIndex),\n                to: indexToPosition(toIndex),\n                preview: content.substring(fromIndex, toIndex - 1)\n            }\n        };\n    }\n}\nexports.parse = parse;\nfunction stringify(object, eol) {\n    if (eol === void 0) { eol = '\\n'; }\n    var cache = [];\n    var value = JSON.stringify(object, \n    // fixup circular reference\n    function (key, value) {\n        if (typeof value === 'object' && value !== null) {\n            if (cache.indexOf(value) !== -1) {\n                // Circular reference found, discard key\n                return;\n            }\n            // Store value in our collection\n            cache.push(value);\n        }\n        return value;\n    }, \n    // indent 2 spaces\n    2);\n    value = value.split('\\n').join(eol) + eol;\n    cache = null;\n    return value;\n}\nexports.stringify = stringify;\nfunction parseErrorToCodeError(filePath, error, source) {\n    return {\n        source: source,\n        filePath: filePath,\n        from: error.from,\n        to: error.to,\n        message: error.message,\n        preview: error.preview,\n        level: 'error'\n    };\n}\nexports.parseErrorToCodeError = parseErrorToCodeError;\nfunction stripBOM(str) {\n    // Catches EFBBBF (UTF-8 BOM) because the buffer-to-string\n    // conversion translates it to FEFF (UTF-16 BOM)\n    if (typeof str === 'string' && str.charCodeAt(0) === 0xFEFF) {\n        return str.slice(1);\n    }\n    return str;\n}\nfunction splitlines(string) { return string.split(/\\r\\n?|\\n/); }\n;\n/**\n * https://github.com/douglascrockford/JSON-js/blob/master/json_parse.js\n * AS IT IS. ONLY MODIFIED WITH TYPE ASSERTSIONS / ANNOTATIONS\n */\nvar json_parse = (function () {\n    \"use strict\";\n    // This is a function that can parse a JSON text, producing a JavaScript\n    // data structure. It is a simple, recursive descent parser. It does not use\n    // eval or regular expressions, so it can be used as a model for implementing\n    // a JSON parser in other languages.\n    // We are defining the function inside of another function to avoid creating\n    // global variables.\n    var at, // The index of the current character\n    ch, // The current character\n    escapee = {\n        '\"': '\"',\n        '\\\\': '\\\\',\n        '/': '/',\n        b: '\\b',\n        f: '\\f',\n        n: '\\n',\n        r: '\\r',\n        t: '\\t'\n    }, text, error = function (m) {\n        // Call error when something is wrong.\n        throw {\n            name: 'SyntaxError',\n            message: m,\n            at: at,\n            text: text\n        };\n    }, next = function (c) {\n        // If a c parameter is provided, verify that it matches the current character.\n        if (c && c !== ch) {\n            error(\"Expected '\" + c + \"' instead of '\" + ch + \"'\");\n        }\n        // Get the next character. When there are no more characters,\n        // return the empty string.\n        ch = text.charAt(at);\n        at += 1;\n        return ch;\n    }, number = function () {\n        // Parse a number value.\n        var number, string = '';\n        if (ch === '-') {\n            string = '-';\n            next('-');\n        }\n        while (ch >= '0' && ch <= '9') {\n            string += ch;\n            next();\n        }\n        if (ch === '.') {\n            string += '.';\n            while (next() && ch >= '0' && ch <= '9') {\n                string += ch;\n            }\n        }\n        if (ch === 'e' || ch === 'E') {\n            string += ch;\n            next();\n            if (ch === '-' || ch === '+') {\n                string += ch;\n                next();\n            }\n            while (ch >= '0' && ch <= '9') {\n                string += ch;\n                next();\n            }\n        }\n        number = +string;\n        if (!isFinite(number)) {\n            error(\"Bad number\");\n        }\n        else {\n            return number;\n        }\n    }, string = function () {\n        // Parse a string value.\n        var hex, i, string = '', uffff;\n        // When parsing for string values, we must look for \" and \\ characters.\n        if (ch === '\"') {\n            while (next()) {\n                if (ch === '\"') {\n                    next();\n                    return string;\n                }\n                if (ch === '\\\\') {\n                    next();\n                    if (ch === 'u') {\n                        uffff = 0;\n                        for (i = 0; i < 4; i += 1) {\n                            hex = parseInt(next(), 16);\n                            if (!isFinite(hex)) {\n                                break;\n                            }\n                            uffff = uffff * 16 + hex;\n                        }\n                        string += String.fromCharCode(uffff);\n                    }\n                    else if (typeof escapee[ch] === 'string') {\n                        string += escapee[ch];\n                    }\n                    else {\n                        break;\n                    }\n                }\n                else {\n                    string += ch;\n                }\n            }\n        }\n        error(\"Bad string\");\n    }, white = function () {\n        // Skip whitespace.\n        while (ch && ch <= ' ') {\n            next();\n        }\n    }, word = function () {\n        // true, false, or null.\n        switch (ch) {\n            case 't':\n                next('t');\n                next('r');\n                next('u');\n                next('e');\n                return true;\n            case 'f':\n                next('f');\n                next('a');\n                next('l');\n                next('s');\n                next('e');\n                return false;\n            case 'n':\n                next('n');\n                next('u');\n                next('l');\n                next('l');\n                return null;\n        }\n        error(\"Unexpected '\" + ch + \"'\");\n    }, value, // Place holder for the value function.\n    array = function () {\n        // Parse an array value.\n        var array = [];\n        if (ch === '[') {\n            next('[');\n            white();\n            if (ch === ']') {\n                next(']');\n                return array; // empty array\n            }\n            while (ch) {\n                array.push(value());\n                white();\n                if (ch === ']') {\n                    next(']');\n                    return array;\n                }\n                next(',');\n                white();\n            }\n        }\n        error(\"Bad array\");\n    }, object = function () {\n        // Parse an object value.\n        var key, object = {};\n        if (ch === '{') {\n            next('{');\n            white();\n            if (ch === '}') {\n                next('}');\n                return object; // empty object\n            }\n            while (ch) {\n                key = string();\n                white();\n                next(':');\n                if (Object.hasOwnProperty.call(object, key)) {\n                    error('Duplicate key \"' + key + '\"');\n                }\n                object[key] = value();\n                white();\n                if (ch === '}') {\n                    next('}');\n                    return object;\n                }\n                next(',');\n                white();\n            }\n        }\n        error(\"Bad object\");\n    };\n    value = function () {\n        // Parse a JSON value. It could be an object, an array, a string, a number,\n        // or a word.\n        white();\n        switch (ch) {\n            case '{':\n                return object();\n            case '[':\n                return array();\n            case '\"':\n                return string();\n            case '-':\n                return number();\n            default:\n                return ch >= '0' && ch <= '9'\n                    ? number()\n                    : word();\n        }\n    };\n    // Return the json_parse function. It will have access to all of the above\n    // functions and variables.\n    return function (source, reviver) {\n        var result;\n        text = source;\n        at = 0;\n        ch = ' ';\n        result = value();\n        white();\n        if (ch) {\n            error(\"Syntax error\");\n        }\n        // If there is a reviver function, we recursively walk the new structure,\n        // passing each name/value pair to the reviver function for possible\n        // transformation, starting with a temporary root object that holds the result\n        // in an empty key. If there is not a reviver function, we simply return the\n        // result.\n        return typeof reviver === 'function'\n            ? (function walk(holder, key) {\n                var k, v, value = holder[key];\n                if (value && typeof value === 'object') {\n                    for (k in value) {\n                        if (Object.prototype.hasOwnProperty.call(value, k)) {\n                            v = walk(value, k);\n                            if (v !== undefined) {\n                                value[k] = v;\n                            }\n                            else {\n                                delete value[k];\n                            }\n                        }\n                    }\n                }\n                return reviver.call(holder, key, value);\n            }({ '': result }, ''))\n            : result;\n    };\n}());\n","/home/travis/build/npmtest/node-npmtest-alm/node_modules/alm/src/socket/serverExit.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * There are cases when we have to exit the server\n * but don't want to leave a client hanging\n * so we tell them about it. e.g.\n * - ctrl + c\n * - globbing failure\n */\nvar events_1 = require(\"../common/events\");\nvar serverExit = new events_1.TypedEvent();\n/**\n * We want subscribers first\n * and then exit process\n * always in that order\n */\nexports.onServerExit = function (cb) { return serverExit.on(cb); };\nexports.emitServerExit = function () {\n    serverExit.emit({});\n    process.exit();\n};\n/**\n * http://stackoverflow.com/a/14032965/390330\n * However the network stack only works if user does ctrl+c. In other cases we cannot even cast.\n */\n// catches ctrl+c event\nprocess.on('SIGINT', exports.emitServerExit);\n","/home/travis/build/npmtest/node-npmtest-alm/node_modules/alm/src/server/workers/lang/projectServiceMaster.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar sw = require(\"../../utils/simpleWorker\");\nvar contract = require(\"./projectServiceContract\");\nvar fmc = require(\"../../disk/fileModelCache\");\nvar utils_1 = require(\"../../../common/utils\");\nvar events_1 = require(\"../../../common/events\");\nvar projectDataLoader = require(\"../../disk/projectDataLoader\");\n// *sinks* for important caches\nvar globalErrorCacheServer_1 = require(\"../../globalErrorCacheServer\");\nexports.fileOutputStatusUpdated = new events_1.TypedEvent();\nexports.completeOutputStatusCacheUpdated = new events_1.TypedEvent();\nexports.liveBuildResults = new events_1.TypedEvent();\nexports.working = new events_1.TypedEvent();\nvar Master;\n(function (Master) {\n    Master.sync = function (data) {\n        activeProjectConfig.sync();\n        return utils_1.resolve({});\n    };\n    Master.getFileContents = function (data) {\n        var contents = fmc.getOrCreateOpenFile(data.filePath).getContents();\n        return utils_1.resolve({ contents: contents });\n    };\n    Master.getOpenFilePaths = function (data) {\n        return utils_1.resolve(fmc.getOpenFiles().map(function (f) { return f.config.filePath; }));\n    };\n    // sinks for important caches\n    Master.receiveErrorCacheDelta = function (data) {\n        globalErrorCacheServer_1.errorsCache.applyDelta(data);\n        return utils_1.resolve({});\n    };\n    Master.receiveFileOutputStatusUpdate = function (data) {\n        exports.fileOutputStatusUpdated.emit(data);\n        return utils_1.resolve({});\n    };\n    Master.receiveCompleteOutputStatusCacheUpdate = function (data) {\n        exports.completeOutputStatusCacheUpdated.emit(data);\n        return utils_1.resolve({});\n    };\n    Master.receiveLiveBuildResults = function (data) {\n        exports.liveBuildResults.emit(data);\n        return utils_1.resolve({});\n    };\n    Master.receiveIncrementallyAddedFile = function (data) {\n        activeProjectConfig.incrementallyAddedFile(data.filePath);\n        return utils_1.resolve({});\n    };\n    Master.receiveWorking = function (data) {\n        exports.working.emit(data);\n        return utils_1.resolve({});\n    };\n})(Master || (Master = {}));\n// Ensure that the namespace follows the contract\nvar _checkTypes = Master;\n// launch worker\nexports.worker = sw.startWorker({\n    workerPath: __dirname + '/projectServiceWorker',\n    workerContract: contract.worker,\n    masterImplementation: Master,\n    onCrashRestart: function () {\n        /** TS Crashed. Send down the data again if any */\n        if (activeProjectConfig.activeProjectConfigDetails) {\n            globalErrorCacheServer_1.errorsCache.clearErrorsForSource('projectService');\n            sendActiveProjectDownToWorker(activeProjectConfig.activeProjectConfigDetails);\n        }\n    }\n}).worker;\nvar sendActiveProjectDownToWorker = function (activeProjectConfigDetails) {\n    var projectData = projectDataLoader.getProjectDataLoaded(activeProjectConfigDetails);\n    exports.worker.setActiveProjectConfigDetails({ projectData: projectData });\n};\n// Subscribe and send down the stuff we need to send to the worker based on our state\nvar activeProjectConfig = require(\"../../disk/activeProjectConfig\");\nvar fileListingMaster = require(\"../fileListing/fileListingMaster\");\nfunction start() {\n    /** When active project changes send down the data */\n    activeProjectConfig.activeProjectConfigDetailsUpdated.on(sendActiveProjectDownToWorker);\n    fileListingMaster.fileListingDelta.on(function (delta) { return activeProjectConfig.fileListingDelta(delta); });\n    fmc.didEdits.on(function (edits) { return exports.worker.fileEdited(edits); });\n    fmc.savedFileChangedOnDisk.on(function (update) { return exports.worker.fileChangedOnDisk(update); });\n    fmc.didStatusChange.on(function (update) { return update.saved && exports.worker.fileSaved({ filePath: update.filePath }); });\n}\nexports.start = start;\n","/home/travis/build/npmtest/node-npmtest-alm/node_modules/alm/src/server/workers/lang/projectServiceContract.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// API provided by the worker (language tools)\nexports.worker = {\n    echo: {},\n    fileEdited: {},\n    fileChangedOnDisk: {},\n    fileSaved: {},\n    // Project Service stuff\n    getCompletionsAtPosition: {},\n    getCompletionEntryDetails: {},\n    quickInfo: {},\n    getRenameInfo: {},\n    getDefinitionsAtPosition: {},\n    getDoctorInfo: {},\n    getReferences: {},\n    formatDocument: {},\n    formatDocumentRange: {},\n    getNavigateToItems: {},\n    getNavigateToItemsForFilePath: {},\n    getDependencies: {},\n    getAST: {},\n    getQuickFixes: {},\n    applyQuickFix: {},\n    getSemanticTree: {},\n    getOccurrencesAtPosition: {},\n    getFormattingEditsAfterKeystroke: {},\n    removeUnusedImports: {},\n    /** Documentation browser */\n    getTopLevelModuleNames: {},\n    getUpdatedModuleInformation: {},\n    /** Uml diagram */\n    getUmlDiagramForFile: {},\n    /** tsFlow */\n    getFlowRoots: {},\n    /** live analysis */\n    getLiveAnalysis: {},\n    // Used to tell the worker about what project it should work on\n    // Note: The project validation / expansion happens locally. Only the hard stuff of *analysis* is done by the worker\n    // This makes the worker bit more host agnostic\n    setActiveProjectConfigDetails: {},\n    /** Build */\n    build: {},\n    getJSOutputStatus: {},\n};\n// API provided by master (web server)\nexports.master = {\n    sync: {},\n    getFileContents: {},\n    getOpenFilePaths: {},\n    // Sinks for important events\n    receiveErrorCacheDelta: {},\n    receiveFileOutputStatusUpdate: {},\n    receiveCompleteOutputStatusCacheUpdate: {},\n    receiveLiveBuildResults: {},\n    receiveIncrementallyAddedFile: {},\n    receiveWorking: {},\n};\n","/home/travis/build/npmtest/node-npmtest-alm/node_modules/alm/src/server/disk/fileModelCache.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * All our interaction with the file system generally goes through here\n */\nvar fileModel_1 = require(\"./fileModel\");\nvar events_1 = require(\"../../common/events\");\nvar fsu = require(\"../utils/fsu\");\nvar chalk = require(\"chalk\");\nexports.savedFileChangedOnDisk = new events_1.TypedEvent();\nexports.didEdits = new events_1.TypedEvent();\nexports.didStatusChange = new events_1.TypedEvent();\nexports.editorOptionsChanged = new events_1.TypedEvent();\nexports.didOpenFile = new events_1.TypedEvent();\nvar openFiles = [];\nfunction getOpenFile(filePath) {\n    if (openFiles.some(function (f) { return f.config.filePath == filePath; })) {\n        return openFiles.filter(function (f) { return f.config.filePath == filePath; })[0];\n    }\n}\nexports.getOpenFile = getOpenFile;\nfunction getOrCreateOpenFile(filePath, autoCreate) {\n    if (autoCreate === void 0) { autoCreate = false; }\n    filePath = fsu.consistentPath(filePath);\n    var file = getOpenFile(filePath);\n    if (!file) {\n        /** If you request a file that isn't there ... we are going to create it */\n        if (!fsu.existsSync(filePath) && autoCreate) {\n            fsu.writeFile(filePath, '');\n        }\n        file = new fileModel_1.FileModel({\n            filePath: filePath\n        });\n        exports.didOpenFile.emit({\n            filePath: filePath,\n            contents: file.getContents()\n        });\n        file.onSavedFileChangedOnDisk.on(function (evt) {\n            exports.savedFileChangedOnDisk.emit({ filePath: filePath, contents: evt.contents });\n        });\n        file.didEdits.on(function (evt) {\n            exports.didEdits.emit({ filePath: filePath, edits: evt.codeEdits });\n        });\n        file.didStatusChange.on(function (evt) {\n            exports.didStatusChange.emit({ filePath: filePath, saved: evt.saved, eol: evt.eol });\n        });\n        file.editorOptionsChanged.on(function (editorOptions) {\n            exports.editorOptionsChanged.emit({ filePath: filePath, editorOptions: editorOptions });\n        });\n        openFiles.push(file);\n    }\n    return file;\n}\nexports.getOrCreateOpenFile = getOrCreateOpenFile;\nfunction closeOpenFile(filePath) {\n    var file = getOpenFile(filePath);\n    if (file) {\n        file.save();\n        // Right now we still keep the file open indefinitely\n        // openFiles = openFiles.filter(f=> f.config.filePath !== filePath);\n    }\n}\nexports.closeOpenFile = closeOpenFile;\nfunction getOpenFiles() {\n    return openFiles;\n}\nexports.getOpenFiles = getOpenFiles;\nfunction isFileOpen(filePath) {\n    return !!getOpenFile(filePath);\n}\nexports.isFileOpen = isFileOpen;\nfunction saveOpenFile(filePath) {\n    var file = getOpenFile(filePath);\n    file.save();\n}\nexports.saveOpenFile = saveOpenFile;\n/**\n * Editor Config Stuff\n */\nfunction watchedEditorConfigChanged() {\n    getOpenFiles().forEach(function (fm) { return fm.recheckEditorOptions(); });\n    // TODO:\n    // Recheck editor config for all open files :-/\n    // The files should emit '`editorConfigChanged`' individually\n    // We should be listening to these events and pushing them out\n    // The front end editor should be listening to this event by filePath too.\n}\nexports.watchedEditorConfigChanged = watchedEditorConfigChanged;\n/**\n * File Tree managment functions\n */\nvar mkdirp = require(\"mkdirp\");\nfunction addFolder(filePath) {\n    mkdirp.sync(filePath);\n}\nexports.addFolder = addFolder;\nfunction deleteFromDisk(data) {\n    data.files.forEach(function (filePath) {\n        var file = getOpenFile(filePath);\n        if (file) {\n            file.delete();\n            openFiles = openFiles.filter(function (f) { return f.config.filePath !== filePath; });\n        }\n        else {\n            fsu.deleteFile(filePath);\n        }\n    });\n    data.dirs.forEach(function (dirPath) {\n        // delete any open files\n        var toClose = function (filePath) {\n            return filePath.startsWith(dirPath);\n        };\n        openFiles.filter(function (f) { return toClose(f.config.filePath); }).forEach(function (f) { return f.delete(); });\n        openFiles = openFiles.filter(function (f) { return !toClose(f.config.filePath); });\n        // delete the dir\n        fsu.deleteDir(dirPath);\n    });\n}\nexports.deleteFromDisk = deleteFromDisk;\nfunction duplicateFile(data) {\n    var contents = fsu.readFile(data.src);\n    fsu.writeFile(data.dest, contents);\n}\nexports.duplicateFile = duplicateFile;\nvar ncp_1 = require(\"ncp\");\nfunction duplicateDir(data) {\n    return new Promise(function (resolve) {\n        ncp_1.ncp(data.src, data.dest, function (err) {\n            if (err)\n                console.log('Move failed', err);\n            resolve(JSON.stringify(err));\n        });\n    });\n}\nexports.duplicateDir = duplicateDir;\nvar mv = require(\"mv\");\nfunction movePath(data) {\n    return new Promise(function (resolve) {\n        mv(data.src, data.dest, { mkdirp: true, clobber: true }, function (err) {\n            if (err)\n                console.log('Move failed', err);\n            resolve(JSON.stringify(err));\n        });\n    });\n}\nexports.movePath = movePath;\nvar open = require(\"open\");\nfunction launchDirectory(data) {\n    return new Promise(function (resolve) {\n        open(data.filePath);\n        resolve({ error: null });\n    });\n}\nexports.launchDirectory = launchDirectory;\nvar cp = require(\"child_process\");\nfunction launchTerminal(data) {\n    return new Promise(function (resolve) {\n        if (process.platform === 'darwin') {\n            cp.execSync(\"osascript -e 'tell application \\\"Terminal\\\" to activate' -e 'tell application \\\"Terminal\\\" to do script \\\"cd \" + data.filePath + \"\\\"'\");\n        }\n        else if (process.platform === 'win32') {\n            cp.execSync(\"start cmd.exe /K \\\"cd \" + data.filePath + \"\\\"\");\n        }\n        else {\n            // http://stackoverflow.com/a/31737949/390330\n            console.error(chalk.red(\"We don't have a command for your OS. Would love for you to help us\"));\n        }\n        resolve({ error: null });\n    });\n}\nexports.launchTerminal = launchTerminal;\n","/home/travis/build/npmtest/node-npmtest-alm/node_modules/alm/src/server/disk/fileModel.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar utils = require(\"../../common/utils\");\nvar os = require(\"os\");\nvar fsu = require(\"../utils/fsu\");\nvar chokidar = require(\"chokidar\");\nvar events_1 = require(\"../../common/events\");\nvar editorOptions_1 = require(\"./editorOptions\");\n/**\n * Loads a file from disk\n * watches it on fs and then if it changes sends the new content to the client\n * TODO: File is *always* saved to cache for recovery\n *\n * Has a model like code mirror ... just use lines at all places ... till we actually write to disk\n */\nvar FileModel = (function () {\n    function FileModel(config) {\n        var _this = this;\n        this.config = config;\n        this.text = [];\n        /** last known state of the file system text */\n        this.savedText = [];\n        /**\n         * New contents is only sent if the file has no pending changes. Otherwise it is silently ignored\n         */\n        this.onSavedFileChangedOnDisk = new events_1.TypedEvent();\n        /**\n         * Always emit\n         */\n        this.didEdits = new events_1.TypedEvent();\n        /**\n         * Always emit\n         */\n        this.didStatusChange = new events_1.TypedEvent();\n        /**\n         * Editor config changed\n         * Only after initial load\n         */\n        this.editorOptionsChanged = new events_1.TypedEvent();\n        this._justWroteFileToDisk = false;\n        this.fileListener = function (eventName, path) {\n            var contents = fsu.existsSync(_this.config.filePath) ? fsu.readFile(_this.config.filePath) : '';\n            var text = _this.splitlines(contents);\n            // If we wrote the file no need to do any further checks\n            // Otherwise sometime we end up editing the file and change event fires too late and we think its new content\n            if (_this._justWroteFileToDisk) {\n                _this._justWroteFileToDisk = false;\n                return;\n            }\n            // If new text same as current text nothing to do.\n            if (arraysEqualWithWhitespace(text, _this.savedText)) {\n                return;\n            }\n            if (_this.saved()) {\n                _this.text = text;\n                _this.savedText = _this.text.slice();\n                _this.onSavedFileChangedOnDisk.emit({ contents: _this.getContents() });\n            }\n        };\n        /** The chokidar watcher */\n        this.fsWatcher = null;\n        var contents = fsu.readFile(config.filePath);\n        this.newLine = this.getExpectedNewline(contents);\n        this.text = this.splitlines(contents);\n        this.savedText = this.text.slice();\n        this.watchFile();\n        this.editorOptions = editorOptions_1.getEditorOptions(config.filePath);\n    }\n    FileModel.prototype.getContents = function () {\n        return this.text.join('\\n');\n    };\n    /** Returns true if the file is same as what was on disk */\n    FileModel.prototype.edits = function (codeEdits) {\n        var _this = this;\n        /** PREF: This batching can probably be made more efficient */\n        codeEdits.forEach(function (edit) {\n            _this.edit(edit);\n        });\n        var saved = this.saved();\n        this.didEdits.emit({ codeEdits: codeEdits });\n        this.didStatusChange.emit({ saved: saved, eol: this.newLine });\n        return { saved: saved };\n    };\n    FileModel.prototype.edit = function (codeEdit) {\n        var lastLine = this.text.length - 1;\n        var beforeLines = this.text.slice(0, codeEdit.from.line);\n        // there might not be any after lines. This just might be a new line :)\n        var afterLines = codeEdit.to.line === lastLine ? [] : this.text.slice(codeEdit.to.line + 1, this.text.length);\n        var lines = this.text.slice(codeEdit.from.line, codeEdit.to.line + 1);\n        var content = lines.join('\\n');\n        var contentBefore = content.substr(0, codeEdit.from.ch);\n        var contentAfter = lines[lines.length - 1].substr(codeEdit.to.ch);\n        content = contentBefore + codeEdit.newText + contentAfter;\n        lines = content.split('\\n');\n        this.text = beforeLines.concat(lines).concat(afterLines);\n    };\n    FileModel.prototype.delete = function () {\n        this.unwatchFile();\n        fsu.deleteFile(this.config.filePath);\n    };\n    FileModel.prototype.save = function () {\n        // NOTE we can never easily mutate our local `text` otherwise we have to send the changes out and sync them which is going to be nightmare\n        var textToWrite = this.editorOptions.trimTrailingWhitespace ? this.text.map(function (t) { return t.replace(/[ \\f\\t\\v]*$/gm, ''); }) : this.text;\n        var contents = textToWrite.join(this.newLine);\n        if (this.editorOptions.insertFinalNewline && !contents.endsWith(this.newLine)) {\n            contents = contents + this.newLine;\n        }\n        fsu.writeFile(this.config.filePath, contents);\n        this._justWroteFileToDisk = true;\n        this.savedText = this.text.slice();\n        this.didStatusChange.emit({ saved: true, eol: this.newLine });\n    };\n    FileModel.prototype.saved = function () {\n        return utils.arraysEqual(this.text, this.savedText);\n    };\n    FileModel.prototype.watchFile = function () {\n        this.fsWatcher = chokidar.watch(this.config.filePath, { ignoreInitial: true });\n        this.fsWatcher.on('change', this.fileListener);\n    };\n    FileModel.prototype.unwatchFile = function () {\n        this.fsWatcher.close();\n        this.fsWatcher = null;\n    };\n    /** Just updates `text` saves */\n    FileModel.prototype.setContents = function (contents) {\n        this.text = this.splitlines(contents);\n        this.save();\n    };\n    /**\n     * Someone else should call this if an editor config file changes\n     * Here we need to re-evalute our options\n     */\n    FileModel.prototype.recheckEditorOptions = function () {\n        this.editorOptions = editorOptions_1.getEditorOptions(this.config.filePath);\n        this.editorOptionsChanged.emit(this.editorOptions);\n    };\n    /** Great for error messages etc. Ofcourse `0` based */\n    FileModel.prototype.getLinePreview = function (line) {\n        return this.text[line];\n    };\n    /**\n     * split lines\n     * https://github.com/codemirror/CodeMirror/blob/5738f9b2cff5241ea13e32db3579eb347e56e7a0/lib/codemirror.js#L8594\n     */\n    FileModel.prototype.splitlines = function (string) { return string.split(/\\r\\n?|\\n/); };\n    ;\n    /** https://github.com/sindresorhus/detect-newline/blob/master/index.js */\n    FileModel.prototype.getExpectedNewline = function (str) {\n        var newlines = (str.match(/(?:\\r?\\n)/g) || []);\n        var crlf = newlines.filter(function (el) { return el === '\\r\\n'; }).length;\n        var lf = newlines.length - crlf;\n        // My addition\n        if (lf == 0 && crlf == 0)\n            return os.EOL;\n        return crlf > lf ? '\\r\\n' : '\\n';\n    };\n    return FileModel;\n}());\nexports.FileModel = FileModel;\n/**\n * shallow equality of sorted string arrays that considers whitespace to be insignificant\n */\nfunction arraysEqualWithWhitespace(a, b) {\n    if (a === b)\n        return true;\n    if (a == null || b == null)\n        return false;\n    if (a.length !== b.length)\n        return false;\n    for (var i = 0; i < a.length; ++i) {\n        if (a[i].trim() !== b[i].trim())\n            return false;\n    }\n    return true;\n}\n","/home/travis/build/npmtest/node-npmtest-alm/node_modules/alm/src/server/disk/editorOptions.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * loads and parses `editorconfig` into the TypeScript `EditorOptions`\n */\nvar editorconfig = require(\"editorconfig\");\nvar os = require(\"os\");\nfunction getEditorOptions(filePath) {\n    /** Note: any thing not defined comes back as `undefined` (which is good) */\n    var config = editorconfig.parseSync(filePath);\n    // console.log(filePath, config); // DEBUG\n    /**\n     * Convert editorconfig to EditorOptions\n     */\n    // CR sounds like a dumb option. I am treating it as same as os.EOL\n    var end_of_line = config.end_of_line || 'os';\n    var newLineCharacter = end_of_line && config.end_of_line === 'lf' ? '\\n'\n        : end_of_line && config.end_of_line === 'crlf' ? '\\r\\n'\n            : os.EOL;\n    var indent_style = config.indent_style || 'space';\n    var convertTabsToSpaces = indent_style === 'space' ? true : false;\n    // TODO: consolidate tabSize (its indentSize or tabWidth)\n    // Similar to https://github.com/editorconfig/editorconfig-vscode/blob/73d1e7c00de20db83fd47b1d0ab3b0ffc5696ae0/src/Utils.ts#L14-L26\n    var tabSize = config.indent_size || config.tab_width || 2;\n    var trimTrailingWhitespace = config.trim_trailing_whitespace || false;\n    var insertFinalNewline = config.insert_final_newline == undefined ? false : config.insert_final_newline;\n    return {\n        tabSize: tabSize,\n        newLineCharacter: newLineCharacter,\n        convertTabsToSpaces: convertTabsToSpaces,\n        trimTrailingWhitespace: trimTrailingWhitespace,\n        insertFinalNewline: insertFinalNewline,\n    };\n}\nexports.getEditorOptions = getEditorOptions;\n","/home/travis/build/npmtest/node-npmtest-alm/node_modules/alm/src/server/disk/projectDataLoader.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar fmc = require(\"./fileModelCache\");\nvar tsconfig = require(\"../workers/lang/core/tsconfig\");\nvar typescriptDir = require(\"../workers/lang/core/typeScriptDir\");\n/** Only call this if the file has been validated 🌹 */\nfunction getProjectDataLoaded(activeProjectConfigDetails) {\n    var configFile = activeProjectConfigDetails.isVirtual\n        ? tsconfig.getDefaultInMemoryProject(activeProjectConfigDetails.tsconfigFilePath)\n        : tsconfig.getProjectSync(activeProjectConfigDetails.tsconfigFilePath).result;\n    var response = {\n        configFile: configFile,\n        filePathWithContents: []\n    };\n    var addFile = function (filePath) {\n        try {\n            var contents = fmc.getOrCreateOpenFile(filePath).getContents();\n            response.filePathWithContents.push({ filePath: filePath, contents: contents });\n        }\n        catch (e) {\n            console.log(\"Project Data Loader: Failed to load data for file: \" + filePath);\n            console.log(e);\n        }\n    };\n    // Add the `lib` files\n    var libFiles = typescriptDir.getDefaultLibFilePaths(configFile.project.compilerOptions);\n    libFiles.map(addFile);\n    // Add all the files\n    configFile.project.files.forEach(function (filePath) { return addFile(filePath); });\n    return response;\n}\nexports.getProjectDataLoaded = getProjectDataLoaded;\n","/home/travis/build/npmtest/node-npmtest-alm/node_modules/alm/src/server/workers/lang/core/tsconfig.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar fmc = require(\"../../../disk/fileModelCache\");\nvar fsu = require(\"../../../utils/fsu\");\nvar fs = require(\"fs\");\nvar json = require(\"../../../../common/json\");\nvar utils_1 = require(\"../../../../common/utils\");\nvar types_1 = require(\"../../../../common/types\");\nvar compilationContextExpander_1 = require(\"./compilationContextExpander\");\nvar tsconfigValidation_1 = require(\"./tsconfigValidation\");\n//////////////////////////////////////////////////////////////////////\nexports.errors = {\n    GET_PROJECT_INVALID_PATH: 'The path used to query for tsconfig.json does not exist',\n    GET_PROJECT_NO_PROJECT_FOUND: 'No Project Found',\n    GET_PROJECT_FAILED_TO_OPEN_PROJECT_FILE: 'Failed to fs.readFileSync the project file',\n    GET_PROJECT_PROJECT_FILE_INVALID_OPTIONS: 'Project file contains invalid options',\n    CREATE_FOLDER_MUST_EXIST: 'The folder must exist on disk in order to create a tsconfig.json',\n    CREATE_PROJECT_ALREADY_EXISTS: 'tsconfig.json file already exists',\n};\nvar path = require(\"path\");\nvar os = require(\"os\");\nvar formatting = require(\"./formatCodeOptions\");\nvar projectFileName = 'tsconfig.json';\n/**\n * This is what we use when the user doesn't specify a files / include\n */\nvar invisibleFilesInclude = [\"./**/*.ts\", \"./**/*.tsx\"];\nvar invisibleFilesIncludeWithJS = [\"./**/*.ts\", \"./**/*.tsx\", \"./**/*.js\"];\n/**\n * What we use to\n * - create a new tsconfig on disk\n * - create an in memory project\n * - default values for a tsconfig file read from disk. Therefore it must match ts defaults\n */\nvar defaultCompilerOptions = {\n    target: ts.ScriptTarget.ES5,\n    module: ts.ModuleKind.CommonJS,\n    moduleResolution: ts.ModuleResolutionKind.NodeJs,\n    jsx: ts.JsxEmit.None,\n    experimentalDecorators: false,\n    emitDecoratorMetadata: false,\n    declaration: false,\n    noImplicitAny: false,\n    suppressImplicitAnyIndexErrors: false,\n    strictNullChecks: false,\n};\n/**\n * If you want to create a project on the fly\n */\nfunction getDefaultInMemoryProject(srcFile) {\n    var dir = path.dirname(srcFile);\n    var allowJs = utils_1.isJs(srcFile);\n    var files = [srcFile];\n    var typings = compilationContextExpander_1.getDefinitionsForNodeModules(dir, files);\n    files = compilationContextExpander_1.increaseCompilationContext(files, allowJs);\n    files = utils_1.uniq(files.map(fsu.consistentPath));\n    var project = {\n        compilerOptions: utils_1.extend(defaultCompilerOptions, {\n            allowJs: allowJs,\n            lib: [\n                'dom',\n                'es2017'\n            ]\n        }),\n        files: files,\n        typings: typings.ours.concat(typings.implicit),\n        formatCodeOptions: formatting.defaultFormatCodeOptions(),\n        compileOnSave: true,\n        buildOnSave: false,\n    };\n    return {\n        projectFileDirectory: dir,\n        projectFilePath: srcFile,\n        project: project,\n        inMemory: true\n    };\n}\nexports.getDefaultInMemoryProject = getDefaultInMemoryProject;\nfunction getProjectSync(pathOrSrcFile) {\n    if (!fsu.existsSync(pathOrSrcFile)) {\n        return {\n            error: types_1.makeBlandError(pathOrSrcFile, exports.errors.GET_PROJECT_INVALID_PATH, 'tsconfig')\n        };\n    }\n    // Get the path directory\n    var dir = fs.lstatSync(pathOrSrcFile).isDirectory() ? pathOrSrcFile : path.dirname(pathOrSrcFile);\n    // Keep going up till we find the project file\n    var projectFile = '';\n    try {\n        projectFile = fsu.travelUpTheDirectoryTreeTillYouFind(dir, projectFileName);\n    }\n    catch (e) {\n        var err = e;\n        if (err.message == \"not found\") {\n            var bland = types_1.makeBlandError(fsu.consistentPath(pathOrSrcFile), exports.errors.GET_PROJECT_NO_PROJECT_FOUND, 'tsconfig');\n            return {\n                error: bland\n            };\n        }\n    }\n    projectFile = path.normalize(projectFile);\n    var projectFileDirectory = path.dirname(projectFile);\n    var projectFilePath = fsu.consistentPath(projectFile);\n    // We now have a valid projectFile. Parse it:\n    var projectSpec;\n    try {\n        var projectFileTextContent = fmc.getOrCreateOpenFile(projectFile).getContents();\n    }\n    catch (ex) {\n        return {\n            error: types_1.makeBlandError(pathOrSrcFile, exports.errors.GET_PROJECT_FAILED_TO_OPEN_PROJECT_FILE, 'tsconfig')\n        };\n    }\n    var res = json.parse(projectFileTextContent);\n    if (res.data) {\n        projectSpec = res.data;\n    }\n    else {\n        var bland = json.parseErrorToCodeError(projectFilePath, res.error, 'tsconfig');\n        return { error: bland };\n    }\n    // Setup default project options\n    if (!projectSpec.compilerOptions)\n        projectSpec.compilerOptions = {};\n    // Additional global level validations\n    if (projectSpec.files && projectSpec.exclude) {\n        var bland = types_1.makeBlandError(projectFilePath, 'You cannot use both \"files\" and \"exclude\" in tsconfig.json', 'tsconfig');\n        return { error: bland };\n    }\n    if (projectSpec.compilerOptions.allowJs && !projectSpec.compilerOptions.outDir) {\n        var bland = types_1.makeBlandError(projectFilePath, 'You must use an `outDir` if you are using `allowJs` in tsconfig.json', 'tsconfig');\n        return { error: bland };\n    }\n    if (projectSpec.compilerOptions.allowJs && projectSpec.compilerOptions.allowNonTsExtensions) {\n        // Bad because otherwise all `package.json`s in the `files` start to give *JavaScript parsing* errors.\n        var bland = types_1.makeBlandError(projectFilePath, 'If you are using `allowJs` you should not specify `allowNonTsExtensions` in tsconfig.json', 'tsconfig');\n        return { error: bland };\n    }\n    /**\n     * Always add `outDir`(if any) to exclude\n     */\n    if (projectSpec.compilerOptions.outDir) {\n        projectSpec.exclude = (projectSpec.exclude || []).concat(projectSpec.compilerOptions.outDir);\n    }\n    /**\n     * Finally expand whatever needs expanding\n     * See : https://github.com/TypeStrong/tsconfig/issues/19\n     */\n    try {\n        var tsResult = ts.parseJsonConfigFileContent(projectSpec, ts.sys, path.dirname(projectFile), null, projectFile);\n        // console.log(tsResult); // DEBUG\n        projectSpec.files = tsResult.fileNames || [];\n    }\n    catch (ex) {\n        return {\n            error: types_1.makeBlandError(projectFilePath, ex.message, 'tsconfig')\n        };\n    }\n    var pkg = null;\n    try {\n        var packageJSONPath = fsu.travelUpTheDirectoryTreeTillYouFind(projectFileDirectory, 'package.json');\n        if (packageJSONPath) {\n            var parsedPackage = JSON.parse(fmc.getOrCreateOpenFile(packageJSONPath).getContents());\n            pkg = {\n                main: parsedPackage.main,\n                name: parsedPackage.name,\n                directory: path.dirname(packageJSONPath),\n                definition: parsedPackage.typescript && parsedPackage.typescript.definition\n            };\n        }\n    }\n    catch (ex) {\n        // console.error('no package.json found', projectFileDirectory, ex.message);\n    }\n    var project = {\n        compilerOptions: {},\n        files: projectSpec.files.map(function (x) { return path.resolve(projectFileDirectory, x); }),\n        formatCodeOptions: formatting.makeFormatCodeOptions(projectSpec.formatCodeOptions),\n        compileOnSave: projectSpec.compileOnSave == undefined ? true : projectSpec.compileOnSave,\n        package: pkg,\n        typings: [],\n        buildOnSave: !!projectSpec.buildOnSave,\n    };\n    // Validate the raw compiler options before converting them to TS compiler options\n    var validationResult = tsconfigValidation_1.validate(projectSpec.compilerOptions);\n    if (validationResult.errorMessage) {\n        return {\n            error: types_1.makeBlandError(projectFilePath, validationResult.errorMessage, 'tsconfig')\n        };\n    }\n    // Convert the raw options to TS options\n    project.compilerOptions = rawToTsCompilerOptions(projectSpec.compilerOptions, projectFileDirectory);\n    // Expand files to include references\n    project.files = compilationContextExpander_1.increaseCompilationContext(project.files, !!project.compilerOptions.allowJs);\n    // Expand files to include node_modules / package.json / typescript.definition\n    var typings = compilationContextExpander_1.getDefinitionsForNodeModules(dir, project.files);\n    project.files = project.files.concat(typings.implicit);\n    project.typings = typings.ours.concat(typings.implicit);\n    project.files = project.files.concat(typings.packagejson);\n    // Normalize to \"/\" for all files\n    // And take the uniq values\n    project.files = utils_1.uniq(project.files.map(fsu.consistentPath));\n    projectFileDirectory = fsu.consistentPath(projectFileDirectory);\n    return {\n        result: {\n            projectFileDirectory: projectFileDirectory,\n            projectFilePath: projectFileDirectory + '/' + projectFileName,\n            project: project,\n            inMemory: false\n        }\n    };\n}\nexports.getProjectSync = getProjectSync;\n/** Creates a project by source file location. Defaults are assumed unless overriden by the optional spec. */\nfunction createProjectRootSync(srcFolder, defaultOptions, overWrite) {\n    if (defaultOptions === void 0) { defaultOptions = utils_1.extend(defaultCompilerOptions, {\n        jsx: ts.JsxEmit.React,\n        declaration: true,\n        experimentalDecorators: true,\n        emitDecoratorMetadata: true,\n        outDir: 'lib',\n        lib: [\n            'dom',\n            'es2017',\n        ],\n    }); }\n    if (overWrite === void 0) { overWrite = true; }\n    if (!fs.existsSync(srcFolder)) {\n        throw new Error(exports.errors.CREATE_FOLDER_MUST_EXIST);\n    }\n    var projectFilePath = path.normalize(srcFolder + '/' + projectFileName);\n    if (!overWrite && fs.existsSync(projectFilePath))\n        throw new Error(exports.errors.CREATE_PROJECT_ALREADY_EXISTS);\n    // We need to write the raw spec\n    var projectSpec = {};\n    projectSpec.compilerOptions = tsToRawCompilerOptions(defaultOptions);\n    projectSpec.compileOnSave = true;\n    projectSpec.exclude = [\"node_modules\"];\n    projectSpec.include = [\"src\"];\n    fs.writeFileSync(projectFilePath, json.stringify(projectSpec, os.EOL));\n    return getProjectSync(srcFolder);\n}\nexports.createProjectRootSync = createProjectRootSync;\n//////////////////////////////////////////////////////////////////////\n/**\n * ENUM to String and String to ENUM\n */\nvar typescriptEnumMap = {\n    target: {\n        'es3': ts.ScriptTarget.ES3,\n        'es5': ts.ScriptTarget.ES5,\n        'es6': ts.ScriptTarget.ES2015,\n        'es2015': ts.ScriptTarget.ES2015,\n        'es2016': ts.ScriptTarget.ES2016,\n        'es2017': ts.ScriptTarget.ES2017,\n        'esnext': ts.ScriptTarget.ESNext,\n        'next': ts.ScriptTarget.ESNext,\n        'latest': ts.ScriptTarget.Latest\n    },\n    module: {\n        'none': ts.ModuleKind.None,\n        'commonjs': ts.ModuleKind.CommonJS,\n        'amd': ts.ModuleKind.AMD,\n        'umd': ts.ModuleKind.UMD,\n        'system': ts.ModuleKind.System,\n        'es6': ts.ModuleKind.ES2015,\n        'es2015': ts.ModuleKind.ES2015,\n    },\n    moduleResolution: {\n        'node': ts.ModuleResolutionKind.NodeJs,\n        'classic': ts.ModuleResolutionKind.Classic\n    },\n    jsx: {\n        'none': ts.JsxEmit.None,\n        'preserve': ts.JsxEmit.Preserve,\n        'react': ts.JsxEmit.React,\n        'react-native': ts.JsxEmit.ReactNative,\n    },\n    newLine: {\n        'CRLF': ts.NewLineKind.CarriageReturnLineFeed,\n        'LF': ts.NewLineKind.LineFeed\n    }\n};\n/**\n * These are options that are relative paths to tsconfig.json\n * Note: There is also `rootDirs` that is handled manually\n */\nvar pathResolveTheseOptions = [\n    'out',\n    'outFile',\n    'outDir',\n    'rootDir',\n    'baseUrl',\n];\n//////////////////////////////////////////////////////////////////////\n/**\n * Raw To Compiler\n */\nfunction rawToTsCompilerOptions(jsonOptions, projectDir) {\n    var compilerOptions = utils_1.extend(defaultCompilerOptions);\n    /** Parse the enums */\n    for (var key in jsonOptions) {\n        if (typescriptEnumMap[key]) {\n            var name_1 = jsonOptions[key];\n            var map = typescriptEnumMap[key];\n            compilerOptions[key] = map[name_1.toLowerCase()] || map[name_1.toUpperCase()];\n        }\n        else {\n            compilerOptions[key] = jsonOptions[key];\n        }\n    }\n    /**\n     * Parse all paths to not be relative\n     */\n    pathResolveTheseOptions.forEach(function (option) {\n        if (compilerOptions[option] !== undefined) {\n            compilerOptions[option] = fsu.resolve(projectDir, compilerOptions[option]);\n        }\n    });\n    /**\n     * Support `rootDirs`\n     * https://github.com/Microsoft/TypeScript-Handbook/blob/release-2.0/pages/Module%20Resolution.md#virtual-directories-with-rootdirs\n     */\n    if (compilerOptions.rootDirs !== undefined && Array.isArray(compilerOptions.rootDirs)) {\n        compilerOptions.rootDirs = compilerOptions.rootDirs.map(function (rd) {\n            return fsu.resolve(projectDir, rd);\n        });\n    }\n    /**\n     * Till `out` is removed. Support it by just copying it to `outFile`\n     */\n    if (compilerOptions.out !== undefined) {\n        compilerOptions.outFile = path.resolve(projectDir, compilerOptions.out);\n    }\n    /**\n     * The default for moduleResolution as implemented by the compiler\n     */\n    if (!jsonOptions.moduleResolution && compilerOptions.module !== ts.ModuleKind.CommonJS) {\n        compilerOptions.moduleResolution = ts.ModuleResolutionKind.Classic;\n    }\n    return compilerOptions;\n}\n/**\n * Compiler to Raw\n */\nfunction tsToRawCompilerOptions(compilerOptions) {\n    var jsonOptions = utils_1.extend({}, compilerOptions);\n    /**\n     * Convert enums to raw\n     */\n    Object.keys(compilerOptions).forEach(function (key) {\n        if (typescriptEnumMap[key] !== undefined && compilerOptions[key] !== undefined) {\n            var value = compilerOptions[key];\n            var rawToTsMapForKey = typescriptEnumMap[key];\n            var reverseMap = utils_1.reverseKeysAndValues(rawToTsMapForKey);\n            jsonOptions[key] = reverseMap[value];\n        }\n    });\n    return jsonOptions;\n}\n","/home/travis/build/npmtest/node-npmtest-alm/node_modules/alm/src/common/types.js":"/**\n * Its Types (e.g. enums) + constants :)\n */\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.cacheDir = './.alm';\nexports.title = \"Application Lifecycle Management tools for TypeScript\";\nvar TriState;\n(function (TriState) {\n    TriState[TriState[\"Unknown\"] = 0] = \"Unknown\";\n    TriState[TriState[\"True\"] = 1] = \"True\";\n    TriState[TriState[\"False\"] = 2] = \"False\";\n})(TriState = exports.TriState || (exports.TriState = {}));\nexports.errors = {\n    CALLED_WHEN_NO_ACTIVE_PROJECT_FOR_FILE_PATH: \"A query *that needs an active project* was made when there is no active project for given filePath\",\n    CALLED_WHEN_NO_ACTIVE_PROJECT_GLOBAL: \"A query *that needs an active project* was made when there is no active project\"\n};\n/**\n * Some session constants\n */\n/** When a new server stats up */\nexports.urlHashNormal = \"root\";\n/** When user requests a new window */\nexports.urlHashNewSession = \"new-session\";\n/** When alm is started ni debug mode */\nexports.urlHashDebugSession = \"debug\";\n/**\n * FARM : Don't want to crash by running out of memory / ui preference\n */\nexports.maxCountFindAndReplaceMultiResults = 1000;\n/**\n * Reason is we want to transact by file path\n * Also, this function sorts per file so you can apply refactorings in order 🌹\n */\nfunction getRefactoringsByFilePath(refactorings) {\n    var loc = {};\n    for (var _i = 0, refactorings_1 = refactorings; _i < refactorings_1.length; _i++) {\n        var refac = refactorings_1[_i];\n        if (!loc[refac.filePath])\n            loc[refac.filePath] = [];\n        loc[refac.filePath].push(refac);\n    }\n    // sort each of these in descending by start location\n    for (var filePath in loc) {\n        var refactorings_2 = loc[filePath];\n        refactorings_2.sort(function (a, b) {\n            return (b.span.start - a.span.start);\n        });\n    }\n    return loc;\n}\nexports.getRefactoringsByFilePath = getRefactoringsByFilePath;\n/**\n * For file listing we like to know if its a dir or file\n */\nvar FilePathType;\n(function (FilePathType) {\n    FilePathType[FilePathType[\"File\"] = 0] = \"File\";\n    FilePathType[FilePathType[\"Dir\"] = 1] = \"Dir\";\n})(FilePathType = exports.FilePathType || (exports.FilePathType = {}));\n/** The JS file can only be in one of these states */\nvar JSOutputState;\n(function (JSOutputState) {\n    /** If emit skipped (Either emit is blocked or compiler options are noEmit) or perhaps there isn't a JS file emit for this (e.g .d.ts files) */\n    JSOutputState[JSOutputState[\"NoJSFile\"] = 1] = \"NoJSFile\";\n    /** If JS file then its one of these */\n    JSOutputState[JSOutputState[\"JSUpToDate\"] = 2] = \"JSUpToDate\";\n    JSOutputState[JSOutputState[\"JSOutOfDate\"] = 3] = \"JSOutOfDate\";\n})(JSOutputState = exports.JSOutputState || (exports.JSOutputState = {}));\n/**\n * Complete related stuff\n */\n/** Some constants */\nexports.completionKindSnippet = \"snippet\";\nexports.completionKindPath = \"path\";\n/**\n * Errors\n */\nvar ErrorsDisplayMode;\n(function (ErrorsDisplayMode) {\n    ErrorsDisplayMode[ErrorsDisplayMode[\"all\"] = 1] = \"all\";\n    ErrorsDisplayMode[ErrorsDisplayMode[\"openFiles\"] = 2] = \"openFiles\";\n})(ErrorsDisplayMode = exports.ErrorsDisplayMode || (exports.ErrorsDisplayMode = {}));\n/**\n * The TypeDoc icons a pretty expansive 🌹 with a few ideas that I disagree with / or think are too difficult.\n * E.g the type `event`. The \"grey\" coloring of the global functions. The following is a simpler subset.\n *\n * Places that need to be kept in sync:\n * - typeIcon.tsx: the location in typeIcons.svg\n * - the legend component\n * - the server responses\n */\nvar IconType;\n(function (IconType) {\n    /**\n     * There can be only one global\n     * Any of the remaining things can be either in a module or global\n     */\n    IconType[IconType[\"Global\"] = 0] = \"Global\";\n    IconType[IconType[\"Namespace\"] = 1] = \"Namespace\";\n    IconType[IconType[\"Variable\"] = 2] = \"Variable\";\n    IconType[IconType[\"Function\"] = 3] = \"Function\";\n    IconType[IconType[\"FunctionGeneric\"] = 4] = \"FunctionGeneric\";\n    IconType[IconType[\"Enum\"] = 5] = \"Enum\";\n    IconType[IconType[\"EnumMember\"] = 6] = \"EnumMember\";\n    IconType[IconType[\"Interface\"] = 7] = \"Interface\";\n    IconType[IconType[\"InterfaceGeneric\"] = 8] = \"InterfaceGeneric\";\n    IconType[IconType[\"InterfaceConstructor\"] = 9] = \"InterfaceConstructor\";\n    IconType[IconType[\"InterfaceProperty\"] = 10] = \"InterfaceProperty\";\n    IconType[IconType[\"InterfaceMethod\"] = 11] = \"InterfaceMethod\";\n    IconType[IconType[\"InterfaceMethodGeneric\"] = 12] = \"InterfaceMethodGeneric\";\n    IconType[IconType[\"InterfaceIndexSignature\"] = 13] = \"InterfaceIndexSignature\";\n    IconType[IconType[\"Class\"] = 14] = \"Class\";\n    IconType[IconType[\"ClassGeneric\"] = 15] = \"ClassGeneric\";\n    IconType[IconType[\"ClassConstructor\"] = 16] = \"ClassConstructor\";\n    IconType[IconType[\"ClassProperty\"] = 17] = \"ClassProperty\";\n    IconType[IconType[\"ClassMethod\"] = 18] = \"ClassMethod\";\n    IconType[IconType[\"ClassMethodGeneric\"] = 19] = \"ClassMethodGeneric\";\n    IconType[IconType[\"ClassIndexSignature\"] = 20] = \"ClassIndexSignature\";\n})(IconType = exports.IconType || (exports.IconType = {}));\nvar UMLClassMemberVisibility;\n(function (UMLClassMemberVisibility) {\n    UMLClassMemberVisibility[UMLClassMemberVisibility[\"Public\"] = 1] = \"Public\";\n    UMLClassMemberVisibility[UMLClassMemberVisibility[\"Private\"] = 2] = \"Private\";\n    UMLClassMemberVisibility[UMLClassMemberVisibility[\"Protected\"] = 3] = \"Protected\";\n})(UMLClassMemberVisibility = exports.UMLClassMemberVisibility || (exports.UMLClassMemberVisibility = {}));\nvar UMLClassMemberLifetime;\n(function (UMLClassMemberLifetime) {\n    UMLClassMemberLifetime[UMLClassMemberLifetime[\"Instance\"] = 1] = \"Instance\";\n    UMLClassMemberLifetime[UMLClassMemberLifetime[\"Static\"] = 2] = \"Static\";\n})(UMLClassMemberLifetime = exports.UMLClassMemberLifetime || (exports.UMLClassMemberLifetime = {}));\n/**\n * Tested\n */\nvar TestStatus;\n(function (TestStatus) {\n    TestStatus[TestStatus[\"NotRunYet\"] = 1] = \"NotRunYet\";\n    TestStatus[TestStatus[\"Fail\"] = 2] = \"Fail\";\n    TestStatus[TestStatus[\"Success\"] = 3] = \"Success\";\n    TestStatus[TestStatus[\"Skipped\"] = 4] = \"Skipped\";\n})(TestStatus = exports.TestStatus || (exports.TestStatus = {}));\n/** Lots of things don't have a good error. But we would like to be consistent even with simple errors */\nfunction makeBlandError(filePath, error, source) {\n    return {\n        source: source,\n        filePath: filePath,\n        from: {\n            line: 0,\n            ch: 0\n        },\n        to: {\n            line: 0,\n            ch: 0\n        },\n        message: error,\n        preview: null,\n        level: 'error'\n    };\n}\nexports.makeBlandError = makeBlandError;\n//////////////////////\n// Live react demo\n//////////////////////\nexports.liveDemoMountUrl = '/demo';\n","/home/travis/build/npmtest/node-npmtest-alm/node_modules/alm/src/server/workers/lang/core/compilationContextExpander.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar utils_1 = require(\"../../../../common/utils\");\nvar fmc = require(\"../../../disk/fileModelCache\");\nvar path = require(\"path\");\nvar fsu = require(\"../../../utils/fsu\");\n/**\n * The files that you provide in a tsconfig.json might not be the *complete* set of files\n * We preprocess these files to add additional files based on the contents of these files\n */\nfunction increaseCompilationContext(files, allowJs) {\n    var filesMap = utils_1.createMap(files);\n    var willNeedMoreAnalysis = function (file) {\n        if (!filesMap[file]) {\n            filesMap[file] = true;\n            files.push(file);\n            return true;\n        }\n        else {\n            return false;\n        }\n    };\n    var getReferencedOrImportedFiles = function (files) {\n        var referenced = [];\n        files.forEach(function (file) {\n            try {\n                var content = fmc.getOrCreateOpenFile(file).getContents();\n            }\n            catch (ex) {\n                // if we cannot read a file for whatever reason just quit\n                return;\n            }\n            var preProcessedFileInfo = ts.preProcessFile(content, true), dir = path.dirname(file);\n            var extensions = ['.ts', '.d.ts', '.tsx'];\n            if (allowJs) {\n                extensions.push('.js');\n                extensions.push('.jsx');\n            }\n            function getIfExists(filePathNoExt) {\n                for (var _i = 0, extensions_1 = extensions; _i < extensions_1.length; _i++) {\n                    var ext = extensions_1[_i];\n                    if (fsu.existsSync(filePathNoExt + ext)) {\n                        return filePathNoExt + ext;\n                    }\n                }\n            }\n            referenced.push(preProcessedFileInfo.referencedFiles.map(function (fileReference) {\n                // We assume reference paths are always relative\n                var file = path.resolve(dir, fsu.consistentPath(fileReference.fileName));\n                // Try by itself then with extensions\n                if (fsu.existsSync(file)) {\n                    return file;\n                }\n                return getIfExists(file);\n            }).filter(function (file) { return !!file; })\n                .concat(preProcessedFileInfo.importedFiles\n                .filter(function (fileReference) { return fsu.isRelative(fileReference.fileName); })\n                .map(function (fileReference) {\n                var fileNoExt = path.resolve(dir, fileReference.fileName);\n                var file = getIfExists(fileNoExt);\n                if (!file) {\n                    file = getIfExists(file + \"/index\");\n                }\n                return file;\n            }).filter(function (file) { return !!file; })));\n        });\n        return utils_1.selectMany(referenced);\n    };\n    var more = getReferencedOrImportedFiles(files)\n        .filter(willNeedMoreAnalysis);\n    while (more.length) {\n        more = getReferencedOrImportedFiles(files)\n            .filter(willNeedMoreAnalysis);\n    }\n    return files;\n}\nexports.increaseCompilationContext = increaseCompilationContext;\n/**\n *  Spec\n *  We will expand on files making sure that we don't have a `typing` with the same name\n *  Also if two node_modules reference a similar sub project (and also recursively) then the one with latest `version` field wins\n */\nfunction getDefinitionsForNodeModules(projectDir, files) {\n    var packagejson = [];\n    /** TODO use later when we care about versions */\n    function versionStringToNumber(version) {\n        var _a = version.split('.'), maj = _a[0], min = _a[1], patch = _a[2];\n        return parseInt(maj) * 1000000 + parseInt(min);\n    }\n    var typings = {};\n    // Find our `typings` (anything in a typings folder with extension `.d.ts` is considered a typing)\n    // These are INF powerful\n    var ourTypings = files\n        .filter(function (f) { return path.basename(path.dirname(f)) == 'typings' && f.endsWith('.d.ts')\n        || path.basename(path.dirname(path.dirname(f))) == 'typings' && f.endsWith('.d.ts'); });\n    ourTypings.forEach(function (f) { return typings[path.basename(f)] = { filePath: f, version: Infinity }; });\n    var existing = utils_1.createMap(files.map(fsu.consistentPath));\n    function addAllReferencedFilesWithMaxVersion(file) {\n        var dir = path.dirname(file);\n        try {\n            var content = fmc.getOrCreateOpenFile(file).getContents();\n        }\n        catch (ex) {\n            // if we cannot read a file for whatever reason just quit\n            return;\n        }\n        var preProcessedFileInfo = ts.preProcessFile(content, true);\n        var files = preProcessedFileInfo.referencedFiles.map(function (fileReference) {\n            // We assume reference paths are always relative\n            var file = path.resolve(dir, fileReference.fileName);\n            // Try by itself, .d.ts\n            if (fsu.existsSync(file)) {\n                return file;\n            }\n            if (fsu.existsSync(file + '.tsx')) {\n                return file + '.tsx';\n            }\n            if (fsu.existsSync(file + '.d.ts')) {\n                return file + '.d.ts';\n            }\n        }).filter(function (f) { return !!f; });\n        // Only ones we don't have by name yet\n        // TODO: replace INF with an actual version\n        files = files\n            .filter(function (f) { return !typings[path.basename(f)] || typings[path.basename(f)].version > Infinity; });\n        // Add these\n        files.forEach(function (f) { return typings[path.basename(f)] = { filePath: f, version: Infinity }; });\n        // Keep expanding\n        files.forEach(function (f) { return addAllReferencedFilesWithMaxVersion(f); });\n    }\n    // Keep going up till we find node_modules\n    // at that point read the `package.json` for each file in node_modules\n    // And then if that package.json has `typescript.definition` we import that file\n    try {\n        var node_modules = fsu.travelUpTheDirectoryTreeTillYouFind(projectDir, 'node_modules', true);\n        // For each sub directory of node_modules look at package.json and then `typescript.definition`\n        var moduleDirs = fsu.getDirs(node_modules);\n        for (var _i = 0, moduleDirs_1 = moduleDirs; _i < moduleDirs_1.length; _i++) {\n            var moduleDir = moduleDirs_1[_i];\n            try {\n                var package_json = JSON.parse(fmc.getOrCreateOpenFile(moduleDir + \"/package.json\").getContents());\n                packagejson.push(moduleDir + \"/package.json\");\n            }\n            catch (ex) {\n                // Can't read package.json ... no worries ... move on to other modules\n                continue;\n            }\n            if (package_json.typescript && package_json.typescript.definition) {\n                var file = path.resolve(moduleDir, './', package_json.typescript.definition);\n                /** If the file configuration points to a valid file */\n                if (fsu.existsSync(file)) {\n                    typings[path.basename(file)] = {\n                        filePath: file,\n                        version: Infinity\n                    };\n                    // Also add any files that this `.d.ts` references as long as they don't conflict with what we have\n                    addAllReferencedFilesWithMaxVersion(file);\n                }\n            }\n        }\n    }\n    catch (ex) {\n        if (ex.message == \"not found\") {\n            // Sure we didn't find node_modules\n            // Thats cool\n        }\n        else {\n            console.error('Failed to read package.json from node_modules due to error:', ex, ex.stack);\n        }\n    }\n    var all = Object.keys(typings)\n        .map(function (typing) { return typings[typing].filePath; })\n        .map(function (x) { return fsu.consistentPath(x); });\n    var implicit = all\n        .filter(function (x) { return !existing[x]; });\n    var ours = all\n        .filter(function (x) { return existing[x]; });\n    return { implicit: implicit, ours: ours, packagejson: packagejson };\n}\nexports.getDefinitionsForNodeModules = getDefinitionsForNodeModules;\n","/home/travis/build/npmtest/node-npmtest-alm/node_modules/alm/src/server/workers/lang/core/tsconfigValidation.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar simpleValidator = require(\"./simpleValidator\");\nvar types = simpleValidator.types;\nvar compilerOptionsValidation = {\n    allowJs: { type: types.boolean },\n    allowNonTsExtensions: { type: types.boolean },\n    allowSyntheticDefaultImports: { type: types.boolean },\n    allowUnreachableCode: { type: types.boolean },\n    allowUnusedLabels: { type: types.boolean },\n    alwaysStrict: { type: types.boolean },\n    baseUrl: { type: types.string },\n    charset: { type: types.string },\n    codepage: { type: types.number },\n    declaration: { type: types.boolean },\n    declarationDir: { type: types.string },\n    diagnostics: { type: types.boolean },\n    emitBOM: { type: types.boolean },\n    experimentalAsyncFunctions: { type: types.boolean },\n    experimentalDecorators: { type: types.boolean },\n    emitDecoratorMetadata: { type: types.boolean },\n    forceConsistentCasingInFileNames: { type: types.boolean },\n    help: { type: types.boolean },\n    importHelpers: { type: types.boolean },\n    init: { type: types.boolean },\n    inlineSourceMap: { type: types.boolean },\n    inlineSources: { type: types.boolean },\n    isolatedModules: { type: types.boolean },\n    jsx: { type: types.string, validStringValues: ['none', 'preserve', 'react', 'react-native'] },\n    jsxFactory: { type: types.string },\n    locals: { type: types.string },\n    lib: { type: types.array, sub: { type: types.string } },\n    list: { type: types.array, sub: { type: types.string } },\n    listEmittedFiles: { type: types.boolean },\n    listFiles: { type: types.boolean },\n    mapRoot: { type: types.string },\n    maxNodeModuleJsDepth: { type: types.number },\n    module: { type: types.string, validStringValues: ['none', 'commonjs', 'amd', 'umd', 'system', 'es6', 'es2015'] },\n    moduleResolution: { type: types.string, validStringValues: ['classic', 'node'] },\n    newLine: { type: types.string },\n    noEmit: { type: types.boolean },\n    noEmitHelpers: { type: types.boolean },\n    noEmitOnError: { type: types.boolean },\n    noErrorTruncation: { type: types.boolean },\n    noFallthroughCasesInSwitch: { type: types.boolean },\n    noImplicitAny: { type: types.boolean },\n    noImplicitReturns: { type: types.boolean },\n    noImplicitThis: { type: types.boolean },\n    noImplicitUseStrict: { type: types.boolean },\n    noLib: { type: types.boolean },\n    noLibCheck: { type: types.boolean },\n    noResolve: { type: types.boolean },\n    noUnusedParameters: { type: types.boolean },\n    noUnusedLocals: { type: types.boolean },\n    out: { type: types.string },\n    outFile: { type: types.string },\n    outDir: { type: types.string },\n    paths: { type: types.object },\n    preserveConstEnums: { type: types.boolean },\n    pretty: { type: types.boolean },\n    reactNamespace: { type: types.string },\n    removeComments: { type: types.boolean },\n    rootDir: { type: types.string },\n    rootDirs: { type: types.array, sub: { type: types.string } },\n    skipDefaultLibCheck: { type: types.boolean },\n    skipLibCheck: { type: types.boolean },\n    sourceMap: { type: types.boolean },\n    sourceRoot: { type: types.string },\n    strictNullChecks: { type: types.boolean },\n    stripInternal: { type: types.boolean },\n    suppressExcessPropertyErrors: { type: types.boolean },\n    suppressImplicitAnyIndexErrors: { type: types.boolean },\n    suppressOutputPathCheck: { type: types.boolean },\n    target: { type: types.string, validStringValues: ['es3', 'es5', 'es6', 'es2015', 'es2016', 'es2017', 'esnext', 'next', 'latest'] },\n    traceResolution: { type: types.boolean },\n    types: { type: types.array, sub: { type: types.string } },\n    typeRoots: { type: types.array, sub: { type: types.string } },\n    typesSearchPaths: { type: types.array, sub: { type: types.string } },\n    version: { type: types.boolean },\n    watch: { type: types.boolean },\n};\nvar validator = new simpleValidator.SimpleValidator(compilerOptionsValidation);\nexports.validate = validator.validate;\n","/home/travis/build/npmtest/node-npmtest-alm/node_modules/alm/src/server/workers/lang/core/simpleValidator.js":"/// Not useful for user input validation\n// But great for simple config validation\n// works only by \"n\" valid options\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.types = {\n    string: 'string',\n    boolean: 'boolean',\n    number: 'number',\n    object: 'object',\n    array: 'array',\n};\nvar SimpleValidator = (function () {\n    function SimpleValidator(validationInfo) {\n        var _this = this;\n        this.validationInfo = validationInfo;\n        this.validate = function (toValidate) {\n            var errors = { invalidValues: [], extraKeys: [], errorMessage: '' };\n            Object.keys(toValidate).forEach(function (k) {\n                // Check extra keys\n                if (!_this.validationInfo[k]) {\n                    if (_this.potentialLowerCaseMatch[k]) {\n                        errors.extraKeys.push(\"Key: '\" + k + \"' is a potential lower case match for '\" + _this.potentialLowerCaseMatch[k] + \"'. Fix the casing.\");\n                    }\n                    else {\n                        errors.extraKeys.push(\"Unknown Option: \" + k);\n                    }\n                }\n                else {\n                    var validationInfo = _this.validationInfo[k];\n                    var value_1 = toValidate[k];\n                    /** Do an array check */\n                    if (validationInfo.type === 'array') {\n                        if (!Array.isArray(value_1)) {\n                            errors.invalidValues.push(\"Key: '\" + k + \"' should be an array. But set value is \" + value_1);\n                        }\n                        /** TODO: check sub members */\n                    }\n                    else if (validationInfo.type === 'object') {\n                        if (typeof value_1 !== 'object') {\n                            errors.invalidValues.push(\"Key: '\" + k + \"' should be an object. But set value is \" + value_1);\n                        }\n                        /** TODO: check sub members */\n                    }\n                    else if (typeof value_1 !== validationInfo.type) {\n                        errors.invalidValues.push(\"Key: '\" + k + \"' has a value '\" + JSON.stringify(value_1) + \"' of an invalid type: \" + typeof value_1);\n                    }\n                    /** Do a valid values check */\n                    if (typeof value_1 === 'string' && validationInfo.validStringValues && validationInfo.validStringValues.length) {\n                        var validValues = validationInfo.validStringValues;\n                        if (!validValues.some(function (valid) { return valid.toLowerCase() === value_1.toLowerCase(); })) {\n                            errors.invalidValues.push(\"Key: '\" + k + \"' has an invalid value: \" + value_1);\n                        }\n                    }\n                }\n            });\n            var total = errors.invalidValues.concat(errors.extraKeys);\n            if (total.length) {\n                errors.errorMessage = total.join(\"\\n\");\n            }\n            return errors;\n        };\n        this.potentialLowerCaseMatch = {};\n        Object.keys(validationInfo).forEach(function (k) { return _this.potentialLowerCaseMatch[k.toLowerCase()] = k; });\n    }\n    return SimpleValidator;\n}());\nexports.SimpleValidator = SimpleValidator;\n","/home/travis/build/npmtest/node-npmtest-alm/node_modules/alm/src/server/workers/lang/core/formatCodeOptions.js":"/**\n * Maintainance:\n * When a new option is added add it to:\n * - the FormatCodeOptions interface\n * - the defaultFormatCodeOptions function\n * - the makeFormatCodeOptions function\n */\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar os = require(\"os\");\nfunction defaultFormatCodeOptions() {\n    return {\n        IndentSize: 4,\n        TabSize: 4,\n        NewLineCharacter: os.EOL,\n        ConvertTabsToSpaces: true,\n        IndentStyle: ts.IndentStyle.Smart,\n        InsertSpaceAfterCommaDelimiter: true,\n        InsertSpaceAfterSemicolonInForStatements: true,\n        InsertSpaceBeforeAndAfterBinaryOperators: true,\n        InsertSpaceAfterKeywordsInControlFlowStatements: true,\n        InsertSpaceAfterFunctionKeywordForAnonymousFunctions: false,\n        InsertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis: false,\n        InsertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets: false,\n        InsertSpaceAfterOpeningAndBeforeClosingTemplateStringBraces: false,\n        PlaceOpenBraceOnNewLineForFunctions: false,\n        PlaceOpenBraceOnNewLineForControlBlocks: false,\n    };\n}\nexports.defaultFormatCodeOptions = defaultFormatCodeOptions;\nfunction makeFormatCodeOptions(config) {\n    var options = defaultFormatCodeOptions();\n    if (!config) {\n        return options;\n    }\n    if (typeof config.insertSpaceAfterCommaDelimiter === \"boolean\") {\n        options.InsertSpaceAfterCommaDelimiter = config.insertSpaceAfterCommaDelimiter;\n    }\n    if (typeof config.insertSpaceAfterSemicolonInForStatements === \"boolean\") {\n        options.InsertSpaceAfterSemicolonInForStatements = config.insertSpaceAfterSemicolonInForStatements;\n    }\n    if (typeof config.insertSpaceBeforeAndAfterBinaryOperators === \"boolean\") {\n        options.InsertSpaceBeforeAndAfterBinaryOperators = config.insertSpaceBeforeAndAfterBinaryOperators;\n    }\n    if (typeof config.insertSpaceAfterKeywordsInControlFlowStatements === \"boolean\") {\n        options.InsertSpaceAfterKeywordsInControlFlowStatements = config.insertSpaceAfterKeywordsInControlFlowStatements;\n    }\n    if (typeof config.insertSpaceAfterFunctionKeywordForAnonymousFunctions === \"boolean\") {\n        options.InsertSpaceAfterFunctionKeywordForAnonymousFunctions = config.insertSpaceAfterFunctionKeywordForAnonymousFunctions;\n    }\n    if (typeof config.insertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis === \"boolean\") {\n        options.InsertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis = config.insertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis;\n    }\n    if (typeof config.insertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets === \"boolean\") {\n        options.InsertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets = config.insertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets;\n    }\n    if (typeof config.insertSpaceAfterOpeningAndBeforeClosingTemplateStringBraces === \"boolean\") {\n        options.InsertSpaceAfterOpeningAndBeforeClosingTemplateStringBraces = config.insertSpaceAfterOpeningAndBeforeClosingTemplateStringBraces;\n    }\n    if (typeof config.placeOpenBraceOnNewLineForFunctions === \"boolean\") {\n        options.PlaceOpenBraceOnNewLineForFunctions = config.placeOpenBraceOnNewLineForFunctions;\n    }\n    if (typeof config.placeOpenBraceOnNewLineForControlBlocks === \"boolean\") {\n        options.PlaceOpenBraceOnNewLineForControlBlocks = config.placeOpenBraceOnNewLineForControlBlocks;\n    }\n    if (typeof config.tabSize === \"number\") {\n        options.TabSize = config.tabSize;\n    }\n    if (typeof config.newLineCharacter === \"string\") {\n        options.NewLineCharacter = config.newLineCharacter;\n    }\n    if (typeof config.convertTabsToSpaces === \"boolean\") {\n        options.ConvertTabsToSpaces = config.convertTabsToSpaces;\n    }\n    return options;\n}\nexports.makeFormatCodeOptions = makeFormatCodeOptions;\n","/home/travis/build/npmtest/node-npmtest-alm/node_modules/alm/src/server/workers/lang/core/typeScriptDir.js":"/**\n * Stuff from TypeScript Dir\n */\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar path = require(\"path\");\n/** A constant pointing you to the TypeScript dir */\nexports.typescriptDirectory = path.dirname(require.resolve('typescript')).split('\\\\').join('/');\n/** Tells you if a filePath is inside the TypeScript dir (most likely some lib file) */\nexports.isFileInTypeScriptDir = function (filePath) { return filePath.startsWith(exports.typescriptDirectory); };\n/** Returns you the filePath of a fileName from the TypeScript folder */\nfunction fileFromLibFolder(fileName) {\n    return path.join(exports.typescriptDirectory, fileName).split('\\\\').join('/');\n}\n/** From the compiler's commandLineParser we find the `lib` to `fileName` mapping */\nvar libOption = ts.optionDeclarations.find(function (x) { return x.name == \"lib\"; });\nvar libToFileNameMap = libOption.element.type;\n/** Based on the compiler options returns you the lib files that should be included */\nexports.getDefaultLibFilePaths = function (options) {\n    if (options.noLib) {\n        return [];\n    }\n    if (options.lib) {\n        /**\n         * Note: this might need to be more fancy at some point.\n         *  E.g. user types `es6.array` but we need to get `es2015.array`\n         */\n        return options.lib.map(function (lib) { return fileFromLibFolder(libToFileNameMap.get(lib)); });\n    }\n    return [fileFromLibFolder(ts.getDefaultLibFileName(options))];\n};\n","/home/travis/build/npmtest/node-npmtest-alm/node_modules/alm/src/server/globalErrorCacheServer.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * A global view on the errors. This consolidates errors from all the workers + web server.\n *\n * A few error sources at the moment\n * - web server: active project config does some validation\n * - ts worker\n * - linter worker\n */\nvar errorsCache_1 = require(\"./utils/errorsCache\");\nexports.errorsCache = new errorsCache_1.ErrorsCache();\nexports.errorsCache.errorsDelta.on(function () {\n    // console.log('Error count', errorsCache.debugGetErrorsFlattened().length); // DEBUG\n});\n","/home/travis/build/npmtest/node-npmtest-alm/node_modules/alm/src/server/utils/errorsCache.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar events_1 = require(\"../../common/events\");\nvar utils_1 = require(\"../../common/utils\");\nvar equal = require(\"deep-equal\");\n// What we use to identify a unique error\nvar errorKey = function (error) { return error.from.line + \":\" + error.from.ch + \":\" + error.message; };\n/**\n * Maintains the list of errors that have been encountered,\n * and notifies anyone who is concerned of updated values\n */\nvar ErrorsCache = (function () {\n    function ErrorsCache() {\n        var _this = this;\n        /**\n         * When a cache boots up (e.g. server restart). Its good to know if its an initial errors delta\n         * If so the client might want to clear all previous errors\n         */\n        this.initial = true;\n        /**\n         * Event that can be wired up to sync one error cache with another\n         */\n        this.errorsDelta = new events_1.TypedEvent();\n        /**\n         * You can wire up an errors Delta from one cache to this one.\n         */\n        this.applyDelta = function (delta) {\n            // Added:\n            Object.keys(delta.added).forEach(function (fp) {\n                if (!_this._errorsByFilePath[fp])\n                    _this._errorsByFilePath[fp] = delta.added[fp];\n                else\n                    _this._errorsByFilePath[fp] = _this._errorsByFilePath[fp].concat(delta.added[fp]);\n            });\n            // Removed:\n            Object.keys(delta.removed).forEach(function (fp) {\n                var removedErrorsMap = utils_1.createMapByKey(delta.removed[fp], errorKey);\n                _this._errorsByFilePath[fp] = (_this._errorsByFilePath[fp] || []).filter(function (e) { return !removedErrorsMap[errorKey(e)]; });\n            });\n            _this.sendErrors();\n        };\n        /**\n         *  DELTA MAINTAINANCE\n         */\n        this.lastErrorsByFilePath = {};\n        /**\n         * current errors\n         */\n        this._errorsByFilePath = {};\n        /**\n         * debounced as constantly sending errors quickly degrades the web experience\n         */\n        this.sendErrors = utils_1.debounce(function () {\n            // Create a delta\n            var oldErrorsByFilePath = _this.lastErrorsByFilePath;\n            var newErrorsByFilePath = _this._errorsByFilePath;\n            var delta = {\n                added: {},\n                removed: {},\n                initial: _this.initial,\n            };\n            _this.initial = false;\n            // Added:\n            Object.keys(newErrorsByFilePath).forEach(function (filePath) {\n                var newErrors = newErrorsByFilePath[filePath];\n                // All new\n                if (!oldErrorsByFilePath[filePath]) {\n                    delta.added[filePath] = newErrors;\n                }\n                else {\n                    var oldErrors = oldErrorsByFilePath[filePath];\n                    var oldErrorMap_1 = utils_1.createMapByKey(oldErrors, errorKey);\n                    newErrors.forEach(function (ne) {\n                        var newErrorKey = errorKey(ne);\n                        if (!oldErrorMap_1[newErrorKey]) {\n                            if (!delta.added[filePath])\n                                delta.added[filePath] = [];\n                            delta.added[filePath].push(ne);\n                        }\n                    });\n                }\n            });\n            // Removed:\n            Object.keys(oldErrorsByFilePath).forEach(function (filePath) {\n                var oldErrors = oldErrorsByFilePath[filePath];\n                // All gone\n                if (!newErrorsByFilePath[filePath]) {\n                    delta.removed[filePath] = oldErrors;\n                }\n                else {\n                    var newErrors = newErrorsByFilePath[filePath];\n                    var newErrorMap_1 = utils_1.createMapByKey(newErrors, errorKey);\n                    oldErrors.forEach(function (oe) {\n                        var oldErrorKey = errorKey(oe);\n                        if (!newErrorMap_1[oldErrorKey]) {\n                            if (!delta.removed[filePath])\n                                delta.removed[filePath] = [];\n                            delta.removed[filePath].push(oe);\n                        }\n                    });\n                }\n            });\n            // Send out the delta\n            _this.errorsDelta.emit(delta);\n            // Preserve for future delta\n            _this.lastErrorsByFilePath = {};\n            Object.keys(_this._errorsByFilePath).map(function (fp) { return _this.lastErrorsByFilePath[fp] = _this._errorsByFilePath[fp]; });\n        }, 250);\n        /** The pased errors are considered *the only current* errors for the filePath */\n        this.setErrorsByFilePaths = function (filePaths, errors) {\n            var somethingNew = false;\n            // For all found errors add them\n            var errorsByFile = utils_1.createMapByKey(errors, function (e) { return e.filePath; });\n            for (var filePath in errorsByFile) {\n                if (!equal(_this._errorsByFilePath[filePath], errorsByFile[filePath])) {\n                    somethingNew = true;\n                    _this._errorsByFilePath[filePath] = errorsByFile[filePath];\n                }\n            }\n            // For not found errors clear them\n            for (var _i = 0, filePaths_1 = filePaths; _i < filePaths_1.length; _i++) {\n                var filePath = filePaths_1[_i];\n                if (!errorsByFile[filePath] && (_this._errorsByFilePath[filePath] && _this._errorsByFilePath[filePath].length)) {\n                    somethingNew = true;\n                    _this._errorsByFilePath[filePath] = [];\n                }\n            }\n            if (somethingNew) {\n                _this.sendErrors();\n            }\n        };\n        /**\n         * * Sending massive error lists *constantly* can quickly degrade the web experience\n         * - only send 50 errors per file or 200+ errors total\n         */\n        this.getErrorsLimited = function () {\n            var limitedCopy = {};\n            var total = 0;\n            for (var filePath in _this._errorsByFilePath) {\n                var errors = _this._errorsByFilePath[filePath];\n                if (errors.length > 50)\n                    errors = errors.slice(0, 50);\n                limitedCopy[filePath] = errors;\n                total += errors.length;\n                if (total > 200)\n                    break;\n            }\n            var totalCount = Object.keys(_this._errorsByFilePath)\n                .map(function (x) { return _this._errorsByFilePath[x].length; })\n                .reduce(function (acc, i) { return acc + i; }, 0);\n            return { errorsByFilePath: limitedCopy, totalCount: totalCount, syncCount: total, tooMany: total !== totalCount };\n        };\n        /**\n         * Get/Set all the errors for an initial sync between error caches\n         */\n        this.getErrors = function () { return _this._errorsByFilePath; };\n        this.setErrors = function (errorsByFilePath) { return _this._errorsByFilePath = errorsByFilePath; };\n        /** Only used for debugging */\n        this.debugGetErrorsFlattened = function () {\n            return Object.keys(_this._errorsByFilePath)\n                .map(function (x) { return _this._errorsByFilePath[x]; })\n                .reduce(function (acc, x) { return acc.concat(x); }, []);\n        };\n        /**\n         * Clear all errors. Resets the cache.\n         *\n         * Also good or an initial sync.\n         * e.g. when the socket server reboots\n         *   it wants to clear any errors that any connected clicks might have\n         */\n        this.clearErrors = function () {\n            _this._errorsByFilePath = {};\n            _this.sendErrors();\n        };\n        /** Utility to provide a semantic name to *clearing errors*  */\n        this.clearErrorsForFilePath = function (filePath) {\n            _this._errorsByFilePath[filePath] = [];\n            _this.sendErrors();\n        };\n        /** If a source goes down (crashes) and it comes back we want to clear any knowledge of previous errors by source */\n        this.clearErrorsForSource = function (source) {\n            var errorsByFilePath = Object.create(null);\n            for (var filePath in _this._errorsByFilePath) {\n                var errors = _this._errorsByFilePath[filePath];\n                errorsByFilePath[filePath] = errors.filter(function (e) { return e.source !== source; });\n            }\n            _this._errorsByFilePath = errorsByFilePath;\n            _this.sendErrors();\n        };\n        /** Utility to query */\n        this.getErrorsForFilePath = function (filePath) {\n            return _this._errorsByFilePath[filePath] || [];\n        };\n    }\n    return ErrorsCache;\n}());\nexports.ErrorsCache = ErrorsCache;\n","/home/travis/build/npmtest/node-npmtest-alm/node_modules/alm/src/server/disk/activeProjectConfig.js":"/**\n * This module is responsible for reading (with error reporting) the tsconfig.json\n *\n * - It will emit the relevant information (configFile) for use by the project service if all good\n * - It will emit the errors in the configFile or ask to clear them if needed\n * - It will emit the available projects\n *\n * Note: When the app starts the active project is determined by `session.ts`\n */\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar events_1 = require(\"../../common/events\");\nvar utils = require(\"../../common/utils\");\nvar tsconfig = require(\"../workers/lang/core/tsconfig\");\n/** Disk access / session stuff */\nvar session = require(\"./session\");\nvar fmc = require(\"./fileModelCache\");\nvar flm = require(\"../workers/fileListing/fileListingMaster\");\nvar workingDir = require(\"./workingDir\");\nvar fsu = require(\"../utils/fsu\");\n/**\n * Global variables\n */\n/**\n * The active project name\n * Warning: `export`ed only to allow us to check if there is some details on ts crash restart\n */\nexports.activeProjectConfigDetails = null;\nexports.activeProjectConfigDetailsUpdated = new events_1.TypedEvent();\n/** Only if the file is valid will we end up here */\nvar configFile = null;\nexports.configFileUpdated = new events_1.TypedEvent();\nexports.projectFilePathsUpdated = new events_1.TypedEvent();\n/**\n * Allows incremental update of file paths based on *advanced* project analysis\n */\nexports.incrementallyAddedFile = function (filePath) {\n    if (configFile\n        && configFile.project\n        && configFile.project.files\n        && !configFile.project.files.some(function (f) { return f === filePath; })) {\n        configFile.project.files.push(filePath);\n        exports.projectFilePathsUpdated.emit({ filePaths: configFile.project.files });\n    }\n};\n/**\n * Errors in tsconfig.json\n */\nvar errorsCache_1 = require(\"../utils/errorsCache\");\nexports.errorsInTsconfig = new errorsCache_1.ErrorsCache();\nfunction setErrorsInTsconfig(filePath, errors) {\n    console.log('TSCONFIG: Error', errors[0].message);\n    exports.errorsInTsconfig.setErrorsByFilePaths([filePath], errors);\n}\nfunction clearErrorsInTsconfig(filePath) {\n    console.log('TSCONFIG: All Good!', filePath);\n    exports.errorsInTsconfig.clearErrors();\n}\n/**\n * on server start\n */\nfunction start() {\n    // Keep session on disk in sync\n    exports.activeProjectConfigDetailsUpdated.on(function (ap) {\n        if (ap.tsconfigFilePath) {\n            session.setTsconfigPath(ap.tsconfigFilePath);\n        }\n    });\n    // Helps us sync only once in the beginning\n    var synced = false;\n    // Resume session\n    var ses = session.readDiskSessionsFile();\n    if (ses.relativePathToTsconfig) {\n        var tsconfig_1 = workingDir.makeAbsolute(ses.relativePathToTsconfig);\n        if (fsu.existsSync(tsconfig_1)) {\n            // Needs to be set so that we watch it even in case of errors\n            exports.activeProjectConfigDetails = Utils.tsconfigToActiveProjectConfigDetails(tsconfig_1);\n            // Try and sync with these details\n            syncCore(exports.activeProjectConfigDetails);\n            synced = true;\n        }\n    }\n    refreshAvailableProjects()\n        .then(function () { return !synced && sync(); });\n}\nexports.start = start;\n/** All the available projects */\nexports.availableProjects = new events_1.TypedEvent();\nfunction refreshAvailableProjects() {\n    return flm.filePathsCompleted.current().then(function (list) {\n        // Detect some tsconfig.json\n        var tsconfigs = list.filePaths.map(function (t) { return t.filePath; }).filter(function (t) { return t.endsWith('tsconfig.json'); });\n        // sort by shortest length first (with extra big weight for node_modules):\n        var weightConfig = function (config) { return config.includes('node_modules') ? config.length + 100 : config.length; };\n        tsconfigs = tsconfigs.sort(function (a, b) {\n            return weightConfig(a) - weightConfig(b);\n        });\n        var projectConfigs = tsconfigs.map(Utils.tsconfigToActiveProjectConfigDetails);\n        exports.availableProjects.emit(projectConfigs);\n    });\n}\n/** General purpose utility functions specific to this file */\nvar Utils;\n(function (Utils) {\n    /**\n     * Used to\n     * - convert a filePath found in directory indexing into a project that is selectable\n     * - thaw last session active project filePath\n     */\n    function tsconfigToActiveProjectConfigDetails(filePath) {\n        var relative = workingDir.makeRelative(filePath);\n        var isNodeModule = relative.includes('node_modules');\n        var isVirtual = utils.isJsOrTs(filePath) ? true : false;\n        return {\n            name: isNodeModule ? relative : utils.getDirectoryAndFileName(filePath),\n            isVirtual: isVirtual,\n            tsconfigFilePath: filePath\n        };\n    }\n    Utils.tsconfigToActiveProjectConfigDetails = tsconfigToActiveProjectConfigDetails;\n})(Utils || (Utils = {}));\n/** convert project name to current project */\nfunction sync() {\n    exports.availableProjects.current().then(function (projectConfigs) {\n        var activeProjectName = (exports.activeProjectConfigDetails && exports.activeProjectConfigDetails.tsconfigFilePath);\n        var projectConfig = projectConfigs.find(function (x) { return x.tsconfigFilePath == activeProjectName; });\n        if (!projectConfig) {\n            console.log('[TSCONFIG]: No active project');\n            return;\n        }\n        syncCore(projectConfig);\n    });\n}\nexports.sync = sync;\n/** ensures that the `projectConfig` can actually be parsed. If so propogates the set event. */\nfunction syncCore(projectConfig) {\n    var activeProjectName = (exports.activeProjectConfigDetails && exports.activeProjectConfigDetails.name);\n    configFile = ConfigFile.getConfigFileFromDiskOrInMemory(projectConfig);\n    // In case of error we exit as `ConfigFile.getConfigFileFromDiskOrInMemory` already does the error reporting\n    if (!configFile)\n        return;\n    exports.configFileUpdated.emit(configFile);\n    exports.projectFilePathsUpdated.emit({ filePaths: configFile.project.files });\n    // Set the active project (the project we get returned might not be the active project name)\n    exports.activeProjectConfigDetails = projectConfig;\n    exports.activeProjectConfigDetailsUpdated.emit(exports.activeProjectConfigDetails);\n}\nexports.syncCore = syncCore;\nvar syncDebounced = utils.debounce(sync, 1000);\n/**\n * Files changing on disk\n */\nfunction fileListingDelta(delta) {\n    // Check if we have a current project\n    // If we have a current project does it have some expansion\n    // If so check if some files need to be *removed* or *added*\n    if (!configFile)\n        return;\n    var projectDir = configFile.projectFileDirectory;\n    // HEURISTIC : if some delta file path is *under* the `tsconfig.json` path\n    if (delta.addedFilePaths.some(function (_a) {\n        var filePath = _a.filePath;\n        return filePath.startsWith(projectDir);\n    })\n        || delta.removedFilePaths.some(function (_a) {\n            var filePath = _a.filePath;\n            return filePath.startsWith(projectDir);\n        })) {\n        /**\n         * Does something match the glob\n         */\n        var matched = delta.addedFilePaths.concat(delta.removedFilePaths).map(function (c) { return c.filePath; }).filter(function (fp) { return utils.isJsOrTs(fp); });\n        if (matched.length) {\n            syncDebounced();\n        }\n    }\n}\nexports.fileListingDelta = fileListingDelta;\nvar ConfigFile;\n(function (ConfigFile) {\n    /**\n     * This explicilty loads the project from the filesystem to check it for errors\n     * For Virtual projects it just returns the in memory project\n     */\n    function getConfigFileFromDiskOrInMemory(config) {\n        if (config.isVirtual) {\n            return tsconfig.getDefaultInMemoryProject(config.tsconfigFilePath);\n        }\n        var filePath = config.tsconfigFilePath;\n        var _a = tsconfig.getProjectSync(filePath), projectFile = _a.result, error = _a.error;\n        if (!error) {\n            clearErrorsInTsconfig(projectFile.projectFilePath);\n            return projectFile;\n        }\n        else {\n            setErrorsInTsconfig(filePath, [error]);\n            return undefined;\n        }\n    }\n    ConfigFile.getConfigFileFromDiskOrInMemory = getConfigFileFromDiskOrInMemory;\n})(ConfigFile || (ConfigFile = {}));\n/**\n * As soon as we get a new file listing refresh available projects\n */\nflm.filePathsCompleted.on(function (data) {\n    refreshAvailableProjects();\n});\n/**\n * As soon as edit happens on the project file do a sync\n */\nfunction checkProjectFileChanges(evt) {\n    var currentConfigFilePath = exports.activeProjectConfigDetails && exports.activeProjectConfigDetails.tsconfigFilePath;\n    if (evt.filePath == currentConfigFilePath) {\n        sync();\n    }\n}\nvar checkProjectFileChangesDebounced = utils.debounce(checkProjectFileChanges, 1000);\nfmc.didEdits.on(checkProjectFileChangesDebounced);\nfmc.savedFileChangedOnDisk.on(checkProjectFileChangesDebounced);\n","/home/travis/build/npmtest/node-npmtest-alm/node_modules/alm/src/server/disk/session.js":"/**\n * The session manages the state associated with a browser window connection.\n * This allows us to restore tabs + userconfiguration etc.\n * We just drive the session id from the browser url\n */\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar types = require(\"../../common/types\");\nvar json = require(\"../../common/json\");\nvar fsu = require(\"../utils/fsu\");\nvar utils = require(\"../../common/utils\");\nvar workingDir = require(\"./workingDir\");\nvar commandLine = require(\"../commandLine\");\nvar tsconfig = require(\"../workers/lang/core/tsconfig\");\nvar sessionFile = types.cacheDir + '/sessionsV2.json';\n/**\n * If there is no session then a default one will be created for you and sent over\n */\nfunction getDefaultOrNewSession(sessionId) {\n    var sessions = readDiskSessionsFile().sessions;\n    /**\n     * Cases to handle\n     * if default select first (but if none create)\n     * if duplicate then duplicate (but if none create and use that one)\n     * if session id then search (but if none create)\n     */\n    // if none create\n    var ifNoneCreate = function (session, id) {\n        if (id === void 0) { id = utils.createId(); }\n        if (!session) {\n            session = {\n                id: id,\n                tabLayout: {\n                    type: 'stack',\n                    width: 100,\n                    height: 100,\n                    tabs: [],\n                    subItems: [],\n                    activeItemIndex: 0,\n                },\n                lastUsed: new Date().getTime(),\n                selectedTabId: null,\n            };\n            writeDiskSession(session);\n            return session;\n        }\n        else {\n            return session;\n        }\n    };\n    var session;\n    if (commandLine.getOptions().debug) {\n        session = ifNoneCreate(sessions.find(function (session) { return session.id === types.urlHashDebugSession; }), types.urlHashDebugSession);\n    }\n    else if (!sessionId || sessionId === types.urlHashNormal) {\n        session = ifNoneCreate(sessions.filter(function (s) { return s.id !== types.urlHashDebugSession; })[0]);\n    }\n    else if (sessionId === types.urlHashNewSession) {\n        session = sessions[0]; // last used is always on top\n        if (session) {\n            session = {\n                id: utils.createId(),\n                tabLayout: session.tabLayout,\n                lastUsed: new Date().getTime(),\n                selectedTabId: session.selectedTabId,\n            };\n            writeDiskSession(session);\n        }\n        else {\n            session = ifNoneCreate(session);\n        }\n    }\n    else {\n        session = ifNoneCreate(sessions.find(function (session) { return session.id === sessionId; }));\n    }\n    /**\n     * Update the session on disk for future calls to be stable\n     */\n    var commandLineTabs = getCommandLineTabs();\n    if (commandLineTabs.length) {\n        // Utility to find first `stack` and just add to its tabs\n        var done_1 = false;\n        var tryAddingToStack_1 = function (layout) {\n            if (done_1)\n                return;\n            if (layout.type === 'stack') {\n                layout.tabs = layout.tabs.concat(commandLineTabs);\n                done_1 = true;\n            }\n            else {\n                layout.subItems.forEach(tryAddingToStack_1);\n            }\n        };\n        // Start at root\n        tryAddingToStack_1(session.tabLayout);\n        /** Write it out */\n        writeDiskSession(session);\n    }\n    return session;\n}\nexports.getDefaultOrNewSession = getDefaultOrNewSession;\n/**\n * Only returns the command line tabs once\n * Means you can call it as many times as you like\n */\nfunction getCommandLineTabs() {\n    /** Add any command line files to the session */\n    var files = commandLine.getOptions().filePaths;\n    var tabs = files\n        .map(function (file) { return utils.getUrlFromFilePathAndProtocol({ protocol: 'file', filePath: file }); })\n        .map(function (url) { return workingDir.makeRelativeUrl(url); })\n        .map(function (relativeUrl) { return ({ id: utils.createId(), relativeUrl: relativeUrl, additionalData: null }); });\n    // clear for future\n    // Doing it multiple times would mean that we would polute the user session on each new tab opening\n    commandLine.getOptions().filePaths = [];\n    return tabs;\n}\n/**\n * UI to disk and Disk to UI helpers\n */\nfunction uiToDiskTab(uiTab) {\n    var relativeUrl = workingDir.makeRelativeUrl(uiTab.url);\n    return {\n        id: uiTab.id,\n        relativeUrl: relativeUrl,\n        additionalData: uiTab.additionalData,\n    };\n}\nfunction diskToUITab(diskTab) {\n    var url = workingDir.makeAbsoluteUrl(diskTab.relativeUrl);\n    var _a = utils.getFilePathAndProtocolFromUrl(url), filePath = _a.filePath, protocol = _a.protocol;\n    if (protocol === 'file' && !fsu.existsSync(filePath))\n        return null;\n    return {\n        id: diskTab.id,\n        url: url,\n        additionalData: diskTab.additionalData,\n    };\n}\nfunction uiToDiskTabLayout(uiLayout) {\n    return {\n        type: uiLayout.type,\n        width: uiLayout.width,\n        height: uiLayout.height,\n        tabs: uiLayout.tabs.map(uiToDiskTab),\n        subItems: uiLayout.subItems.map(uiToDiskTabLayout),\n        activeItemIndex: uiLayout.activeItemIndex,\n    };\n}\nfunction diskToUITabLayout(diskLayout) {\n    return {\n        type: diskLayout.type,\n        width: diskLayout.width,\n        height: diskLayout.height,\n        tabs: diskLayout.tabs.map(diskToUITab).filter(function (x) { return !!x; }),\n        subItems: diskLayout.subItems.map(diskToUITabLayout),\n        activeItemIndex: diskLayout.activeItemIndex,\n    };\n}\nfunction readDiskSessionsFile() {\n    var sessionFileContents = {\n        sessions: []\n    };\n    if (fsu.existsSync(sessionFile) && !commandLine.getOptions().safe) {\n        var contents = json.parse(fsu.readFile(sessionFile));\n        if (contents.data) {\n            sessionFileContents = contents.data;\n        }\n    }\n    /**\n     * Active project setup logic. In decreasing order\n     * - If there is an active project in the command line\n     * - If there is an active project in the last session\n     * - Common locations\n     */\n    var commonTsconfigLocations = [\n        '.',\n        './src',\n        './ts',\n        './lib',\n        './App-UI/src'\n    ].map(function (x) { return x + '/tsconfig.json'; });\n    if (commandLine.getOptions().init) {\n        sessionFileContents.relativePathToTsconfig = './tsconfig.json';\n        // Write the tsconfig.json file\n        tsconfig.createProjectRootSync(workingDir.getProjectRoot());\n        writeDiskSessionFile(sessionFileContents);\n        // Clear so we don't keep creating\n        commandLine.getOptions().init = false;\n    }\n    else if (commandLine.getOptions().project) {\n        sessionFileContents.relativePathToTsconfig = workingDir.makeRelative(commandLine.getOptions().project);\n        writeDiskSessionFile(sessionFileContents);\n    }\n    else if (!sessionFileContents.relativePathToTsconfig) {\n        var found = commonTsconfigLocations.find(function (cl) { return fsu.existsSync(cl); });\n        if (found) {\n            sessionFileContents.relativePathToTsconfig = found;\n            writeDiskSessionFile(sessionFileContents);\n        }\n    }\n    return sessionFileContents;\n}\nexports.readDiskSessionsFile = readDiskSessionsFile;\nfunction writeDiskSession(session) {\n    // Update last used time\n    session.lastUsed = new Date().getTime();\n    var sessionFileContents = readDiskSessionsFile();\n    // Merge with what is on disk by id\n    var sessions = sessionFileContents.sessions\n        .filter(function (sesh) { return sesh.id !== session.id; });\n    sessions.unshift(session); // last used is always on top\n    sessionFileContents.sessions = sessions;\n    writeDiskSessionFile(sessionFileContents);\n}\nfunction writeDiskSessionFile(sessionFileContents) {\n    fsu.writeFile(sessionFile, json.stringify(sessionFileContents));\n}\nfunction setTsconfigPath(tsconfigFilePath) {\n    var sessionFileContents = readDiskSessionsFile();\n    sessionFileContents.relativePathToTsconfig = workingDir.makeRelative(tsconfigFilePath);\n    writeDiskSessionFile(sessionFileContents);\n}\nexports.setTsconfigPath = setTsconfigPath;\nfunction setOpenUITabs(sessionId, layout, selectedTabId) {\n    var session = getDefaultOrNewSession(sessionId);\n    session.tabLayout = uiToDiskTabLayout(layout);\n    session.selectedTabId = selectedTabId;\n    writeDiskSession(session);\n}\nexports.setOpenUITabs = setOpenUITabs;\nfunction getOpenUITabs(sessionId) {\n    var session = getDefaultOrNewSession(sessionId);\n    return { tabLayout: diskToUITabLayout(session.tabLayout), selectedTabId: session.selectedTabId };\n}\nexports.getOpenUITabs = getOpenUITabs;\nfunction getValidSessionId(sessionId) {\n    var session = getDefaultOrNewSession(sessionId);\n    return { sessionId: session.id };\n}\nexports.getValidSessionId = getValidSessionId;\n/**\n * For various simple settings\n * setter\n */\nfunction setSetting(config) {\n    var session = getDefaultOrNewSession(config.sessionId);\n    session[config.settingId] = config.value;\n    writeDiskSession(session);\n}\nexports.setSetting = setSetting;\n/**\n * For various simple settings\n * getter\n */\nfunction getSetting(config) {\n    var session = getDefaultOrNewSession(config.sessionId);\n    return session[config.settingId];\n}\nexports.getSetting = getSetting;\n","/home/travis/build/npmtest/node-npmtest-alm/node_modules/alm/src/server/commandLine.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar minimist = require(\"minimist\");\nvar utils = require(\"../common/utils\");\nvar workingDir = require(\"./disk/workingDir\");\nvar fsu = require(\"./utils/fsu\");\nvar chalk = require(\"chalk\");\nexports.defaultPort = process.env.PORT /* the port by Windows azure */\n    || 4444;\nvar defaultHost = '0.0.0.0';\nvar minimistOpts = {\n    string: ['dir', 'config', 'host', 'httpskey', 'httpscert', 'auth'],\n    boolean: ['open', 'safe', 'init', 'build', 'debug'],\n    alias: {\n        't': ['port'],\n        'd': ['dir'],\n        'o': ['open'],\n        'p': ['project'],\n        'i': ['init'],\n        'b': ['build'],\n        'h': ['host'],\n        'a': ['auth']\n    },\n    default: {\n        t: exports.defaultPort,\n        d: process.cwd(),\n        o: true,\n        h: defaultHost\n    }\n};\nvar argv = minimist(process.argv.slice(2), minimistOpts);\nexports.getOptions = utils.once(function () {\n    protectAgainstLongStringsWithSingleDash();\n    var options = {\n        port: argv.t,\n        dir: argv.d,\n        open: argv.o,\n        safe: argv.safe,\n        project: argv.p,\n        init: argv.i,\n        build: argv.b,\n        filePaths: [],\n        host: argv.h,\n        httpskey: argv.httpskey,\n        httpscert: argv.httpscert,\n        auth: argv.auth,\n        debug: argv.debug,\n    };\n    if (typeof options.port !== 'number') {\n        options.port = exports.defaultPort;\n    }\n    if (argv.d) {\n        options.dir = workingDir.makeAbsoluteIfNeeded(argv.d);\n        workingDir.setProjectRoot(options.dir);\n    }\n    if (argv._ && argv._.length) {\n        options.filePaths = argv._.map(function (x) { return workingDir.makeAbsoluteIfNeeded(x); });\n    }\n    // Common usage user does `alm ./srcFolder`\n    // So if there was only one filePath detected and its a dir ... user probably meant `-d`\n    if (options.filePaths.length == 1) {\n        var filePath = workingDir.makeAbsoluteIfNeeded(options.filePaths[0]);\n        if (fsu.isDir(filePath)) {\n            workingDir.setProjectRoot(filePath);\n            options.filePaths = [];\n        }\n    }\n    if (options.safe) {\n        console.log('---SAFE MODE---');\n    }\n    if (options.init && options.project) {\n        console.log(chalk.red('The project option is ignored if you specific --init'));\n    }\n    if (options.project) {\n        options.project = workingDir.makeAbsoluteIfNeeded(options.project);\n        if (fsu.isDir(options.project) && fsu.existsSync(options.project + '/tsconfig.json')) {\n            options.project = options.project + '/' + 'tsconfig.json';\n        }\n        console.log('TSCONFIG: ', options.project);\n    }\n    if (options.httpskey) {\n        options.httpskey = workingDir.makeAbsoluteIfNeeded(options.httpskey);\n    }\n    if (options.httpscert) {\n        options.httpscert = workingDir.makeAbsoluteIfNeeded(options.httpscert);\n    }\n    return options;\n});\n/**\n * E.g. the user does `-user` instead of `--user`\n */\nfunction protectAgainstLongStringsWithSingleDash() {\n    var singleDashMatchers = minimistOpts.string.concat(minimistOpts.boolean)\n        .map(function (x) { return '-' + x; });\n    var args = process.argv.slice(2);\n    var didUserTypeWithJustOneDash = args.filter(function (arg) { return singleDashMatchers.some(function (ss) { return ss == arg; }); });\n    if (didUserTypeWithJustOneDash.length) {\n        console.log(chalk.red('You provided the following arguments with a single dash (-foo). You probably meant to provide double dashes (--foo)'), didUserTypeWithJustOneDash);\n        process.exit(1);\n    }\n}\n","/home/travis/build/npmtest/node-npmtest-alm/node_modules/alm/src/server/workers/lint/lintMaster.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar sw = require(\"../../utils/simpleWorker\");\nvar contract = require(\"./lintContract\");\nvar utils_1 = require(\"../../../common/utils\");\nvar types_1 = require(\"../../../common/types\");\n/** This is were we push the errors */\nvar globalErrorCacheServer_1 = require(\"../../globalErrorCacheServer\");\n/** This is where we get the active project information from */\nvar activeProjectConfig = require(\"../../disk/activeProjectConfig\");\nvar projectDataLoader = require(\"../../disk/projectDataLoader\");\nvar fmc = require(\"../../disk/fileModelCache\");\nvar flm = require(\"../fileListing/fileListingMaster\");\nvar Master;\n(function (Master) {\n    Master.receiveErrorCacheDelta = function (data) {\n        globalErrorCacheServer_1.errorsCache.applyDelta(data);\n        return utils_1.resolve({});\n    };\n})(Master || (Master = {}));\n// Ensure that the namespace follows the contract\nvar _checkTypes = Master;\n// launch worker\nexports.worker = sw.startWorker({\n    workerPath: __dirname + '/lintWorker',\n    workerContract: contract.worker,\n    masterImplementation: Master\n}).worker;\nfunction start() {\n    var lastProjectData = null;\n    activeProjectConfig.activeProjectConfigDetailsUpdated.on(function (activeProjectConfigDetails) {\n        var projectData = projectDataLoader.getProjectDataLoaded(activeProjectConfigDetails);\n        lastProjectData = projectData;\n        exports.worker.setProjectData(projectData);\n    });\n    // only saved ones as linter reads directly from disk and works on whole file contents\n    fmc.didStatusChange.on(function (update) { return update.saved && exports.worker.fileSaved({ filePath: update.filePath }); });\n    // We really want to clear errors if someone deletes some file\n    flm.fileListingDelta.on(function (delta) {\n        if (!lastProjectData)\n            return;\n        /**\n         * NOTE: it might be better if `activeProjectConfig` did this stuff and just asked us to sync\n         * using `acitveProjectConfigDetailsUpdated`\n         * PS: adding any file just works as its handled by `didStatusChange`\n         */\n        var relevant = delta.removedFilePaths\n            .filter(function (x) { return x.type == types_1.FilePathType.File; })\n            .filter(function (x) { return x.filePath.endsWith('tslint.json') || x.filePath.endsWith('.ts'); })\n            .map(function (x) { return x.filePath; });\n        if (relevant.length) {\n            exports.worker.setProjectData(lastProjectData);\n        }\n    });\n}\nexports.start = start;\n","/home/travis/build/npmtest/node-npmtest-alm/node_modules/alm/src/server/workers/lint/lintContract.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.worker = {\n    /** Linter takes in all the files in the project */\n    setProjectData: {},\n    /** And then relints if a file changes on disk */\n    fileSaved: {},\n};\nexports.master = {\n    /** Linter sends out errors */\n    receiveErrorCacheDelta: {},\n};\n","/home/travis/build/npmtest/node-npmtest-alm/node_modules/alm/src/server/workers/tested/testedMaster.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar sw = require(\"../../utils/simpleWorker\");\nvar contract = require(\"./testedContract\");\nvar utils_1 = require(\"../../../common/utils\");\nvar events_1 = require(\"../../../common/events\");\n/** This is were we push the errors */\nvar globalErrorCacheServer_1 = require(\"../../globalErrorCacheServer\");\nvar testResultCache = require(\"./common/testResultsCache\");\nexports.testCache = new testResultCache.TestResultsCache();\nexports.working = new events_1.TypedEvent();\nvar Master;\n(function (Master) {\n    Master.receiveTestResultsDelta = function (data) {\n        exports.testCache.applyTestResultsDelta(data);\n        return utils_1.resolve({});\n    };\n    Master.receiveErrorCacheDelta = function (data) {\n        globalErrorCacheServer_1.errorsCache.applyDelta(data);\n        return utils_1.resolve({});\n    };\n    Master.receiveWorking = function (data) {\n        exports.working.emit(data);\n        return utils_1.resolve({});\n    };\n})(Master || (Master = {}));\n// Ensure that the namespace follows the contract\nvar _checkTypes = Master;\n// launch worker\nexports.worker = sw.startWorker({\n    workerPath: __dirname + '/testedWorker',\n    workerContract: contract.worker,\n    masterImplementation: Master\n}).worker;\nvar fmc = require(\"../../disk/fileModelCache\");\nvar wd = require(\"../../disk/workingDir\");\nvar activeProjectConfig = require(\"../../disk/activeProjectConfig\");\n/**\n * Some things e.g. filePaths updated happen a lot.\n * So debounce this\n */\nvar syncDebounced = utils_1.debounce(function () { return exports.worker.init({ workingDir: wd.getProjectRoot() }); }, 500);\nfunction start() {\n    /** Start up the working with working dir */\n    wd.projectRootUpdated.on(syncDebounced);\n    /** File save */\n    fmc.didStatusChange.on(function (update) {\n        // saved ones as worker reads directly from disk and works on whole file contents\n        update.saved && exports.worker.fileSaved({ filePath: update.filePath });\n        /**\n         * If a saved file is in the compilation context we should really run all tests\n         * untill we have a better dependency analysis\n         */\n        activeProjectConfig.projectFilePathsUpdated.current().then(function (res) {\n            if (res.filePaths.some(function (fp) { return fp === update.filePath; })) {\n                syncDebounced();\n            }\n        });\n    });\n    /**\n     * New test file added to the directory\n     * NOTE: it works because\n     *  - new test files should also be a part of the compilation context\n     *    And that triggers a file paths update ;)\n     */\n    activeProjectConfig.projectFilePathsUpdated.on(syncDebounced);\n}\nexports.start = start;\n","/home/travis/build/npmtest/node-npmtest-alm/node_modules/alm/src/server/workers/tested/testedContract.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.worker = {\n    /** Start or restart */\n    init: {},\n    /** Relints if a file changes on disk */\n    fileSaved: {},\n};\nexports.master = {\n    receiveWorking: {},\n    /** Sends out test resuts */\n    receiveTestResultsDelta: {},\n    /** Sends out errors for config / file exceptions */\n    receiveErrorCacheDelta: {},\n};\n","/home/travis/build/npmtest/node-npmtest-alm/node_modules/alm/src/server/workers/tested/common/testResultsCache.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar events_1 = require(\"../../../../common/events\");\nvar utils_1 = require(\"../../../../common/utils\");\nvar equal = require(\"deep-equal\");\n// What we use to identify a unique test\nvar same = function (a, b) {\n    return equal(a, b);\n};\n/**\n * Maintains the list of tests that have been encountered,\n * and notifies anyone who is concerned of updated values\n */\nvar TestResultsCache = (function () {\n    function TestResultsCache() {\n        var _this = this;\n        /**\n         * When a cache boots up (e.g. server restart). Its good to know if its an initial test run\n         * If so the client might want to clear all previous results\n         */\n        this.initial = true;\n        /**\n         * Event that can be wired up to sync one cache with another\n         */\n        this.testResultsDelta = new events_1.TypedEvent();\n        /**\n         * You can wire up an errors Delta from one cache to this one.\n         */\n        this.applyTestResultsDelta = function (delta) {\n            if (delta.initial) {\n                _this.current = delta.updatedModuleMap;\n            }\n            else {\n                Object.keys(delta.updatedModuleMap).forEach(function (filePath) {\n                    _this.current[filePath] = delta.updatedModuleMap[filePath];\n                });\n                delta.clearedModules.forEach(function (fp) {\n                    delete _this.current[fp];\n                });\n            }\n            _this.sendDelta();\n        };\n        /**\n         *  DELTA MAINTAINANCE\n         */\n        this.last = Object.create(null);\n        /**\n         * current errors\n         */\n        this.current = Object.create(null);\n        /**\n         * debounced as constantly sending updates quickly degrades the web experience\n         */\n        this.sendDelta = utils_1.debounce(function () {\n            // TODO Create a delta\n            var last = _this.last;\n            var current = _this.current;\n            var delta = {\n                updatedModuleMap: Object.create(null),\n                clearedModules: [],\n                initial: _this.initial,\n            };\n            _this.initial = false;\n            Object.keys(current).forEach(function (fp) {\n                // Added\n                if (!last[fp]) {\n                    delta.updatedModuleMap[fp] = current[fp];\n                }\n                else if (!same(current[fp], last[fp])) {\n                    delta.updatedModuleMap[fp] = current[fp];\n                }\n            });\n            /** Removed */\n            Object.keys(last).forEach(function (fp) {\n                if (!_this.current[fp]) {\n                    delta.clearedModules.push(fp);\n                }\n            });\n            // Preserve for future delta\n            _this.last = Object.create(null);\n            Object.keys(_this.current).map(function (fp) { return _this.last[fp] = _this.current[fp]; });\n            // Send out the delta\n            _this.testResultsDelta.emit(delta);\n        }, 250);\n        /** The passed results are considered the only ones. All else is cleared */\n        this.setResultsTotal = function (results) {\n            _this.current = Object.create(null);\n            results.forEach(function (res) {\n                _this.current[res.filePath] = res;\n            });\n            _this.sendDelta();\n        };\n        /** Only for one file */\n        this.addResult = function (result) {\n            _this.current[result.filePath] = result;\n            _this.sendDelta();\n        };\n        /**\n         * Clear all results. Resets the cache.\n         *\n         * Also good or an initial sync.\n         * e.g. when the socket server reboots\n         *   it wants to clear any errors that any connected clicks might have\n         */\n        this.clearResults = function () {\n            _this.current = Object.create(null);\n            _this.sendDelta();\n        };\n        /**\n         * Get the last results so you can start listening to new deltas\n         */\n        this.getResults = function () { return _this.last; };\n        /** set after initial sync */\n        this.setResults = function (results) {\n            _this.current = results;\n            _this.sendDelta();\n        };\n        /**\n         * Collects overall stats\n         */\n        this.getStats = function () {\n            var allModules = Object.keys(_this.current).map(function (k) { return _this.current[k]; });\n            var sumReducer = function (arr) { return arr.reduce(function (i, acc) { return acc + i; }, 0); };\n            var result = {\n                testCount: sumReducer(allModules.map(function (x) { return x.stats.testCount; })),\n                passCount: sumReducer(allModules.map(function (x) { return x.stats.passCount; })),\n                failCount: sumReducer(allModules.map(function (x) { return x.stats.failCount; })),\n                skipCount: sumReducer(allModules.map(function (x) { return x.stats.skipCount; })),\n                durationMs: sumReducer(allModules.map(function (x) { return x.stats.durationMs; })),\n            };\n            return result;\n        };\n    }\n    return TestResultsCache;\n}());\nexports.TestResultsCache = TestResultsCache;\n","/home/travis/build/npmtest/node-npmtest-alm/node_modules/alm/src/server/disk/watchEditorConfig.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar flm = require(\"../workers/fileListing/fileListingMaster\");\nvar fileModelCache = require(\"./fileModelCache\");\nvar chokidar = require(\"chokidar\");\n/**\n * Our global dictionary\n */\nvar watchedEditorConfigFiles = Object.create(null);\nfunction watchEditorConfigIfNotAlreadyWatching(filePath) {\n    if (watchedEditorConfigFiles[filePath])\n        return;\n    watchedEditorConfigFiles[filePath] = true;\n    var fsWatcher = chokidar.watch(filePath, { ignoreInitial: true });\n    fsWatcher.on('change', watchedEditorConfigChanged);\n}\nfunction start() {\n    flm.filePathsCompleted.on(function (res) {\n        // Make sure we watch any `.editorconfig` files\n        res.filePaths\n            .filter(function (fp) { return fp.filePath.endsWith('.editorconfig'); })\n            .map(function (fp) { return fp.filePath; })\n            .forEach(watchEditorConfigIfNotAlreadyWatching);\n    });\n    flm.filePathsUpdated.on(function (res) {\n        // Make sure we watch any `.editorconfig` files\n        res.filePaths\n            .filter(function (fp) { return fp.filePath.endsWith('.editorconfig'); })\n            .map(function (fp) { return fp.filePath; })\n            .forEach(watchEditorConfigIfNotAlreadyWatching);\n    });\n}\nexports.start = start;\nfunction watchedEditorConfigChanged() {\n    fileModelCache.watchedEditorConfigChanged();\n}\n","/home/travis/build/npmtest/node-npmtest-alm/node_modules/alm/src/server/workers/external/demoReact/bundler/bundlerMaster.js":"\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [0, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar sw = require(\"../../../../utils/simpleWorker\");\nvar contract = require(\"./bundlerContract\");\nvar events_1 = require(\"../../../../../common/events\");\nvar settings_1 = require(\"../../../../disk/settings\");\nvar mkdirp = require(\"mkdirp\");\nvar fsu = require(\"../../../../utils/fsu\");\n/** Emitted everytime a build completes */\nexports.liveDemoBuildComplete = new events_1.TypedEvent();\nvar Master;\n(function (Master) {\n    var _this = this;\n    Master.bundleStatus = function (q) { return __awaiter(_this, void 0, void 0, function () {\n        return __generator(this, function (_a) {\n            exports.liveDemoBuildComplete.emit(q);\n            console.log(workerPrefix, \"Update: \" + q.type);\n            return [2 /*return*/, {}];\n        });\n    }); };\n})(Master || (Master = {}));\n// Ensure that the namespace follows the contract\nvar _checkTypes = Master;\n// launch worker\nvar _a = sw.startWorker({\n    workerPath: __dirname + '/bundlerWorker',\n    workerContract: contract.worker,\n    masterImplementation: Master\n}), worker = _a.worker, parent = _a.parent;\nfunction start(config) {\n    worker.start(config);\n}\nexports.start = start;\nvar workerPrefix = \"[DEMO-REACT]\";\n/**\n * This is where we write our index.html plus app.js\n */\nexports.liveDemoFolder = settings_1.appSettingsFolder + '/liveDemoReact';\nmkdirp.sync(exports.liveDemoFolder);\n/** Our index file name */\nvar outputFileName = exports.liveDemoFolder + '/index.js';\n/** The alm file name */\nvar outputAlmName = exports.liveDemoFolder + '/alm.js';\n/** Our html template file */\nfsu.writeFile(exports.liveDemoFolder + '/index.html', \"\\n<!DOCTYPE html>\\n<html>\\n<head>\\n    <!-- Standard Meta -->\\n    <meta charset=\\\"utf-8\\\">\\n    <meta http-equiv=\\\"X-UA-Compatible\\\" content=\\\"IE=edge,chrome=1\\\">\\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width\\\">\\n    <title>ALM Live React Demo</title>\\n</head>\\n<body>\\n  <div id=\\\"root\\\">\\n      <div id=\\\"waiting-for-render\\\" style=\\\"font-family: arial; opacity: 0; transition: opacity 1s;\\\">\\n      ...make sure you call render in your demo file...\\n      </div>\\n  </div>\\n  <script>\\n    setTimeout(function(){\\n        var waitingForRender = document.getElementById('waiting-for-render');\\n        if (waitingForRender){ waitingForRender.style.opacity = \\\"1\\\"; }\\n    }, 2000);\\n  </script>\\n  <script type=\\\"text/javascript\\\" src=\\\"./alm.js\\\"></script>\\n  <script type=\\\"text/javascript\\\" src=\\\"./index.js\\\"></script>\\n</body>\\n</html>\\n\");\nvar ExternalAPI;\n(function (ExternalAPI) {\n    var _this = this;\n    ExternalAPI.currentFilePath = '';\n    ExternalAPI.enableLiveDemo = function (_a) {\n        var filePath = _a.filePath;\n        return __awaiter(_this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                ExternalAPI.currentFilePath = filePath;\n                fsu.writeFile(outputAlmName, \"\\n        console.log(\\\"Placeholder alm file while build is in progress\\\");\\n        \");\n                fsu.writeFile(outputFileName, \"\\n        document.getElementById('root').innerHTML = '';\\n        console.log(\\\"Placeholder index file while build is in progress\\\");\\n        \");\n                start({\n                    entryFilePath: filePath,\n                    outputDirPath: exports.liveDemoFolder,\n                });\n                console.log(workerPrefix, \"Input: \" + filePath);\n                return [2 /*return*/, {}];\n            });\n        });\n    };\n    ExternalAPI.disableLiveDemo = function () {\n        // if (executor) {\n        //     clearLiveDemo.emit({});\n        //     executor.dispose();\n        //     executor = undefined;\n        //     currentFilePath = '';\n        // }\n        return Promise.resolve({});\n    };\n})(ExternalAPI = exports.ExternalAPI || (exports.ExternalAPI = {}));\n","/home/travis/build/npmtest/node-npmtest-alm/node_modules/alm/src/server/workers/external/demoReact/bundler/bundlerContract.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.worker = {\n    start: {},\n};\nexports.master = {\n    bundleStatus: {},\n};\n","/home/travis/build/npmtest/node-npmtest-alm/node_modules/alm/src/server/devtime.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Dev time server for front-end\n */\nvar config = require(\"../webpack.config\");\nvar path = require(\"path\");\nvar fs = require(\"fs\");\nvar getPort_1 = require(\"./utils/getPort\");\nvar devtimeDetectionFile = __dirname + '/devtime.txt';\nvar webpackDevServerPort = 0;\nvar devTimeProxy = null;\nvar bundleDevTimeProxy = function () {\n    if (devTimeProxy)\n        return devTimeProxy;\n    /**\n     * Provide a proxy server that will pass your requests to webpack if a webpack port is found\n     */\n    var httpProxy = require('http-proxy');\n    var proxyServer = httpProxy.createProxyServer();\n    devTimeProxy = function (req, res, next) {\n        if (!webpackDevServerPort)\n            next();\n        proxyServer.web(req, res, {\n            target: \"http://127.0.0.1:\" + webpackDevServerPort\n        });\n        proxyServer.on('error', function (err) {\n            console.log('[WDS] Proxy ERROR', err);\n        });\n    };\n    getPort_1.getPort(8888).then(function (port) {\n        // console.log('found port', port); // DEBUG\n        webpackDevServerPort = port;\n        var Webpack = require('webpack');\n        var WebpackDevServer = require('webpack-dev-server');\n        var notification = '[WDS]'; // Webpack dev server\n        /**\n         * Update the prod config for dev time ease\n         */\n        var devConfig = Object.create(config);\n        // Makes sure errors in console map to the correct file and line number\n        devConfig.devtool = 'eval';\n        // Add aditional entry points\n        devConfig.entry = [\n            // For hot style updates\n            require.resolve('webpack/hot/dev-server'),\n            // The script refreshing the browser on hot updates\n            require.resolve('webpack-dev-server/client') + \"?http://127.0.0.1:\" + webpackDevServerPort,\n        ].concat(config.entry);\n        // Add the Hot Replacement plugin for hot style updates\n        devConfig.plugins.push(new Webpack.HotModuleReplacementPlugin());\n        /**\n         * Standard webpack bundler stuff\n         */\n        var compiler = Webpack(devConfig);\n        compiler.plugin('compile', function () {\n            console.log(notification + \" Bundling ..... \");\n        });\n        compiler.plugin('done', function (result) {\n            console.log(notification + \" Bundled in \" + (result.endTime - result.startTime) + \" ms!\");\n        });\n        /**\n         * Wrap up the bundler in a dev server\n         */\n        var bundler = new WebpackDevServer(compiler, {\n            // We need to tell Webpack to serve our bundled application\n            // from the build path. When proxying\n            publicPath: '/build/',\n            // Configure hot replacement\n            hot: true,\n            // The rest is terminal configurations\n            quiet: true,\n            noInfo: true,\n            stats: {\n                colors: true\n            }\n        });\n        /** Listen on all local address. If we don't then our `getPort` breaks on a mac */\n        bundler.listen(webpackDevServerPort, '0.0.0.0', function () {\n            console.log(notification + \" Server listening on port: \" + webpackDevServerPort);\n        });\n    });\n    return devTimeProxy;\n};\nfunction bundleDeploy() {\n    // build\n    var Webpack = require('webpack');\n    var compiler = Webpack(config);\n    compiler.run(function (err, stats) {\n        if (err) {\n            console.error('Failed to refresh bundle', err);\n        }\n        else {\n            console.log('Refreshed bundle');\n        }\n    });\n}\nfunction addDevHeaders(res) {\n    res.setHeader('Cache-Control', 'no-cache, no-store, must-revalidate');\n    res.setHeader('Pragma', 'no-cache');\n    res.setHeader('Expires', '0');\n}\nfunction setup(app) {\n    /**\n     * We always refresh the build bundle if it isn't there.\n     * This is to help *new repo clones* . NPM installs get this file by default.\n     */\n    var outFile = path.join(config.output.path, config.output.filename);\n    if (!fs.existsSync(outFile)) {\n        bundleDeploy();\n    }\n    /**\n     * Check for devtime\n     */\n    var devTime = fs.existsSync(devtimeDetectionFile);\n    if (devTime) {\n        // if started with dev mode start the bundling process immediately\n        bundleDevTimeProxy();\n    }\n    /**\n     * Proxies to dev server if devtime\n     */\n    app.all('/build/*', function (req, res, next) {\n        if (devTime) {\n            bundleDevTimeProxy()(req, res, next);\n        }\n        else {\n            next();\n        }\n    });\n    /**\n     * Disables caching if devtime\n     */\n    app.use('/', function (req, res, next) {\n        if (devTime) {\n            addDevHeaders(res);\n        }\n        next();\n    });\n    /**\n     * Dev time vs. prod time toggling\n     */\n    app.use('/dev', function (req, res, next) {\n        addDevHeaders(res);\n        devTime = true;\n        fs.writeFileSync(devtimeDetectionFile, 'If this file exists the server will start in dev mode');\n        res.send('Hot Reload setup!');\n    });\n    app.use('/prod', function (req, res, next) {\n        bundleDeploy();\n        addDevHeaders(res);\n        if (devTime) {\n            devTime = false;\n            fs.unlinkSync(devtimeDetectionFile);\n        }\n        res.send('Using static bundled files');\n    });\n}\nexports.setup = setup;\n","/home/travis/build/npmtest/node-npmtest-alm/node_modules/alm/src/webpack.config.js":"\"use strict\";\n/**\n * NOTE: be careful what you import in this file as it is loaded in our deploy boot as well.\n * So don't use `webpack` or `require('wepack')` etc.\n */\nvar path = require(\"path\");\nvar nodeModulesPath = path.resolve(__dirname, 'node_modules');\nvar buildPath = path.resolve(__dirname, 'public', 'build');\nvar mainPath = path.resolve(__dirname, 'app', 'main.js');\nvar config = {\n    // We change to normal source mapping\n    devtool: 'source-map',\n    entry: [mainPath],\n    output: {\n        path: buildPath,\n        filename: 'bundle.js'\n    },\n    plugins: [],\n    module: {\n        noParse: [\n            /clipboard\\.min/,\n        ],\n        loaders: [\n            {\n                test: /\\.json$/,\n                loader: \"json\"\n            },\n            {\n                test: /\\.css$/,\n                loader: \"style!css\"\n            },\n            {\n                test: /\\.less$/,\n                loader: \"style!css!less\"\n            },\n            {\n                test: /\\.(otf|eot|png|svg|ttf|woff|woff2)(\\?v=[0-9\\.]*)?$/,\n                loader: 'url?limit=100000'\n            },\n        ]\n    },\n    node: {\n        /**\n         * This is here because we couldn't find a way for webpack to\n         * ignore the fs access in our languageServiceHost\n         */\n        fs: \"empty\"\n    }\n};\nmodule.exports = config;\n","/home/travis/build/npmtest/node-npmtest-alm/node_modules/alm/src/server/utils/getPort.js":"/**\n * Based of https://gist.github.com/mikeal/1840641\n * But modified to support searching from a particular port\n * Also the original did not actually work.\n */\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar http = require(\"http\");\nexports.getPort = function (startPort) {\n    if (startPort === void 0) { startPort = 4444; }\n    var tryGetPort = function (cb) {\n        var port = startPort;\n        startPort += 1;\n        var server = http.createServer(function () { return null; });\n        server.on('error', function (err) {\n            tryGetPort(cb);\n        });\n        server.listen(port, '0.0.0.0', function (err) {\n            // Found one!\n            server.once('close', function () {\n                cb(port);\n            });\n            server.close();\n        });\n    };\n    var resolve;\n    var prom = new Promise(function (res) { return resolve = res; });\n    tryGetPort(resolve);\n    return prom;\n};\n","/home/travis/build/npmtest/node-npmtest-alm/node_modules/alm/src/socket/socketServer.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar sls = require(\"../socketLib/socketLibServer\");\nvar contract = require(\"./socketContract\");\nvar flm = require(\"../server/workers/fileListing/fileListingMaster\");\nvar workingDir = require(\"../server/disk/workingDir\");\nvar gitService = require(\"../server/workers/external/gitService\");\nvar npmService = require(\"../server/workers/external/npmService\");\nvar findAndReplaceMultiService = require(\"../server/workers/external/findAndReplaceMultiService\");\nvar configCreatorService = require(\"../server/workers/external/configCreatorService\");\nvar settings = require(\"../server/disk/settings\");\nvar serverDiskService = require(\"../server/workers/external/serverDiskService\");\nvar session = require(\"../server/disk/session\");\nvar events_1 = require(\"../common/events\");\nvar serverExit_1 = require(\"./serverExit\");\nvar bundlerMaster = require(\"../server/workers/external/demoReact/bundler/bundlerMaster\");\nvar resolve = sls.resolve;\nvar fmc = require(\"../server/disk/fileModelCache\");\nvar activeProjectConfig = require(\"../server/disk/activeProjectConfig\");\nvar globalErrorCacheServer_1 = require(\"../server/globalErrorCacheServer\");\nvar projectServiceMaster = require(\"../server/workers/lang/projectServiceMaster\");\nvar testedMaster_1 = require(\"../server/workers/tested/testedMaster\");\nvar demoService = require(\"../server/workers/external/demoService\");\nvar demoReactService = require(\"../server/workers/external/demoReact/bundler/bundlerMaster\");\nexports.serverGotExplicitSaveCommand = new events_1.TypedEvent();\nvar Server;\n(function (Server) {\n    Server.echo = function (data, client) {\n        console.log('Echo request received:', data);\n        return client.increment({ num: data.num }).then(function (res) {\n            return {\n                text: data.text,\n                num: res.num\n            };\n        });\n    };\n    Server.filePaths = function (data) {\n        return flm.filePathsUpdated.current().then(function (res) { return ({ filePaths: res.filePaths, completed: res.completed, rootDir: res.rootDir }); });\n    };\n    Server.makeAbsolute = function (data) {\n        return Promise.resolve({ filePath: workingDir.makeAbsolute(data.relativeFilePath) });\n    };\n    /**\n     * File stuff\n     */\n    Server.openFile = function (data) {\n        var file = fmc.getOrCreateOpenFile(data.filePath, /*autoCreate*/ true);\n        return resolve({ contents: file.getContents(), saved: file.saved(), editorOptions: file.editorOptions });\n    };\n    Server.closeFile = function (data) {\n        fmc.closeOpenFile(data.filePath);\n        return resolve({});\n    };\n    Server.editFile = function (data) {\n        var file = fmc.getOrCreateOpenFile(data.filePath);\n        var saved = file.edits(data.edits).saved;\n        // console.log('-------------------------');\n        // console.log(file.getContents());\n        return resolve({ saved: saved });\n    };\n    Server.saveFile = function (data) {\n        fmc.saveOpenFile(data.filePath);\n        exports.serverGotExplicitSaveCommand.emit({ filePath: data.filePath });\n        return resolve({});\n    };\n    Server.getFileStatus = function (data) {\n        var file = fmc.getOrCreateOpenFile(data.filePath, /*autoCreate*/ true);\n        return resolve({ saved: file.saved() });\n    };\n    Server.addFile = function (data) {\n        var file = fmc.getOrCreateOpenFile(data.filePath, /*autoCreate*/ true);\n        return resolve({ error: null });\n    };\n    Server.addFolder = function (data) {\n        var file = fmc.addFolder(data.filePath);\n        return resolve({ error: null });\n    };\n    Server.deleteFromDisk = function (data) {\n        var file = fmc.deleteFromDisk(data);\n        return resolve({ errors: [] });\n    };\n    Server.duplicateFile = function (data) {\n        var file = fmc.duplicateFile(data);\n        return resolve({ error: null });\n    };\n    Server.duplicateDir = function (data) {\n        return fmc.duplicateDir(data).then(function (error) {\n            return { error: error };\n        });\n    };\n    Server.movePath = function (data) {\n        return fmc.movePath(data).then(function (error) {\n            return { error: error };\n        });\n    };\n    Server.launchDirectory = function (data) {\n        return fmc.launchDirectory(data).then(function (error) {\n            return { error: error };\n        });\n    };\n    Server.launchTerminal = function (data) {\n        return fmc.launchTerminal(data).then(function (error) {\n            return { error: error };\n        });\n    };\n    /**\n     * Config stuff\n     */\n    Server.availableProjects = function (data) {\n        return activeProjectConfig.availableProjects.current();\n    };\n    Server.getActiveProjectConfigDetails = function (data) {\n        return activeProjectConfig.activeProjectConfigDetailsUpdated.current();\n    };\n    Server.setActiveProjectConfigDetails = function (data) {\n        activeProjectConfig.syncCore(data);\n        return resolve({});\n    };\n    Server.isFilePathInActiveProject = function (data) {\n        return activeProjectConfig.projectFilePathsUpdated.current().then(function (res) {\n            var inActiveProject = res.filePaths.some(function (fp) { return fp === data.filePath; });\n            return { inActiveProject: inActiveProject };\n        });\n    };\n    Server.setOpenUITabs = function (data) {\n        session.setOpenUITabs(data.sessionId, data.tabLayout, data.selectedTabId);\n        return resolve({});\n    };\n    Server.getOpenUITabs = function (data) {\n        var result = session.getOpenUITabs(data.sessionId);\n        return resolve(result);\n    };\n    Server.activeProjectFilePaths = function (data) {\n        return activeProjectConfig.projectFilePathsUpdated.current();\n    };\n    Server.sync = function (data) {\n        activeProjectConfig.sync();\n        return resolve({});\n    };\n    Server.setSetting = function (data) {\n        session.setSetting(data);\n        return resolve({});\n    };\n    Server.getSetting = function (data) {\n        return resolve(session.getSetting(data));\n    };\n    Server.getValidSessionId = function (data) {\n        return resolve(session.getValidSessionId(data.sessionId));\n    };\n    /**\n     * Error handling\n     */\n    Server.getErrors = function (data) {\n        return resolve(globalErrorCacheServer_1.errorsCache.getErrors());\n    };\n    /**\n     * Tested\n     */\n    Server.getTestResults = function (data) {\n        return resolve(testedMaster_1.testCache.getResults());\n    };\n    /**\n     * Project service\n     */\n    Server.getCompletionsAtPosition = function (query) {\n        return projectServiceMaster.worker.getCompletionsAtPosition(query);\n    };\n    Server.quickInfo = function (query) {\n        return projectServiceMaster.worker.quickInfo(query);\n    };\n    Server.getCompletionEntryDetails = projectServiceMaster.worker.getCompletionEntryDetails;\n    Server.getRenameInfo = projectServiceMaster.worker.getRenameInfo;\n    Server.getDefinitionsAtPosition = projectServiceMaster.worker.getDefinitionsAtPosition;\n    Server.getDoctorInfo = projectServiceMaster.worker.getDoctorInfo;\n    Server.getReferences = projectServiceMaster.worker.getReferences;\n    Server.formatDocument = projectServiceMaster.worker.formatDocument;\n    Server.formatDocumentRange = projectServiceMaster.worker.formatDocumentRange;\n    Server.getNavigateToItems = projectServiceMaster.worker.getNavigateToItems;\n    Server.getNavigateToItemsForFilePath = projectServiceMaster.worker.getNavigateToItemsForFilePath;\n    Server.getDependencies = projectServiceMaster.worker.getDependencies;\n    Server.getAST = projectServiceMaster.worker.getAST;\n    Server.getQuickFixes = projectServiceMaster.worker.getQuickFixes;\n    Server.applyQuickFix = projectServiceMaster.worker.applyQuickFix;\n    Server.build = projectServiceMaster.worker.build;\n    Server.getSemanticTree = projectServiceMaster.worker.getSemanticTree;\n    Server.getOccurrencesAtPosition = projectServiceMaster.worker.getOccurrencesAtPosition;\n    Server.getFormattingEditsAfterKeystroke = projectServiceMaster.worker.getFormattingEditsAfterKeystroke;\n    Server.removeUnusedImports = projectServiceMaster.worker.removeUnusedImports;\n    /**\n     * Documentation browser\n     */\n    Server.getTopLevelModuleNames = projectServiceMaster.worker.getTopLevelModuleNames;\n    Server.getUpdatedModuleInformation = projectServiceMaster.worker.getUpdatedModuleInformation;\n    /** UML Diagram */\n    Server.getUmlDiagramForFile = projectServiceMaster.worker.getUmlDiagramForFile;\n    /** tsFlow */\n    Server.getFlowRoots = projectServiceMaster.worker.getFlowRoots;\n    /** live analysis */\n    Server.getLiveAnalysis = projectServiceMaster.worker.getLiveAnalysis;\n    /**\n     * Output Status\n     */\n    Server.getCompleteOutputStatusCache = function (data) {\n        return exports.cast.completeOutputStatusCacheUpdated.current();\n    };\n    Server.getLiveBuildResults = function (data) {\n        return exports.cast.liveBuildResults.current();\n    };\n    Server.getJSOutputStatus = projectServiceMaster.worker.getJSOutputStatus;\n    /**\n     * Live demo\n     */\n    Server.enableLiveDemo = demoService.WorkerImplementation.enableLiveDemo;\n    Server.disableLiveDemo = demoService.WorkerImplementation.disableLiveDemo;\n    Server.enableLiveDemoReact = demoReactService.ExternalAPI.enableLiveDemo;\n    Server.disableLiveDemoReact = demoReactService.ExternalAPI.disableLiveDemo;\n    /**\n     * Git service\n     */\n    Server.gitStatus = gitService.gitStatus;\n    Server.gitReset = gitService.gitReset;\n    Server.gitDiff = gitService.gitDiff;\n    Server.gitAddAllCommitAndPush = gitService.gitAddAllCommitAndPush;\n    Server.gitFetchLatestAndRebase = gitService.gitFetchLatestAndRebase;\n    /**\n     * NPM service\n     */\n    Server.npmLatest = npmService.npmLatest;\n    /**\n     * FARM\n     */\n    Server.startFarming = findAndReplaceMultiService.startFarming;\n    Server.stopFarmingIfRunning = findAndReplaceMultiService.stopFarmingIfRunning;\n    Server.farmResults = function (query) { return findAndReplaceMultiService.farmResultsUpdated.current(); };\n    /**\n     * Config creator\n     */\n    Server.createEditorconfig = configCreatorService.createEditorconfig;\n    /**\n     * Settings\n     */\n    Server.getSettingsFilePath = function (query) { return Promise.resolve({ filePath: settings.getSettingsFilePath() }); };\n    /**\n     * Server Disk Service\n     */\n    Server.getDirItems = function (query) { return Promise.resolve({ dirItems: serverDiskService.getDirItems(query.dirPath) }); };\n})(Server || (Server = {}));\n// Ensure that the namespace follows the contract\nvar _checkTypes = Server;\n/** Will be available after register is called */\nexports.cast = contract.cast;\n/** launch server */\nfunction register(app) {\n    var runResult = sls.run({\n        app: app,\n        serverImplementation: Server,\n        clientContract: contract.client,\n        cast: contract.cast\n    });\n    exports.cast = runResult.cast;\n    /** File model */\n    fmc.savedFileChangedOnDisk.pipe(exports.cast.savedFileChangedOnDisk);\n    fmc.didEdits.pipe(exports.cast.didEdits);\n    fmc.didStatusChange.pipe(exports.cast.didStatusChange);\n    fmc.editorOptionsChanged.pipe(exports.cast.editorOptionsChanged);\n    /** File listing updates */\n    flm.filePathsUpdated.pipe(exports.cast.filePathsUpdated);\n    /** Active Project */\n    activeProjectConfig.availableProjects.pipe(exports.cast.availableProjectsUpdated);\n    activeProjectConfig.activeProjectConfigDetailsUpdated.pipe(exports.cast.activeProjectConfigDetailsUpdated);\n    activeProjectConfig.projectFilePathsUpdated.pipe(exports.cast.activeProjectFilePathsUpdated);\n    activeProjectConfig.errorsInTsconfig.errorsDelta.on(function (delta) { return globalErrorCacheServer_1.errorsCache.applyDelta(delta); });\n    /** Errors */\n    globalErrorCacheServer_1.errorsCache.errorsDelta.pipe(exports.cast.errorsDelta);\n    /** Tested */\n    testedMaster_1.testCache.testResultsDelta.pipe(exports.cast.testResultsDelta);\n    testedMaster_1.working.pipe(exports.cast.testedWorking);\n    /** FARM */\n    findAndReplaceMultiService.farmResultsUpdated.pipe(exports.cast.farmResultsUpdated);\n    /** JS Output Status */\n    exports.cast.liveBuildResults.emit({ builtCount: 0, totalCount: 0 }); // for initial joiners\n    exports.cast.completeOutputStatusCacheUpdated.emit({}); // for initial joiners\n    projectServiceMaster.fileOutputStatusUpdated.pipe(exports.cast.fileOutputStatusUpdated);\n    projectServiceMaster.completeOutputStatusCacheUpdated.pipe(exports.cast.completeOutputStatusCacheUpdated);\n    projectServiceMaster.liveBuildResults.pipe(exports.cast.liveBuildResults);\n    /** Live demo */\n    demoService.WorkerImplementation.liveDemoData.pipe(exports.cast.liveDemoData);\n    bundlerMaster.liveDemoBuildComplete.pipe(exports.cast.liveDemoBuildComplete);\n    exports.serverGotExplicitSaveCommand.on(function (e) {\n        if (e.filePath === demoService.WorkerImplementation.currentFilePath) {\n            demoService.WorkerImplementation.enableLiveDemo({ filePath: e.filePath });\n        }\n        if (e.filePath === demoReactService.ExternalAPI.currentFilePath) {\n            demoReactService.ExternalAPI.enableLiveDemo({ filePath: e.filePath });\n        }\n    });\n    /** TS Working */\n    projectServiceMaster.working.pipe(exports.cast.tsWorking);\n    /** If the server exits notify the clients */\n    serverExit_1.onServerExit(function () { return exports.cast.serverExiting.emit({}); });\n    // For testing\n    // setInterval(() => cast.hello.emit({ text: 'nice' }), 1000);\n}\nexports.register = register;\n","/home/travis/build/npmtest/node-npmtest-alm/node_modules/alm/src/socketLib/socketLibServer.js":"\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar socketIo = require(\"socket.io\");\nvar socketLib_1 = require(\"./socketLib\");\nexports.resolve = Promise.resolve.bind(Promise);\n/** This is your main boot function for the server */\nfunction run(config) {\n    var server = new Server(config.app, config.serverImplementation, function (serverInstance) {\n        return serverInstance.sendAllToSocket(config.clientContract);\n    });\n    // Provide the server push messages\n    var cast = server.setupAllCast(config.cast);\n    return { server: server, cast: cast };\n}\nexports.run = run;\nvar Server = (function () {\n    function Server(app, serverImplementation, clientCreator) {\n        this.app = app;\n        this.io = socketIo(app\n        // polling is more available on hosts (e.g. azure) but it causes more socket hangups in socketIO\n        /* ,{transports:['polling']} */\n        );\n        this.io.on('connection', function (socket) {\n            var serverInstance = new ServerInstance(socket, serverImplementation);\n            serverInstance.client = clientCreator(serverInstance);\n        });\n    }\n    /**\n     * Mutates the original in place plus returns the mutated version\n     * Each member of `instance` must be a typed event\n     */\n    Server.prototype.setupAllCast = function (instance) {\n        var _this = this;\n        var toRet = instance;\n        Object.keys(toRet).forEach(function (name) {\n            // Override the actual emit function with one that sends it on to the server\n            var evt = new socketLib_1.TypedEvent();\n            toRet[name] = evt;\n            evt.on(function (data) {\n                var castMessage = {\n                    message: name,\n                    data: data\n                };\n                // console.log('EMIT TO ALL : ', name)\n                _this.io.sockets.emit(socketLib_1.anycastMessageName, castMessage);\n            });\n        });\n        return toRet;\n    };\n    return Server;\n}());\nexports.Server = Server;\nvar ServerInstance = (function (_super) {\n    __extends(ServerInstance, _super);\n    function ServerInstance(socket, responderModule) {\n        var _this = _super.call(this) || this;\n        _this.socket = socket;\n        _this.getSocket = function () { return _this.socket; };\n        _this.registerAllFunctionsExportedFromAsResponders(responderModule);\n        _super.prototype.startListening.call(_this);\n        return _this;\n    }\n    return ServerInstance;\n}(socketLib_1.RequesterResponder));\nexports.ServerInstance = ServerInstance;\n","/home/travis/build/npmtest/node-npmtest-alm/node_modules/alm/src/socketLib/socketLib.js":"// This code is designed to be used by both the server and the client\n// Very similar to workerlib but designed to work with socket.io\n// The client is the requestor (hence parent like) and the server is the responder (hence child like)\n// client == parent\n// server == child\n\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Allcast and Broadcast both come through as a message of the following type\n */\nexports.anycastMessageName = 'anycast';\n__export(require(\"../common/events\"));\n/** Creates a Guid (UUID v4) */\nfunction createId() {\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n        var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);\n        return v.toString(16);\n    });\n}\nvar RequesterResponder = (function () {\n    function RequesterResponder() {\n        var _this = this;\n        ///////////////////////////////// REQUESTOR /////////////////////////\n        this.currentListeners = {};\n        /** Only relevant when we only want the last of this type */\n        this.currentLastOfType = {};\n        this.pendingRequests = Object.create(null);\n        this.pendingRequestsChanged = function (pending) { return null; };\n        this.sendToServerHeart = function (data, message) {\n            // If we don't have a server exit\n            if (!_this.getSocket()) {\n                console.log('SEND ERR: no server when you tried to send :', message);\n                return Promise.reject(new Error(\"No socket active to recieve message: \" + message));\n            }\n            // Initialize if this is the first call of this type\n            if (!_this.currentListeners[message])\n                _this.currentListeners[message] = {};\n            // Create an id unique to this call and store the defered against it\n            var id = createId();\n            var promise = new Promise(function (resolve, reject) {\n                _this.currentListeners[message][id] = { resolve: resolve, reject: reject, promise: promise };\n            });\n            // Send data to worker\n            _this.pendingRequests[id] = message;\n            _this.pendingRequestsChanged(Object.keys(_this.pendingRequests).map(function (k) { return _this.pendingRequests[k]; }));\n            _this.getSocket().emit('message', { message: message, id: id, data: data, isRequest: true });\n            return promise;\n        };\n        this.responders = {};\n        this.processRequest = function (m) {\n            var parsed = m;\n            if (!parsed.message || !_this.responders[parsed.message]) {\n                // TODO: handle this error scenario. Either the message is invalid or we do not have a registered responder\n                return;\n            }\n            var message = parsed.message;\n            var responsePromise;\n            try {\n                responsePromise = _this.responders[message](parsed.data, _this.client);\n            }\n            catch (err) {\n                responsePromise = Promise.reject({ method: message, message: err.message, stack: err.stack, details: err.details || {} });\n            }\n            responsePromise\n                .then(function (response) {\n                _this.getSocket().emit('message', {\n                    message: message,\n                    /** Note: to process a request we just pass the id as we recieve it */\n                    id: parsed.id,\n                    data: response,\n                    error: null,\n                    isRequest: false\n                });\n            })\n                .catch(function (error) {\n                _this.getSocket().emit('message', {\n                    message: message,\n                    /** Note: to process a request we just pass the id as we recieve it */\n                    id: parsed.id,\n                    data: null,\n                    error: error,\n                    isRequest: false\n                });\n            });\n        };\n    }\n    RequesterResponder.prototype.startListening = function () {\n        var _this = this;\n        try {\n            if (!this.getSocket()) {\n                console.log('You started listening without a socket!');\n                return;\n            }\n            var socket = this.getSocket();\n            socket.on('error', function (err) {\n            });\n            socket.on('message', function (message) {\n                if (message.isRequest) {\n                    _this.processRequest(message);\n                }\n                else {\n                    _this.processResponse(message);\n                }\n            });\n        }\n        catch (err) {\n            console.log('Socket : terminal error in listening', err);\n        }\n    };\n    /** process a message from the server */\n    RequesterResponder.prototype.processResponse = function (m) {\n        var _this = this;\n        var parsed = m;\n        if (!parsed.message || !parsed.id) {\n            console.log('SERVER ERR: Invalid JSON data from server:', m);\n        }\n        else if (!this.currentListeners[parsed.message] || !this.currentListeners[parsed.message][parsed.id]) {\n            console.log('SERVER ERR: No one was listening:', parsed.message, parsed.data);\n        }\n        else {\n            delete this.pendingRequests[parsed.id];\n            this.pendingRequestsChanged(Object.keys(this.pendingRequests).map(function (k) { return _this.pendingRequests[k]; }));\n            if (parsed.error) {\n                this.currentListeners[parsed.message][parsed.id].reject(parsed.error);\n                console.log(parsed.error);\n                console.log(parsed.error.stack);\n            }\n            else {\n                this.currentListeners[parsed.message][parsed.id].resolve(parsed.data);\n            }\n            delete this.currentListeners[parsed.message][parsed.id];\n            // If there is current last one queued then that needs to be resurrected\n            if (this.currentLastOfType[parsed.message]) {\n                var last_1 = this.currentLastOfType[parsed.message];\n                delete this.currentLastOfType[parsed.message];\n                var lastPromise = this.sendToServerHeart(last_1.data, parsed.message);\n                lastPromise.then(function (res) { return last_1.defer.resolve(res); }, function (rej) { return last_1.defer.reject(rej); });\n            }\n        }\n    };\n    /**\n     * Send all the member functions to IPC\n     */\n    RequesterResponder.prototype.sendAllToSocket = function (contract) {\n        var _this = this;\n        var toret = {};\n        Object.keys(contract).forEach(function (key) {\n            toret[key] = _this.sendToSocket(contract[key], key);\n        });\n        return toret;\n    };\n    /**\n     * Takes a sync named function\n     * and returns a function that will execute this function by name using IPC\n     * (will only work if the process on the other side has this function as a registered responder)\n     */\n    RequesterResponder.prototype.sendToSocket = function (func, name) {\n        var _this = this;\n        var message = name;\n        return function (data) { return _this.sendToServerHeart(data, message); };\n    };\n    /**\n     * If there are more than one pending then we only want the last one as they come in.\n     * All others will get the default value\n     */\n    RequesterResponder.prototype.sendToSocketOnlyLast = function (func, defaultResponse, name) {\n        var _this = this;\n        return function (data) {\n            var message = name;\n            // If we don't have a child exit\n            if (!_this.getSocket()) {\n                console.log('SEND ERR: no socket when you tried to send :', message);\n                return Promise.reject(new Error(\"No worker active to recieve message: \" + message));\n            }\n            // Allow if this is the only call of this type\n            if (!Object.keys(_this.currentListeners[message] || {}).length) {\n                return _this.sendToServerHeart(data, message);\n            }\n            else {\n                // Note:\n                // The last needs to continue once the current one finishes\n                // That is done in our response handler\n                // If there is already something queued as last.\n                // Then it is no longer last and needs to be fed a default value\n                if (_this.currentLastOfType[message]) {\n                    _this.currentLastOfType[message].defer.resolve(defaultResponse);\n                }\n                // this needs to be the new last\n                var promise_1 = new Promise(function (resolve, reject) {\n                    _this.currentLastOfType[message] = {\n                        data: data,\n                        defer: { promise: promise_1, resolve: resolve, reject: reject }\n                    };\n                });\n                return promise_1;\n            }\n        };\n    };\n    RequesterResponder.prototype.addToResponders = function (func, name) {\n        this.responders[name] = func;\n    };\n    RequesterResponder.prototype.registerAllFunctionsExportedFromAsResponders = function (aModule) {\n        var _this = this;\n        Object.keys(aModule)\n            .filter(function (funcName) { return typeof aModule[funcName] == 'function'; })\n            .forEach(function (funcName) { return _this.addToResponders(aModule[funcName], funcName); });\n    };\n    return RequesterResponder;\n}());\nexports.RequesterResponder = RequesterResponder;\n","/home/travis/build/npmtest/node-npmtest-alm/node_modules/alm/src/socket/socketContract.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar socketLib_1 = require(\"../socketLib/socketLib\");\n/**\n * Consists of the following contracts\n *\n * a contract on how the client --calls--> server\n * a contract on how the server --calls--> the client that is calling the server\n * a contract on how the server --anycasts-> all clients\n */\nexports.server = {\n    echo: {},\n    filePaths: {},\n    makeAbsolute: {},\n    /**\n     * File stuff\n     */\n    openFile: {},\n    closeFile: {},\n    editFile: {},\n    saveFile: {},\n    getFileStatus: {},\n    /** File Tree */\n    addFile: {},\n    addFolder: {},\n    deleteFromDisk: {},\n    duplicateFile: {},\n    duplicateDir: {},\n    movePath: {},\n    launchDirectory: {},\n    launchTerminal: {},\n    /**\n     * config stuff\n     */\n    availableProjects: {},\n    getActiveProjectConfigDetails: {},\n    setActiveProjectConfigDetails: {},\n    isFilePathInActiveProject: {},\n    setOpenUITabs: {},\n    getOpenUITabs: {},\n    activeProjectFilePaths: {},\n    sync: {},\n    setSetting: {},\n    getSetting: {},\n    getValidSessionId: {},\n    /**\n     * Error stuff\n     */\n    getErrors: {},\n    /**\n     * Tested\n     */\n    getTestResults: {},\n    /**\n     * Project Service\n     */\n    getCompletionsAtPosition: {},\n    getCompletionEntryDetails: {},\n    quickInfo: {},\n    getRenameInfo: {},\n    getDefinitionsAtPosition: {},\n    getReferences: {},\n    getDoctorInfo: {},\n    formatDocument: {},\n    formatDocumentRange: {},\n    getNavigateToItems: {},\n    getNavigateToItemsForFilePath: {},\n    getDependencies: {},\n    getAST: {},\n    getQuickFixes: {},\n    applyQuickFix: {},\n    getSemanticTree: {},\n    getOccurrencesAtPosition: {},\n    getFormattingEditsAfterKeystroke: {},\n    removeUnusedImports: {},\n    /**\n     * Documentation Browser\n     */\n    getTopLevelModuleNames: {},\n    getUpdatedModuleInformation: {},\n    /** UML Diagram */\n    getUmlDiagramForFile: {},\n    /** tsFlow */\n    getFlowRoots: {},\n    /** live analysis */\n    getLiveAnalysis: {},\n    /**\n     * Output Status\n     */\n    getCompleteOutputStatusCache: {},\n    getLiveBuildResults: {},\n    build: {},\n    getJSOutputStatus: {},\n    /**\n     * Live demo\n     */\n    enableLiveDemo: {},\n    disableLiveDemo: {},\n    enableLiveDemoReact: {},\n    disableLiveDemoReact: {},\n    /**\n     * Git service\n     */\n    gitStatus: {},\n    gitReset: {},\n    gitDiff: {},\n    gitAddAllCommitAndPush: {},\n    gitFetchLatestAndRebase: {},\n    /**\n     * NPM Service\n     */\n    npmLatest: {},\n    /**\n     * FARM\n     */\n    startFarming: {},\n    stopFarmingIfRunning: {},\n    farmResults: {},\n    /**\n     * Config creator\n     */\n    createEditorconfig: {},\n    /**\n     * Settings\n     */\n    getSettingsFilePath: {},\n    /**\n     * Server Disk Service\n     */\n    getDirItems: {},\n};\nexports.client = {\n    increment: {},\n};\nexports.cast = {\n    /** for testing */\n    hello: new socketLib_1.TypedEvent(),\n    /** If the file worker notices a change */\n    filePathsUpdated: new socketLib_1.TypedEvent(),\n    /** If an open and already saved file changes on disk  */\n    savedFileChangedOnDisk: new socketLib_1.TypedEvent(),\n    /** If a user does a code edit */\n    didEdits: new socketLib_1.TypedEvent(),\n    /** If any of the file status changes */\n    didStatusChange: new socketLib_1.TypedEvent(),\n    /** If file editor options change */\n    editorOptionsChanged: new socketLib_1.TypedEvent(),\n    /** Errors for a file path */\n    errorsDelta: new socketLib_1.TypedEvent(),\n    /** Tested */\n    testResultsDelta: new socketLib_1.TypedEvent(),\n    testedWorking: new socketLib_1.TypedEvent(),\n    /** TS analysis taking place */\n    tsWorking: new socketLib_1.TypedEvent(),\n    /** Available projects updated */\n    availableProjectsUpdated: new socketLib_1.TypedEvent(),\n    /** Active project name updated */\n    activeProjectConfigDetailsUpdated: new socketLib_1.TypedEvent(),\n    /** Active project files */\n    activeProjectFilePathsUpdated: new socketLib_1.TypedEvent(),\n    /** FARM */\n    farmResultsUpdated: new socketLib_1.TypedEvent(),\n    /** JS Ouput status  */\n    fileOutputStatusUpdated: new socketLib_1.TypedEvent(),\n    completeOutputStatusCacheUpdated: new socketLib_1.TypedEvent(),\n    liveBuildResults: new socketLib_1.TypedEvent(),\n    /** Live demo */\n    liveDemoData: new socketLib_1.TypedEvent(),\n    liveDemoBuildComplete: new socketLib_1.TypedEvent(),\n    /** Server quit */\n    serverExiting: new socketLib_1.TypedEvent(),\n};\n/**\n * General utility interfaces\n */\nvar Types;\n(function (Types) {\n    /**\n     * AST View\n     */\n    var ASTMode;\n    (function (ASTMode) {\n        /** ts.forEachChild() */\n        ASTMode[ASTMode[\"visitor\"] = 0] = \"visitor\";\n        /** node.getChildren() */\n        ASTMode[ASTMode[\"children\"] = 1] = \"children\";\n    })(ASTMode = Types.ASTMode || (Types.ASTMode = {}));\n})(Types = exports.Types || (exports.Types = {}));\n","/home/travis/build/npmtest/node-npmtest-alm/node_modules/alm/src/server/workers/external/gitService.js":"\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [0, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nvar _this = this;\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * The stuff that interacts with system git\n */\nvar cp = require(\"child_process\");\nvar wd = require(\"../../disk/workingDir\");\nvar fmc = require(\"../../disk/fileModelCache\");\nvar json_1 = require(\"../../../common/json\");\n/** Main utility function to execute a command */\nvar gitCmd = function () {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n    }\n    return new Promise(function (resolve, reject) {\n        cp.exec(\"git \" + args.join(' '), { cwd: wd.getProjectRoot() }, function (err, stdout, stderr) {\n            if (stderr.toString().trim().length) {\n                return resolve(stderr.toString());\n            }\n            return resolve(stdout);\n        });\n    });\n};\n/** Main utility function to execute a command */\nvar gitCmdBetter = function () {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n    }\n    return new Promise(function (resolve, reject) {\n        var child = cp.spawn('git', args, { cwd: wd.getProjectRoot() });\n        var output = [];\n        child.stdout.on('data', function (data) {\n            output.push(data.toString());\n        });\n        child.stderr.on('data', function (data) {\n            /**\n             * NOTE: reason for not using reject:\n             * `git push origin head`\n             * sends data to stderr! WTF.\n             * tells you `origin` -> remote address e.g. (To https://github.com/alm-tools/alm.git)\n             * tells you `head` -> branch details e.g (0cb6cae..2fe075b  HEAD -> bas/gitAddCommitAndPush)\n             */\n            output.push(data.toString());\n        });\n        child.on('close', function (code) {\n            resolve(output.join(''));\n        });\n    });\n};\nfunction gitStatus(args) {\n    return gitCmd('status');\n}\nexports.gitStatus = gitStatus;\n/** This is a soft reset. i.e. it keeps your staged changes */\nfunction gitReset(args) {\n    fmc.saveOpenFile(args.filePath);\n    // Delay because if we reset the file immediately the ^ save\n    // makes the *change* detection in file model view to ignore what happened.\n    return new Promise(function (resolve, reject) {\n        return setTimeout(function () {\n            gitCmd('checkout --', args.filePath).then(resolve, reject);\n        }, 500);\n    });\n}\nexports.gitReset = gitReset;\n/**\n * Docs :\n * - http://stackoverflow.com/q/37097761/390330\n * - https://git-scm.com/docs/git-diff\n * Some inspiration : https://github.com/jisaacks/GitGutter/blob/1f673cbe009e2e0f4393c25e83be895871b4923f/git_gutter_handler.py#L149-L177\n */\nvar gitDiffRegex = /@@[^@@]*@@/g;\nfunction gitDiff(args) {\n    // Save the file if not saved\n    var file = fmc.getOrCreateOpenFile(args.filePath);\n    if (!file.saved()) {\n        fmc.saveOpenFile(args.filePath);\n    }\n    /**\n     * We diff with `HEAD` to still show staged changes (as there are still in your headspace as *area you are working on*)\n     */\n    return gitCmd('diff', '-U0', '--no-color', '--no-ext-diff', 'HEAD', args.filePath).then(function (res) {\n        var added = [];\n        var removed = [];\n        var modified = [];\n        var matches = res.match(gitDiffRegex);\n        if (matches) {\n            matches.forEach(function (m) {\n                // m is something like one of:\n                // @@ -n1[,n2] +n3[,n4] @@\n                // console.log(m); // DEBUG\n                // Remove @@:\n                m = m.replace(/@@/g, '');\n                m = m.trim();\n                // m is now like:\n                // -n1[,n2] +n3[,n4]\n                var _a = m.split(' '), n1n2 = _a[0], n3n4 = _a[1];\n                var _b = n1n2.split(','), n1 = _b[0], n2 = _b[1];\n                var _c = n3n4.split(','), n3 = _c[0], n4 = _c[1];\n                // n2 === 0 means all addition\n                if (n2 != null && +n2 === 0) {\n                    added.push({\n                        from: +n3 - 1,\n                        to: +n3 + (n4 == null ? 1 : +n4) - 1\n                    });\n                }\n                else if (n4 != null && +n4 === 0) {\n                    removed.push(+n3 - 1);\n                }\n                else {\n                    modified.push({\n                        from: +n3 - 1,\n                        to: +n3 + (n4 == null ? 1 : +n4) - 1\n                    });\n                }\n            });\n        }\n        return {\n            added: added, removed: removed, modified: modified\n        };\n    });\n}\nexports.gitDiff = gitDiff;\nexports.gitAddAllCommitAndPush = function (query) { return __awaiter(_this, void 0, void 0, function () {\n    var addResult, commitResult, pushResult, log, ex_1;\n    return __generator(this, function (_a) {\n        switch (_a.label) {\n            case 0:\n                _a.trys.push([0, 4, , 5]);\n                return [4 /*yield*/, gitCmdBetter('add', '-A')];\n            case 1:\n                addResult = _a.sent();\n                return [4 /*yield*/, gitCmdBetter('commit', '--message', query.message)];\n            case 2:\n                commitResult = _a.sent();\n                /**\n                 * Sample:\n                 * error: pathspec \\'when\\' did not match any file(s) known to git.\\nerror: pathspec \\'done\\' did not match any file(s) known to git.\\n\n                 */\n                if (commitResult.startsWith('error')) {\n                    return [2 /*return*/, { type: 'error', error: commitResult }];\n                }\n                return [4 /*yield*/, gitCmdBetter('push', 'origin', 'HEAD')];\n            case 3:\n                pushResult = _a.sent();\n                log = json_1.stringify({ addResult: addResult, commitResult: commitResult, pushResult: pushResult });\n                return [2 /*return*/, { type: 'success', log: log }];\n            case 4:\n                ex_1 = _a.sent();\n                return [2 /*return*/, { type: 'error', error: ex_1.message }];\n            case 5: return [2 /*return*/];\n        }\n    });\n}); };\nexports.gitFetchLatestAndRebase = function (query) { return __awaiter(_this, void 0, void 0, function () {\n    var fetchResult, pullWithRebaseResult, log, ex_2;\n    return __generator(this, function (_a) {\n        switch (_a.label) {\n            case 0:\n                _a.trys.push([0, 3, , 4]);\n                return [4 /*yield*/, gitCmdBetter('fetch', 'origin')];\n            case 1:\n                fetchResult = _a.sent();\n                return [4 /*yield*/, gitCmdBetter('pull', '--rebase')];\n            case 2:\n                pullWithRebaseResult = _a.sent();\n                log = json_1.stringify({ fetchResult: fetchResult, pullWithRebaseResult: pullWithRebaseResult });\n                return [2 /*return*/, { type: 'success', log: log }];\n            case 3:\n                ex_2 = _a.sent();\n                return [2 /*return*/, { type: 'error', error: ex_2.message }];\n            case 4: return [2 /*return*/];\n        }\n    });\n}); };\n","/home/travis/build/npmtest/node-npmtest-alm/node_modules/alm/src/server/workers/external/npmService.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * The stuff that interacts with system git\n */\nvar cp = require(\"child_process\");\nvar wd = require(\"../../disk/workingDir\");\nvar fsu = require(\"../../utils/fsu\");\n/** TODO: this is just a placeholder as I think about how to do this */\nvar getPackageJsonFilePath = function () {\n    var packageJsonFilePath = wd.getProjectRoot();\n    try {\n        packageJsonFilePath = fsu.travelUpTheDirectoryTreeTillYouFind(packageJsonFilePath, 'package.json');\n    }\n    catch (e) { }\n    return packageJsonFilePath;\n};\n/** Main utility function to execute a command */\nvar npmCmd = function () {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n    }\n    return new Promise(function (resolve, reject) {\n        var cwd = wd.getProjectRoot();\n        cp.exec(\"npm \" + args.join(' '), { cwd: cwd }, function (err, stdout, stderr) {\n            if (stderr.toString().trim().length) {\n                return resolve(stderr.toString());\n            }\n            return resolve(stdout);\n        });\n    });\n};\nfunction npmInfo(args) {\n    return npmCmd('npm', 'info', args.packageName);\n}\nexports.npmInfo = npmInfo;\nvar _fetch = require(\"node-fetch\");\nfunction npmLatest(_a) {\n    var pack = _a.pack;\n    var queryUrl = 'http://registry.npmjs.org:80/' + encodeURIComponent(pack) + '/latest';\n    return _fetch(queryUrl)\n        .then(function (response) {\n        return response.json();\n    })\n        .then(function (obj) {\n        var result = {};\n        if (obj.description) {\n            result.description = obj.description;\n        }\n        if (obj.version) {\n            result.version = obj.version;\n        }\n        return result;\n    })\n        .catch(function (error) {\n        return { description: \"Failed to query info for \" + pack };\n    });\n}\nexports.npmLatest = npmLatest;\n","/home/travis/build/npmtest/node-npmtest-alm/node_modules/alm/src/server/workers/external/findAndReplaceMultiService.js":"/**\n * Find and replace multi. The single file version is client only.\n */\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar wd = require(\"../../disk/workingDir\");\nvar cp = require(\"child_process\");\nvar utils = require(\"../../../common/utils\");\nvar events_1 = require(\"../../../common/events\");\nvar types = require(\"../../../common/types\");\n/**\n * Maintains current farm state\n */\nvar FarmState = (function () {\n    function FarmState(config) {\n        var _this = this;\n        this.config = config;\n        /**\n         * Key search state variables\n         */\n        this.results = [];\n        this.completed = false;\n        /** Exposed event */\n        this.resultsUpdated = new events_1.TypedEvent();\n        this.notifyUpdate = utils.throttle(function () {\n            var _a = _this, results = _a.results, completed = _a.completed, config = _a.config;\n            _this.resultsUpdated.emit({ results: results, completed: completed, config: config });\n        }, 500);\n        /** Allows us to dispose any running search */\n        this.disposed = false;\n        this.dispose = function () {\n            _this.disposed = true;\n            _this.completed = true;\n            _this.notifyUpdate();\n        };\n        var searchTerm = config.query;\n        /**\n         * https://git-scm.com/docs/git-grep\n         *\n         * We don't do `--full-name` as that is relative to `.git` parent.\n         * Without that it is relative to cwd which is better for us.\n         *\n         * // General main ones\n         * n: line number\n         * I: don't match binary files\n         *\n         * // Useful toggles\n         * w: Match the pattern only at word boundary (also takes into account new lines 💟)\n         * i: ignore case\n         *\n         * E: extended regexp\n         * F: Don't interpret pattern as regexp\n         */\n        var grep = cp.spawn(\"git\", [\n            \"--no-pager\",\n            \"grep\",\n            \"-In\"\n                + (config.isRegex ? 'E' : 'F')\n                + (config.isFullWord ? 'w' : '')\n                + (config.isCaseSensitive ? '' : 'i'),\n            searchTerm,\n            \"--\" // signals pathspec\n        ].concat(config.globs));\n        grep.stdout.on('data', function (data) {\n            // console.log(`Grep stdout: ${data}`);\n            /** If no one cares anymore */\n            if (farmState.disposed) {\n                grep.kill();\n                return;\n            }\n            /**\n             * Don't want to run out of memory\n             */\n            if (_this.results.length > types.maxCountFindAndReplaceMultiResults) {\n                grep.kill();\n                return;\n            }\n            // Sample :\n            // src/typings/express/express.d.ts:907:                app.enable('foo')\n            // src/typings/express/express.d.ts:908:                app.disabled('foo')\n            // String\n            data = data.toString();\n            // Split by \\n and trim each to get lines\n            var lines = data.split('\\n')\n                .map(function (x) { return x.trim(); })\n                .filter(function (x) { return x; });\n            var newResults = lines.map(function (line) {\n                var originalLine = line;\n                // Split line by `:\\d:` to get relativeName as first\n                var relativeFilePath = line.split(/:\\d+:/)[0];\n                line = line.substr(relativeFilePath.length);\n                // :123:  some preview\n                // =>\n                // 123:  some preview\n                line = line.substr(1);\n                // line number!\n                var lineNumber = line.split(':')[0];\n                line = line.substr(lineNumber.length);\n                // :      some preview\n                // =>\n                // some preview\n                var preview = line.split(':').slice(1).join(':')\n                    .trim();\n                var result = {\n                    filePath: wd.makeAbsolute(relativeFilePath),\n                    line: +lineNumber,\n                    preview: preview\n                };\n                /* Debug\n                console.log(originalLine);\n                console.log('\\n')\n                console.log(result);\n                console.log('------------------------------------------\\n')\n                /* */\n                if (!result.preview) {\n                    // TODO: this is probably because the line boundries are wrong as data comes in.\n                    // We should store the line remainder and prepend to new data.\n                    return null;\n                }\n                return result;\n            }).filter(function (x) { return !!x; });\n            // Add to results\n            _this.results = _this.results.concat(newResults);\n            _this.notifyUpdate();\n        });\n        grep.stderr.on('data', function (data) {\n            if (farmState.disposed)\n                return;\n            console.log(\"Grep stderr: \" + data);\n        });\n        grep.on('close', function (code) {\n            if (farmState.disposed)\n                return;\n            _this.completed = true;\n            _this.notifyUpdate();\n            if (!code) {\n                // TODO: Search complete!\n            }\n            if (code) {\n                // Also happens if search returned no results\n                // console.error(`Grep process exited with code ${code}`);\n            }\n        });\n    }\n    return FarmState;\n}());\n/**\n * The current farm state\n */\nvar farmState = null;\n/**\n *\n *\n * The exposed service API\n *\n *\n */\n/**\n * Subscribe to this if you want notifications about any current farming\n */\nexports.farmResultsUpdated = new events_1.TypedEvent();\n// initiate as completed with no results\nexports.farmResultsUpdated.emit({ completed: true, results: [], config: null });\n/** Also safely stops any previous running farming */\nfunction startFarming(cfg) {\n    stopFarmingIfRunning({});\n    farmState = new FarmState(cfg);\n    exports.farmResultsUpdated.emit({ completed: false, results: [], config: cfg });\n    farmState.resultsUpdated.pipe(exports.farmResultsUpdated);\n    return Promise.resolve({});\n}\nexports.startFarming = startFarming;\nfunction stopFarmingIfRunning(args) {\n    if (farmState) {\n        farmState.dispose();\n        farmState = null;\n    }\n    return Promise.resolve({});\n}\nexports.stopFarmingIfRunning = stopFarmingIfRunning;\n","/home/travis/build/npmtest/node-npmtest-alm/node_modules/alm/src/server/workers/external/configCreatorService.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar workingDir = require(\"../../disk/workingDir\");\nvar fsu = require(\"../../utils/fsu\");\nfunction createEditorconfig(data) {\n    var defaultContents = \"\\n[*.{js,jsx,ts,tsx}]\\nindent_style = space\\nindent_size = 2\\ntrim_trailing_whitespace = true\\ninsert_final_newline = true\\n\\n[*.md]\\ntrim_trailing_whitespace = true\\ninsert_final_newline = true\\n    \".trim();\n    var filePath = workingDir.makeAbsolute('./.editorconfig');\n    if (fsu.existsSync(filePath)) {\n        return Promise.resolve({ alreadyPresent: filePath });\n    }\n    fsu.writeFile(filePath, defaultContents);\n    return Promise.resolve({ alreadyPresent: '' });\n}\nexports.createEditorconfig = createEditorconfig;\n","/home/travis/build/npmtest/node-npmtest-alm/node_modules/alm/src/server/workers/external/serverDiskService.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Provides features to navigate the server disk.\n * Used to power *open file* and *change working directory*\n */\n/** imports */\nvar types = require(\"../../../common/types\");\nvar fs = require(\"fs\");\nexports.getDirItems = function (dirPath) {\n    var items = fs.readdirSync(dirPath);\n    var result = items\n        .map(function (filePath) { return ({ filePath: filePath, stat: fs.statSync(filePath) }); })\n        .filter(function (_a) {\n        var stat = _a.stat;\n        return stat.isFile() || stat.isDirectory();\n    })\n        .map(function (_a) {\n        var filePath = _a.filePath, stat = _a.stat;\n        return fs.statSync(filePath).isFile()\n            ? { type: types.FilePathType.File, filePath: filePath }\n            : { type: types.FilePathType.Dir, filePath: filePath };\n    });\n    return [];\n};\n","/home/travis/build/npmtest/node-npmtest-alm/node_modules/alm/src/server/workers/external/demoService.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar cp = require(\"child_process\");\nvar fsu = require(\"../../utils/fsu\");\nvar utils = require(\"../../../common/utils\");\nvar events_1 = require(\"../../../common/events\");\nvar treeKill_1 = require(\"../../utils/treeKill\");\nvar workerPrefix = \"[DEMO]\";\nvar nodeModulesFolder = fsu.travelUpTheDirectoryTreeTillYouFind(__dirname, \"node_modules\");\nvar tsNodeCompilerOptions = JSON.stringify({\n    /**\n     * Keep getting \"cannot write file\" ts / ts-node errors otherwise\n     */\n    allowJs: false,\n    /** Node's not quite there yet */\n    target: 'es6',\n    module: 'commonjs',\n    /** Hopefully prevent a few source map bugs */\n    sourceMap: true,\n    inlineSources: true,\n});\nvar FileExecutor = (function () {\n    function FileExecutor(filePath, cb) {\n        var _this = this;\n        this.cb = cb;\n        this.disposed = false;\n        /** Find key paths */\n        var tsNodePath = nodeModulesFolder + \"/ts-node/dist/bin.js\";\n        /** In this dir */\n        var cwd = utils.getDirectory(filePath);\n        /** With these compiler options */\n        var TS_NODE_COMPILER_OPTIONS = tsNodeCompilerOptions;\n        /** Execute this */\n        var toExec = [\n            tsNodePath,\n            filePath,\n        ];\n        var child = cp.spawn(process.execPath, toExec, {\n            cwd: cwd,\n            env: {\n                TS_NODE_COMPILER_OPTIONS: TS_NODE_COMPILER_OPTIONS,\n                /**\n                 * Disable cache just because\n                 */\n                TS_NODE_CACHE: false,\n                /**\n                 * disableWarnings as we don't want it to prevent us from running the js\n                 */\n                TS_NODE_DISABLE_WARNINGS: true,\n            }\n        });\n        this.child = child;\n        child.stdout.on('data', function (data) {\n            if (_this.disposed)\n                return;\n            cb({ type: 'data', data: data.toString() });\n        });\n        child.stderr.on('data', function (data) {\n            if (_this.disposed)\n                return;\n            cb({ type: 'data', data: data.toString() });\n        });\n        child.on('close', function (code) {\n            if (_this.disposed)\n                return;\n            cb({ type: 'end', code: code });\n            console.log(workerPrefix, 'process ended');\n        });\n    }\n    FileExecutor.prototype.dispose = function () {\n        this.disposed = true;\n        if (this.child) {\n            treeKill_1.kill(this.child.pid);\n            this.child = undefined;\n        }\n    };\n    return FileExecutor;\n}());\nvar WorkerImplementation;\n(function (WorkerImplementation) {\n    var executor;\n    WorkerImplementation.currentFilePath = '';\n    WorkerImplementation.liveDemoData = new events_1.TypedEvent();\n    WorkerImplementation.enableLiveDemo = function (_a) {\n        var filePath = _a.filePath;\n        console.log(workerPrefix, \"Started on filePath: \" + filePath);\n        if (executor) {\n            executor.dispose();\n        }\n        WorkerImplementation.liveDemoData.emit({ type: 'start' });\n        executor = new FileExecutor(filePath, function (data) {\n            WorkerImplementation.liveDemoData.emit(data);\n        });\n        WorkerImplementation.currentFilePath = filePath;\n        return Promise.resolve({});\n    };\n    WorkerImplementation.disableLiveDemo = function () {\n        if (executor) {\n            WorkerImplementation.liveDemoData.emit({ type: 'end', code: 0 });\n            executor.dispose();\n            executor = undefined;\n            WorkerImplementation.currentFilePath = '';\n        }\n        return Promise.resolve({});\n    };\n})(WorkerImplementation = exports.WorkerImplementation || (exports.WorkerImplementation = {}));\n","/home/travis/build/npmtest/node-npmtest-alm/node_modules/alm/src/server/utils/treeKill.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * @module\n * TypeScript version of https://github.com/pkrumins/node-tree-kill/blob/master/index.js\n */\nvar childProcess = require(\"child_process\");\nvar spawn = childProcess.spawn;\nvar exec = childProcess.exec;\nfunction kill(pid, signal) {\n    if (signal === void 0) { signal = 'SIGTERM'; }\n    var resolve;\n    var res = new Promise(function (res) { return resolve = res; });\n    var tree = {};\n    var pidsToProcess = {};\n    tree[pid] = [];\n    pidsToProcess[pid] = 1;\n    switch (process.platform) {\n        case 'win32':\n            exec('taskkill /pid ' + pid + ' /T /F', resolve);\n            break;\n        case 'darwin':\n            buildProcessTree(pid, tree, pidsToProcess, function (parentPid) {\n                return spawn('pgrep', ['-P', parentPid]);\n            }, function () {\n                killAll(tree, signal, resolve);\n            });\n            break;\n        default:\n            buildProcessTree(pid, tree, pidsToProcess, function (parentPid) {\n                return spawn('ps', ['-o', 'pid', '--no-headers', '--ppid', parentPid]);\n            }, function () {\n                killAll(tree, signal, resolve);\n            });\n            break;\n    }\n    return res;\n}\nexports.kill = kill;\n;\nfunction killAll(tree, signal, callback) {\n    var killed = {};\n    try {\n        Object.keys(tree).forEach(function (pid) {\n            tree[pid].forEach(function (pidpid) {\n                if (!killed[pidpid]) {\n                    killPid(pidpid, signal);\n                    killed[pidpid] = 1;\n                }\n            });\n            if (!killed[pid]) {\n                killPid(pid, signal);\n                killed[pid] = 1;\n            }\n        });\n    }\n    catch (err) {\n        if (callback) {\n            return callback(err);\n        }\n        else {\n            throw err;\n        }\n    }\n    if (callback) {\n        return callback();\n    }\n}\nfunction killPid(pid, signal) {\n    try {\n        process.kill(parseInt(pid, 10), signal);\n    }\n    catch (err) {\n        if (err.code !== 'ESRCH')\n            throw err;\n    }\n}\nfunction buildProcessTree(parentPid, tree, pidsToProcess, spawnChildProcessesList, cb) {\n    var ps = spawnChildProcessesList(parentPid);\n    var allData = '';\n    ps.stdout.on('data', function (data) {\n        var data = data.toString('ascii');\n        allData += data;\n    });\n    var onClose = function (code) {\n        delete pidsToProcess[parentPid];\n        if (code != 0) {\n            // no more parent processes\n            if (Object.keys(pidsToProcess).length == 0) {\n                cb();\n            }\n            return;\n        }\n        allData.match(/\\d+/g).forEach(function (_pid) {\n            var pid = parseInt(_pid, 10);\n            tree[parentPid].push(pid);\n            tree[pid] = [];\n            pidsToProcess[pid] = 1;\n            buildProcessTree(pid, tree, pidsToProcess, spawnChildProcessesList, cb);\n        });\n    };\n    ps.on('close', onClose);\n}\n","/home/travis/build/npmtest/node-npmtest-alm/node_modules/alm/src/server/imgServer.js":"/**\n * This is a custom middleware that serves raw image files to the client\n */\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar fs = require(\"fs\");\nvar utils = require(\"../common/utils\");\n/** Code */\nfunction getRawFile(req, res) {\n    /**\n     * The URL is just the filePath\n     * Client requests `/images/{filePath}`\n     * MAC : `/users/bas/foo` -> all good\n     * Windows : `/d:/users/bas/foo` -> don't want that leading `/` (I think express adds it?)\n     */\n    var filePath = req.url;\n    if (/^win/.test(process.platform)) {\n        filePath = filePath.substring(1);\n    }\n    // filePath = __dirname + \"/../../resources/icon.png\"; // DEBUG\n    /** For non image files error out */\n    if (!utils.isImage(filePath)) {\n        res.writeHead(404, { 'content-type': 'text/plain' });\n        res.write(\"Error 404: Resource not found.\");\n        res.end();\n        return;\n    }\n    res.writeHead(200, { 'content-type': utils.getImageMimeType(filePath) });\n    fs.createReadStream(filePath).pipe(res);\n}\nexports.getRawFile = getRawFile;\nfunction registerImgServerWithExpress(app) {\n    app.use(utils.imageUrl, getRawFile);\n}\nexports.registerImgServerWithExpress = registerImgServerWithExpress;\n","/home/travis/build/npmtest/node-npmtest-alm/node_modules/alm/src/serverState.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.serverState = {\n    version: '0.0.0'\n};\nfunction setServerState(state) {\n    exports.serverState = state;\n}\nexports.setServerState = setServerState;\nfunction addRoute(app) {\n    app.use('/serverState.js', function (req, res) { return res.send('window.serverState = ' + JSON.stringify(exports.serverState)); });\n}\nexports.addRoute = addRoute;\n","/home/travis/build/npmtest/node-npmtest-alm/node_modules/alm/src/app/clientTestResultsCache.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * A global view into the error results on the client side\n */\nvar testResultsCache_1 = require(\"../server/workers/tested/common/testResultsCache\");\nexports.testResultsCache = new testResultsCache_1.TestResultsCache();\n","/home/travis/build/npmtest/node-npmtest-alm/node_modules/alm/src/app/clipboardRing.js":"/**\n * Maintains a ring of stuff that has been copy / cut so you can paste any of them 🌹\n */\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/** Imports */\nvar monacoUtils_1 = require(\"./monaco/monacoUtils\");\nvar commands = require(\"./commands/commands\");\nvar utils = require(\"../common/utils\");\nvar ui = require(\"./ui\");\nvar uix = require(\"./uix\");\nvar clipboardRing = []; // New items at the head of the ring\nvar maxItems = 10;\nvar index = 0;\nfunction addToClipboardRing(mode) {\n    var codeEditor = uix.API.getFocusedCodeEditorIfAny();\n    if (!codeEditor)\n        return;\n    index = 0; // Reset seek index\n    var selected = monacoUtils_1.getSelectionOrCurrentLine(codeEditor.editor);\n    addSelected(selected);\n}\nexports.addToClipboardRing = addToClipboardRing;\nfunction addSelected(selected) {\n    // Just prevents the item being added right next to each other\n    var before = utils.rangeLimited({ num: index - 1, min: 0, max: clipboardRing.length - 1, loopAround: true });\n    var after = utils.rangeLimited({ num: index + 1, min: 0, max: clipboardRing.length - 1, loopAround: true });\n    if (clipboardRing[before] === selected\n        || clipboardRing[after] === selected\n        || clipboardRing[maxItems - 2] === selected) {\n        return false;\n    }\n    clipboardRing.unshift(selected);\n    if (clipboardRing.length > maxItems) {\n        clipboardRing.pop();\n    }\n    // console.log(clipboardRing,index); // DEBUG\n    return true;\n}\nfunction pasteFromClipboardRing() {\n    var codeEditor = uix.API.getFocusedCodeEditorIfAny();\n    if (!codeEditor)\n        return;\n    var selection = codeEditor.editor.getSelection();\n    var hasSelection = !selection.isEmpty();\n    if (!clipboardRing.length) {\n        ui.notifyInfoQuickDisappear('Clipboard Ring Empty');\n        // TODO: hand over to os command + select if anything gets pasted\n        return;\n    }\n    var item = clipboardRing[index];\n    var lines = item.split('\\n');\n    var lastLineLength = lines[lines.length - 1].length;\n    var doc = codeEditor.editor.getModel();\n    /** Find the start */\n    var from = {\n        line: selection.startLineNumber - 1,\n        ch: selection.startColumn - 1\n    };\n    /** Also add any current selection to the clipboard ring */\n    if (hasSelection) {\n        var added = addSelected(codeEditor.editor.getModel().getValueInRange(selection)); // Add current selection to the ring\n        if (added) {\n            index++;\n        }\n    }\n    // replace selection (if any) with a new one\n    // have the new item selected\n    var line = lines.length > 1 ? from.line + (lines.length - 1) : from.line;\n    var ch = lines.length > 1 ? lastLineLength : from.ch + item.length;\n    var to = { line: line, ch: ch };\n    monacoUtils_1.replaceSelection({ editor: codeEditor.editor, newText: item });\n    codeEditor.editor.setSelection({\n        startLineNumber: from.line + 1,\n        startColumn: from.ch + 1,\n        endLineNumber: to.line + 1,\n        endColumn: to.ch + 1\n    });\n    // update the index (and loop around)\n    index = utils.rangeLimited({ num: index + 1, min: 0, max: clipboardRing.length - 1, loopAround: true });\n}\nexports.pasteFromClipboardRing = pasteFromClipboardRing;\ncommands.copy.on(function () {\n    addToClipboardRing('copy');\n});\ncommands.cut.on(function () {\n    addToClipboardRing('cut');\n});\ncommands.pasteFromRing.on(function () {\n    pasteFromClipboardRing();\n});\n","/home/travis/build/npmtest/node-npmtest-alm/node_modules/alm/src/app/monaco/monacoUtils.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar editorOperationCounter = 0;\nfunction replaceSelection(config) {\n    var selection = config.editor.getSelection();\n    var editOperation = {\n        identifier: {\n            major: 0,\n            minor: ++editorOperationCounter,\n        },\n        text: config.newText,\n        range: selection,\n        forceMoveMarkers: false,\n    };\n    config.editor.getModel().pushEditOperations([], [editOperation], null);\n}\nexports.replaceSelection = replaceSelection;\nfunction replaceRange(config) {\n    var editOperation = {\n        identifier: {\n            major: 0,\n            minor: ++editorOperationCounter,\n        },\n        text: config.newText,\n        range: new monaco.Range(config.range.startLineNumber, config.range.startColumn, config.range.endLineNumber, config.range.endColumn),\n        forceMoveMarkers: false,\n        isAutoWhitespaceEdit: false,\n    };\n    config.model.pushEditOperations([], [editOperation], null);\n}\nexports.replaceRange = replaceRange;\n/** Runs format or format selection (if any) */\nfunction format(config) {\n    var action = config.editor.getAction('editor.action.format');\n    action.run();\n}\nexports.format = format;\n/**\n * Useful for language query stuff that we want to debounce + cancel if no longer relevant even after the query is made\n */\nfunction onlyLastCallWithDelay(call, token) {\n    var delay = 500;\n    var timeout;\n    var p = new Promise(function (resolve, reject) {\n        var later = function () {\n            if (token.isCancellationRequested)\n                reject('cancelled');\n            else {\n                call().then(function (res) {\n                    if (token.isCancellationRequested)\n                        reject('cancelled');\n                    else\n                        resolve(res);\n                });\n            }\n        };\n        timeout = setTimeout(later, delay);\n        token.onCancellationRequested(function () {\n            clearTimeout(timeout);\n            reject('cancelled');\n        });\n    });\n    return p;\n}\nexports.onlyLastCallWithDelay = onlyLastCallWithDelay;\nfunction setSelection(cfg) {\n    var model = cfg.editor.getModel();\n    var start = model.getPositionAt(cfg.textSpan.start);\n    var end = model.getPositionAt(cfg.textSpan.start + cfg.textSpan.length);\n    cfg.editor.setSelection({\n        startLineNumber: start.lineNumber,\n        startColumn: start.column,\n        endLineNumber: end.lineNumber,\n        endColumn: end.column\n    });\n}\nexports.setSelection = setSelection;\nfunction gotoPosition(cfg) {\n    var pos = {\n        lineNumber: cfg.position.line + 1,\n        column: cfg.position.ch + 1,\n    };\n    cfg.editor.setPosition(pos);\n    cfg.editor.revealPosition(pos);\n}\nexports.gotoPosition = gotoPosition;\nfunction getVisibleLines(editor) {\n    // HACK: The current lines visible api\n    var range = editor._view.layoutProvider.getLinesViewportData().visibleRange;\n    return range;\n}\nexports.getVisibleLines = getVisibleLines;\n/** Note: Only useful if in single cursor mode */\nfunction isCursorInTopHalf(cm) {\n    var cursor = cm.getPosition();\n    var scrollInfo = getVisibleLines(cm);\n    // Closer to top than bottom\n    return (cursor.lineNumber - scrollInfo.startLineNumber) < (scrollInfo.endLineNumber - cursor.lineNumber);\n}\nexports.isCursorInTopHalf = isCursorInTopHalf;\nfunction getSelectionOrCurrentLine(editor) {\n    var selection = editor.getSelection();\n    var hasSelection = !selection.isEmpty();\n    if (hasSelection) {\n        var selected = editor.getModel().getValueInRange(selection);\n        return selected;\n    }\n    else {\n        var selected = editor.getModel().getLineContent(selection.startLineNumber);\n        return selected;\n    }\n}\nexports.getSelectionOrCurrentLine = getSelectionOrCurrentLine;\n/**\n * Position conversion functions\n */\nfunction getCurrentPosition(editor) {\n    var position = editor.getPosition();\n    return editor.getModel().getOffsetAt(position);\n}\nexports.getCurrentPosition = getCurrentPosition;\nfunction positionToOffset(model, position) {\n    return model.getOffsetAt(position);\n}\nexports.positionToOffset = positionToOffset;\nfunction offsetToPosition(model, offset) {\n    return model.getPositionAt(offset);\n}\nexports.offsetToPosition = offsetToPosition;\n","/home/travis/build/npmtest/node-npmtest-alm/node_modules/alm/src/app/commands/commands.js":"/**\n * Defines:\n * commands / command registry / code editor commands\n */\n\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// Keyboard shortcut origins:\n// c9: cloud9 IDE\n// ca: CodeAnywhere\n// atom: github atom\n// sublime: sublime text\n// code: VScode\n//---------------------------------------------\n//\n// This file also sets up Monaco keybindings\nvar Mousetrap = require(\"mousetrap\");\nrequire(\"mousetrap/plugins/global-bind/mousetrap-global-bind\");\nvar events = require(\"../../common/events\");\nvar utils = require(\"../../common/utils\");\nvar CommandContext;\n(function (CommandContext) {\n    CommandContext[CommandContext[\"Global\"] = 0] = \"Global\";\n    CommandContext[CommandContext[\"Editor\"] = 1] = \"Editor\";\n    CommandContext[CommandContext[\"TreeView\"] = 2] = \"TreeView\";\n})(CommandContext = exports.CommandContext || (exports.CommandContext = {}));\n/**\n * The command registry composed of commands that are keyboard only\n */\nexports.commandRegistry = [];\n/**\n * A command is just an event emitter with some useful properties relevant to the front end command registry\n * such commands cannot have a payload\n */\nvar UICommand = (function (_super) {\n    __extends(UICommand, _super);\n    function UICommand(config) {\n        var _this = _super.call(this) || this;\n        _this.config = config;\n        exports.commandRegistry.push(_this);\n        return _this;\n    }\n    return UICommand;\n}(events.TypedEvent));\nexports.UICommand = UICommand;\n/**\n * BAS\n */\n// export const bas = new UICommand({\n//     description: \"BAS: I map this to whatever command I am currently testing\",\n//     context: CommandContext.Global,\n// });\n/**\n * General purpose UI escape\n */\nexports.esc = new UICommand({\n    keyboardShortcut: 'esc',\n    description: \"Close any open dialogs and focus back to any open tab\",\n    context: CommandContext.Global,\n});\n/**\n * Active list\n */\nexports.gotoNext = new UICommand({\n    keyboardShortcut: 'mod+f8',\n    description: \"Main Panel : Goto next error in project\",\n    context: CommandContext.Global,\n});\nexports.gotoPrevious = new UICommand({\n    keyboardShortcut: 'mod+shift+f8',\n    description: \"Main Panel : Goto previous error in project\",\n    context: CommandContext.Global,\n});\n/**\n * Tabs\n */\nexports.nextTab = new UICommand({\n    keyboardShortcut: 'alt+k',\n    description: \"Tabs: Focus on the Next Tab\",\n    context: CommandContext.Global,\n});\nexports.prevTab = new UICommand({\n    keyboardShortcut: 'alt+j',\n    description: \"Tabs: Focus on the Previous Tab\",\n    context: CommandContext.Global,\n});\nexports.closeTab = new UICommand({\n    keyboardShortcut: 'alt+w',\n    description: \"Tabs: Close current tab\",\n    context: CommandContext.Global,\n});\nexports.undoCloseTab = new UICommand({\n    keyboardShortcut: 'shift+alt+w',\n    description: \"Tabs: Undo close tab\",\n    context: CommandContext.Global,\n});\nexports.saveTab = new UICommand({\n    keyboardShortcut: 'mod+s',\n    description: \"Tabs: Save current tab\",\n    context: CommandContext.Global,\n});\nexports.closeOtherTabs = new UICommand({\n    description: \"Tabs: Close other tabs\",\n    context: CommandContext.Global,\n});\nexports.closeAllTabs = new UICommand({\n    description: \"Tabs: Close all tabs\",\n    context: CommandContext.Global,\n});\nexports.jumpToTab = new UICommand({\n    keyboardShortcut: 'mod+shift+enter',\n    description: \"Tabs: Jump to tab\",\n    context: CommandContext.Global,\n});\nexports.duplicateTab = new UICommand({\n    description: \"Tabs: Duplicate\",\n    context: CommandContext.Global,\n});\nexports.duplicateWindow = new UICommand({\n    description: \"Window: Duplicate in a new browser window\",\n    context: CommandContext.Global,\n});\n/**\n * Build / output js\n */\nexports.sync = new UICommand({\n    keyboardShortcut: 'shift+f6',\n    description: \"TypeScript: Sync\",\n    context: CommandContext.Global,\n});\nexports.build = new UICommand({\n    keyboardShortcut: 'f6',\n    description: \"TypeScript: Build\",\n    context: CommandContext.Global,\n});\nexports.toggleOutputJS = new UICommand({\n    keyboardShortcut: 'mod+shift+m',\n    description: \"TypeScript: Toggle output js file\",\n    context: CommandContext.Global,\n});\nexports.enableLiveDemo = new UICommand({\n    description: \"TypeScript: Demo file\",\n    context: CommandContext.Global,\n});\nexports.disableLiveDemo = new UICommand({\n    description: \"TypeScript: Demo stop\",\n    context: CommandContext.Global,\n});\nexports.enableLiveDemoReact = new UICommand({\n    description: \"TypeScript: Demo react file\",\n    context: CommandContext.Global,\n});\nexports.disableLiveDemoReact = new UICommand({\n    description: \"TypeScript: Demo react stop\",\n    context: CommandContext.Global,\n});\n/**\n * Tab indexing\n * // c9, chrome, atom\n */\nexports.gotoTab1 = new UICommand({\n    keyboardShortcut: 'mod+1',\n    description: \"Tabs: Goto Tab 1\",\n    context: CommandContext.Global,\n});\nexports.gotoTab2 = new UICommand({\n    keyboardShortcut: 'mod+2',\n    description: \"Tabs: Goto Tab 2\",\n    context: CommandContext.Global,\n});\nexports.gotoTab3 = new UICommand({\n    keyboardShortcut: 'mod+3',\n    description: \"Tabs: Goto Tab 3\",\n    context: CommandContext.Global,\n});\nexports.gotoTab4 = new UICommand({\n    keyboardShortcut: 'mod+4',\n    description: \"Tabs: Goto Tab 4\",\n    context: CommandContext.Global,\n});\nexports.gotoTab5 = new UICommand({\n    keyboardShortcut: 'mod+5',\n    description: \"Tabs: Goto Tab 5\",\n    context: CommandContext.Global,\n});\nexports.gotoTab6 = new UICommand({\n    keyboardShortcut: 'mod+6',\n    description: \"Tabs: Goto Tab 6\",\n    context: CommandContext.Global,\n});\nexports.gotoTab7 = new UICommand({\n    keyboardShortcut: 'mod+7',\n    description: \"Tabs: Goto Tab 7\",\n    context: CommandContext.Global,\n});\nexports.gotoTab8 = new UICommand({\n    keyboardShortcut: 'mod+8',\n    description: \"Tabs: Goto Tab 8\",\n    context: CommandContext.Global,\n});\nexports.gotoTab9 = new UICommand({\n    keyboardShortcut: 'mod+9',\n    description: \"Tabs: Goto Tab 9\",\n    context: CommandContext.Global,\n});\n/**\n * OmniSearch\n */\nexports.omniFindFile = new UICommand({\n    keyboardShortcut: 'mod+o',\n    description: \"Find a file in the working directory\",\n    context: CommandContext.Global,\n});\nexports.omniFindCommand = new UICommand({\n    keyboardShortcut: 'mod+shift+p',\n    description: \"Find a command\",\n    context: CommandContext.Global,\n});\nexports.omniSelectProject = new UICommand({\n    keyboardShortcut: 'alt+shift+p',\n    description: \"Find and set active project\",\n    context: CommandContext.Global,\n});\nexports.omniProjectSymbols = new UICommand({\n    keyboardShortcut: 'mod+shift+h',\n    description: \"Find Symbols (Hieroglyphs) in active project\",\n    context: CommandContext.Global,\n});\nexports.omniProjectSourcefile = new UICommand({\n    keyboardShortcut: 'mod+p',\n    description: \"Find Source File in active project\",\n    context: CommandContext.Global,\n});\n/**\n * FAR find and replace\n */\nexports.findAndReplace = new UICommand({\n    keyboardShortcut: 'mod+f',\n    description: \"Show find and replace dialog\",\n    context: CommandContext.Global,\n});\nexports.findAndReplaceMulti = new UICommand({\n    keyboardShortcut: 'mod+shift+f',\n    description: \"Show find and replace in files\",\n    context: CommandContext.Global,\n});\nexports.findNext = new UICommand({\n    keyboardShortcut: 'f3',\n    description: \"Find the next search result\",\n    context: CommandContext.Global,\n});\nexports.findPrevious = new UICommand({\n    keyboardShortcut: 'shift+f3',\n    description: \"Find the previous search result\",\n    context: CommandContext.Global,\n});\nexports.replaceNext = new events.TypedEvent();\nexports.replacePrevious = new events.TypedEvent();\nexports.replaceAll = new events.TypedEvent();\n/**\n * Error panel\n */\nexports.toggleMessagePanel = new UICommand({\n    keyboardShortcut: 'mod+;',\n    description: \"Toggle Message Panel\",\n    context: CommandContext.Global,\n});\nexports.cycleMessagesPanel = new UICommand({\n    keyboardShortcut: 'mod+shift+;',\n    description: \"Cycle Message Panel\",\n    context: CommandContext.Global,\n});\n/**\n * Documentation features\n */\nexports.toggleDoctor = new UICommand({\n    keyboardShortcut: \"mod+'\",\n    description: \"Editor: Toggle Doctor\",\n    context: CommandContext.Global,\n});\nexports.toggleDocumentationBrowser = new UICommand({\n    keyboardShortcut: 'mod+shift+\\'',\n    description: \"Documentation Browser: Open\",\n    context: CommandContext.Global,\n});\nexports.doOpenUmlDiagram = new UICommand({\n    description: \"UML Class diagram\",\n    context: CommandContext.Global,\n});\nexports.toggleSemanticView = new UICommand({\n    description: \"Toggle Semantic View\",\n    context: CommandContext.Global,\n});\nexports.launchTsFlow = new UICommand({\n    description: \"Launch TypeScript flow based programming\",\n    context: CommandContext.Global,\n});\nexports.doOpenTestResultsView = new UICommand({\n    description: \"Test Results View\",\n    context: CommandContext.Global,\n});\n/**\n * Cursor history\n */\nexports.previousCursorLocation = new UICommand({\n    keyboardShortcut: \"mod+u\",\n    description: \"Cursor: Previous Cursor Location\",\n    context: CommandContext.Global,\n});\nexports.nextCursorLocation = new UICommand({\n    keyboardShortcut: \"mod+shift+u\",\n    description: \"Cursor: Next Cursor Location\",\n    context: CommandContext.Global,\n});\n/**\n * Clipboard Ring\n */\nexports.copy = new UICommand({\n    keyboardShortcut: 'mod+c',\n    description: \"Copy\",\n    context: CommandContext.Global,\n    allowDefault: true\n});\nexports.cut = new UICommand({\n    keyboardShortcut: 'mod+x',\n    description: \"Cut\",\n    context: CommandContext.Global,\n    allowDefault: true\n});\nexports.pasteFromRing = new UICommand({\n    keyboardShortcut: 'mod+shift+v',\n    description: \"PasteFromRing\",\n    context: CommandContext.Global,\n    allowDefault: false\n});\n/**\n * Tree view\n */\nexports.treeViewToggle = new UICommand({\n    keyboardShortcut: 'mod+\\\\',\n    description: \"Tree View: Toggle\",\n    context: CommandContext.Global,\n});\nexports.treeViewRevealActiveFile = new UICommand({\n    keyboardShortcut: 'mod+shift+\\\\',\n    description: \"Tree View: Reveal Active File\",\n    context: CommandContext.Global,\n});\nexports.treeViewFocus = new UICommand({\n    keyboardShortcut: 'mod+0',\n    description: \"Tree View: Focus\",\n    context: CommandContext.Global,\n});\nexports.treeAddFile = new UICommand({\n    keyboardShortcut: 'a',\n    description: \"Tree View: Add File\",\n    context: CommandContext.TreeView,\n});\nexports.treeAddFolder = new UICommand({\n    keyboardShortcut: 'shift+a',\n    description: \"Tree View: Add Folder\",\n    context: CommandContext.TreeView,\n});\nexports.treeDuplicateFile = new UICommand({\n    keyboardShortcut: 'd',\n    description: \"Tree View: Duplicate File|Folder\",\n    context: CommandContext.TreeView,\n});\nexports.treeMoveFile = new UICommand({\n    keyboardShortcut: 'm',\n    description: \"Tree View: Move File|Folder\",\n    context: CommandContext.TreeView,\n});\n/** Rename is same as `move` but people want to search for it */\nexports.treeRenameFile = new UICommand({\n    keyboardShortcut: 'r',\n    description: \"Tree View: Rename File|Folder\",\n    context: CommandContext.TreeView,\n});\nexports.treeDeleteFile = new UICommand({\n    keyboardShortcut: 'del',\n    description: \"Tree View: Delete File|Folder\",\n    context: CommandContext.TreeView,\n});\nexports.treeOpenInExplorerFinder = new UICommand({\n    keyboardShortcut: 'o',\n    description: \"Tree View: Open folder in explorer / finder\",\n    context: CommandContext.TreeView,\n});\nexports.treeOpenInCmdTerminal = new UICommand({\n    keyboardShortcut: 'shift+o',\n    description: \"Tree View: Open folder in cmd / terminal\",\n    context: CommandContext.TreeView,\n});\n/**\n * General purpose file opening\n * These are handled in appTabsContainer at the moment\n */\nexports.doOpenFile = new events.TypedEvent();\nexports.doOpenOrFocusFile = new events.TypedEvent();\nexports.openFileFromDisk = new UICommand({\n    keyboardShortcut: 'mod+shift+o',\n    description: 'Open a file present on server disk',\n    context: CommandContext.Global,\n});\n/** needed by cursor history */\nexports.doOpenOrFocusTab = new events.TypedEvent();\n/** needed by file tree */\nexports.closeFilesDirs = new events.TypedEvent();\n/** Needed by file tree, activates the tab but doesn't change focus away from tree view */\nexports.doOpenOrActivateFileTab = new events.TypedEvent();\n/** Needed to toggle output js file. We toggle and also do not steal focus */\nexports.doToggleFileTab = new events.TypedEvent();\n/** Needed to ensure that a demo view is open */\nexports.ensureLiveDemoTab = new events.TypedEvent();\nexports.closeDemoTab = new events.TypedEvent();\nexports.ensureLiveDemoReactTab = new events.TypedEvent();\nexports.closeDemoReactTab = new events.TypedEvent();\n/**\n * Other tab types\n */\nexports.doOpenDependencyView = new UICommand({\n    description: 'Open Dependency View',\n    context: CommandContext.Global,\n});\nexports.doOpenASTView = new UICommand({\n    description: 'Open AST View',\n    context: CommandContext.Global,\n});\nexports.doOpenASTFullView = new UICommand({\n    description: 'Open AST-Full View',\n    context: CommandContext.Global,\n});\n/**\n * Common configuration file creations\n */\nexports.createEditorconfig = new UICommand({\n    description: 'Create a .editorconfig',\n    context: CommandContext.Global,\n});\n/**\n * Settings stuff\n */\nexports.openSettingsFile = new UICommand({\n    description: 'Open settings file',\n    context: CommandContext.Global\n});\n/**\n * Git\n */\nexports.gitAddAllCommitAndPush = new UICommand({\n    description: 'Git: Add all, Commit and Push',\n    context: CommandContext.Global\n});\nexports.gitFetchLatestAndRebase = new UICommand({\n    description: 'Git: Fetch + Pull latest, and rebase any local commits',\n    context: CommandContext.Global\n});\n/** Whenever status might be invalid */\nexports.gitStatusNeedsRefresh = new events.TypedEvent();\n/**\n * Registration\n */\nfunction register() {\n    exports.commandRegistry.forEach(function (c) {\n        if (c.config.context == CommandContext.Global\n            && c.config.keyboardShortcut) {\n            Mousetrap.bindGlobal(c.config.keyboardShortcut, function () {\n                c.emit({});\n                return !!c.config.allowDefault;\n            });\n        }\n    });\n}\nexports.register = register;\n/**\n *\n * CODE MIRROR\n *\n */\n/**\n* Straight out of codemirror.js\n*/\nexports.ios = /AppleWebKit/.test(navigator.userAgent) && /Mobile\\/\\w+/.test(navigator.userAgent);\nexports.mac = exports.ios || /Mac/.test(navigator.platform);\nexports.windows = /win/i.test(navigator.platform);\n/** Nice display name for the mod by user platform */\nexports.modName = exports.mac ? '⌘' : 'Ctrl';\nvar mod = exports.mac ? 'Cmd' : 'Ctrl';\n/**\n * Commands *we* authored.\n * For new commands there are the following more places you need to update:\n * - Commands that have keyboard shortcuts just add them to the keymap below\n * - Otherwise they are registered manually at the bottom of the file\n */\nexports.additionalEditorCommands = {};\nutils.stringEnum(exports.additionalEditorCommands);\n/** Load editor actions + keymaps */\nvar monacoActionLoader_1 = require(\"./monacoActionLoader\");\nvar actions = monacoActionLoader_1.getActions();\n// console.log(actions); // DEBUG\n// TODO: mon\n// Our additionalEditorCommands\n// sublimeMap[`F2`] = additionalEditorCommands.renameVariable;\n// sublimeMap[`${mod}-B`] = additionalEditorCommands.gotoDefinition;\n// sublimeMap[`Shift-${mod}-B`] = additionalEditorCommands.findReferences;\n// sublimeMap[`${mod}-Alt-L`] = additionalEditorCommands.format;\n// sublimeMap[`${mod}-Alt-O`] = additionalEditorCommands.toggleBlaster;\n// sublimeMap[`${mod}-Alt-Z`] = additionalEditorCommands.gitSoftResetFile;\n// sublimeMap[`${mod}-G`] = additionalEditorCommands.goToLine;\n// sublimeMap[`${mod}-Y`] = additionalEditorCommands.gotoTypeScriptSymbol;\n// sublimeMap[`Alt-Enter`] = additionalEditorCommands.quickFix;\nif (exports.mac) {\n    // TODO: mon\n    // Prevent the browser from handling the CMD + SHIFT + [ (or ]) which monaco uses for fold / unfold\n}\nfunction addEditorMapToCommands(command) {\n    new UICommand({\n        keyboardShortcut: command.kbd,\n        description: \"Editor: \" + command.label,\n        context: CommandContext.Editor,\n        editorCommandName: command.id,\n    });\n}\nactions.forEach(addEditorMapToCommands);\n/**\n * This is a consolidation of the `file edited` and `file changed on disk`\n */\nexports.fileContentsChanged = new events.TypedEvent();\n/**\n * Setup toasts to hide on esc\n * Note: this is done here instead of `ui` as some commands depend on `ui` and having depend on commands causes a circular dependency\n */\nvar toastr = require(\"toastr\");\nexports.esc.on(function () {\n    toastr.clear();\n});\n/* DEBUG\nconsole.table(\n    commandRegistry\n        .filter(c=>c.config.context == CommandContext.Editor)\n        .map(c=>({cmd:c.config.description, shortcut:c.config.keyboardShortcut}))\n);\n/* DEBUG */\n/**\n * Mac (the chrome browser in mac) doesn't have *cmd + y* (common redo).\n * Instead it opens the browser history by mistake.\n * So we redirect it to redo for any open editor :)\n */\nMousetrap.bindGlobal('mod+y', function (event) {\n    // If the focus is on editor than monaco already handles it\n    // If we made it till here .... then ....\n    // Prevent default\n    return false;\n});\n/**\n * Mac: Cmd + H at the wrong place hides the window.\n */\nMousetrap.bindGlobal('mod+h', function (event) {\n    // If the focus is on editor than monaco already handles it\n    // If we made it till here .... then ....\n    // Prevent default\n    return false;\n});\n","/home/travis/build/npmtest/node-npmtest-alm/node_modules/alm/src/app/cursorHistory.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Singleton that maintains the cursor history\n */\nvar commands = require(\"./commands/commands\");\nvar utils = require(\"../common/utils\");\nvar appTabsContainer_1 = require(\"./tabs/v2/appTabsContainer\");\n/** The current cursor location */\nvar currentIndex = -1;\nvar history = [];\nvar tooMany = 200;\n/** Subscribe to user requests to move around */\ncommands.previousCursorLocation.on(function () {\n    previous();\n});\ncommands.nextCursorLocation.on(function () {\n    next();\n});\nfunction previous() {\n    currentIndex = utils.rangeLimited({ min: 0, max: history.length - 1, num: currentIndex - 1 });\n    var tab = history[currentIndex];\n    if (tab) {\n        commands.doOpenOrFocusTab.emit({ tabId: tab.tabId, tabUrl: tab.tabUrl, position: tab.position });\n    }\n    // debug();\n}\nexports.previous = previous;\nfunction next() {\n    currentIndex = utils.rangeLimited({ min: 0, max: history.length - 1, num: currentIndex + 1 });\n    var tab = history[currentIndex];\n    if (tab) {\n        commands.doOpenOrFocusTab.emit({ tabId: tab.tabId, tabUrl: tab.tabUrl, position: tab.position });\n    }\n    // debug();\n}\nexports.next = next;\n/**\n * The current tab with id is fetched from state. So all you need is editorPosition\n */\nexports.addEntry = utils.debounce(function (editorPosition) {\n    var selectedTab = appTabsContainer_1.tabState.getSelectedTab();\n    /**\n     * This can happen if we close the tabs too fast (because this function is debounced)\n     * Adding a cursor history should not have been called if there is no active tab\n     * Adding a cursor history should not have been called if active tab is not a filePath\n     */\n    if (!selectedTab || !selectedTab.url.startsWith('file://')) {\n        return;\n    }\n    var potentialNewEntry = {\n        tabId: selectedTab.id,\n        tabUrl: selectedTab.url,\n        position: editorPosition\n    };\n    var isSame = function (pos1, pos2) { return pos1.line == pos2.line && pos1.ch == pos2.ch; };\n    // This prevents us adding a new history for what we already know e.g. when we ask the UI to select a tab\n    var testEntry = history[currentIndex];\n    if (testEntry && testEntry.tabId == potentialNewEntry.tabId) {\n        if (isSame(editorPosition, testEntry.position)) {\n            return;\n        }\n    }\n    // if the users action is same as what there would be one before we just take them there in index\n    testEntry = history[currentIndex - 1];\n    if (testEntry && testEntry.tabId == potentialNewEntry.tabId) {\n        if (isSame(editorPosition, testEntry.position)) {\n            currentIndex--;\n            return;\n        }\n    }\n    // if the users action is same as what there would be one after we just take them there in index\n    testEntry = history[currentIndex + 1];\n    if (testEntry && testEntry.tabId == potentialNewEntry.tabId) {\n        if (isSame(editorPosition, testEntry.position)) {\n            currentIndex++;\n            return;\n        }\n    }\n    currentIndex++;\n    history.splice(currentIndex, 0, potentialNewEntry);\n    // If too many:\n    if (history.length >= tooMany) {\n        // if at end we remove items from the start\n        if (currentIndex == history.length - 1) {\n            history.shift();\n            currentIndex--;\n        }\n        else {\n            history.pop();\n        }\n    }\n    // console.log(`Added tab: ${potentialNewEntry.tabUrl}:${potentialNewEntry.position.line}:${potentialNewEntry.position.ch}`); debug(); // Debug\n}, 800);\nvar debug = function () {\n    console.log(history.map(function (h) { return h.tabUrl + ':' + h.position.line + ':' + h.position.ch; }));\n    console.log(currentIndex);\n};\n// window.debug = debug;\n","/home/travis/build/npmtest/node-npmtest-alm/node_modules/alm/src/app/devtemplate.js":"\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar React = require(\"react\");\nvar ui_1 = require(\"./ui\");\nvar FindAndReplace = (function (_super) {\n    __extends(FindAndReplace, _super);\n    function FindAndReplace() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    FindAndReplace.prototype.render = function () {\n        return (React.createElement(\"div\", null));\n    };\n    return FindAndReplace;\n}(ui_1.BaseComponent));\nexports.FindAndReplace = FindAndReplace;\n","/home/travis/build/npmtest/node-npmtest-alm/node_modules/alm/src/app/fileTree.js":"\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar socketClient_1 = require(\"../socket/socketClient\");\nvar types = require(\"../common/types\");\nvar React = require(\"react\");\nvar csx = require(\"./base/csx\");\nvar ReactDOM = require(\"react-dom\");\nvar ui_1 = require(\"./ui\");\nvar ui = require(\"./ui\");\nvar utils = require(\"../common/utils\");\nvar styles = require(\"./styles/styles\");\nvar state = require(\"./state/state\");\nvar react_redux_1 = require(\"react-redux\");\nvar icon_1 = require(\"./components/icon\");\nvar commands = require(\"./commands/commands\");\nvar DraggableCore = ui.DraggableCore;\nvar utils_1 = require(\"../common/utils\");\nvar robocop_1 = require(\"./components/robocop\");\nvar inputDialog_1 = require(\"./dialogs/inputDialog\");\nvar Mousetrap = require(\"mousetrap\");\nvar clipboard = require(\"./components/clipboard\");\nvar pure = require(\"../common/pure\");\nvar appTabsContainer_1 = require(\"./tabs/v2/appTabsContainer\");\nvar settings = require(\"./state/settings\");\nvar typestyle = require(\"typestyle\");\nvar utils_2 = require(\"../common/utils\");\nvar dirSelected = { isDir: true };\nvar fileSelected = { isDir: false };\nvar resizerWidth = 5;\nvar resizerStyle = {\n    background: 'radial-gradient(#444,transparent)',\n    width: resizerWidth + 'px',\n    cursor: 'ew-resize',\n    color: '#666',\n};\nvar treeListStyle = {\n    color: '#eee',\n    fontSize: '.7rem',\n    padding: '3px',\n};\nvar treeScrollClassName = typestyle.style({\n    border: '1px solid grey',\n    $nest: {\n        '&:focus': {\n            outline: 'none',\n            border: '1px solid ' + styles.highlightColor\n        }\n    }\n});\nvar treeItemClassName = typestyle.style({\n    whiteSpace: 'nowrap',\n    cursor: 'pointer',\n    padding: '3px',\n    userSelect: 'none',\n    fontSize: '.9em',\n    opacity: .8,\n    $nest: {\n        '&:focus': {\n            outline: 'none',\n        }\n    }\n});\nvar treeItemSelectedStyle = {\n    backgroundColor: styles.selectedBackgroundColor,\n};\nvar treeItemInProjectStyle = {\n    color: 'rgb(0, 255, 183)',\n    opacity: 1,\n};\nvar treeItemIsGeneratedStyle = {\n    fontSize: '.6em'\n};\nvar currentSelectedItemCopyStyle = {\n    overflow: 'hidden',\n    textOverflow: 'ellipsis',\n    whiteSpace: 'pre',\n    cursor: 'pointer',\n    marginLeft: '2px',\n    fontSize: '.6rem',\n    fontWeight: 'bold',\n    color: '#CCC',\n    textShadow: '0 0 3px rgba(255, 255, 255, 0.5)',\n};\nvar helpRowStyle = {\n    margin: '5px',\n    lineHeight: '18px'\n};\nvar FileTree = (function (_super) {\n    __extends(FileTree, _super);\n    function FileTree(props) {\n        var _this = _super.call(this, props) || this;\n        /** can't be pure right now because of how we've written `selectedState` */\n        // shouldComponentUpdate = pure.shouldComponentUpdate;\n        /** makes it easier to lookup directories */\n        _this.dirLookup = {};\n        _this.loading = true; // guilty till proven innocent\n        _this.refNames = {\n            __treeroot: '__treeroot',\n            __treeViewScroll: '__treeViewScroll',\n        };\n        _this.handleDrag = function (evt, ui) {\n            _this.setState({ width: ui.deltaX + ui.lastX + resizerWidth });\n        };\n        _this.handleDragStop = function () {\n            var width = _this.state.width;\n            settings.fileTreeWidth.set(width);\n        };\n        _this.setupTree = utils_2.throttle(function (props) {\n            var filePaths = props.filePaths.filter(function (fp) { return fp.type == types.FilePathType.File; }).map(function (fp) { return fp.filePath; });\n            // initial boot up\n            if (!filePaths.length) {\n                return;\n            }\n            _this.loading = false;\n            var rootDirPath = props.rootDir;\n            var rootDir = {\n                name: utils.getFileName(rootDirPath),\n                filePath: rootDirPath,\n                subDirs: [],\n                files: []\n            };\n            // Always expand root\n            _this.state.expansionState[rootDirPath] = true;\n            _this.dirLookup = {};\n            _this.dirLookup[rootDirPath] = rootDir;\n            // if not found creates a new dir and set its parent\n            // (recursively e.g. last was /foo and new is /foo/bar/baz/quz)\n            var createDirAndMakeSureAllParentExits = function (dir) {\n                var dirTree = {\n                    name: utils_1.getFileName(dir),\n                    filePath: dir,\n                    subDirs: [],\n                    files: []\n                };\n                _this.dirLookup[dir] = dirTree;\n                var parentDir = utils_1.getDirectory(dir);\n                var parentDirTree = _this.dirLookup[parentDir];\n                if (!parentDirTree) {\n                    parentDirTree = createDirAndMakeSureAllParentExits(parentDir);\n                }\n                parentDirTree.subDirs.push(dirTree);\n                return dirTree;\n            };\n            for (var _i = 0, filePaths_1 = filePaths; _i < filePaths_1.length; _i++) {\n                var filePath = filePaths_1[_i];\n                var dir = utils_1.getDirectory(filePath);\n                var fileName = utils_1.getFileName(filePath);\n                var subItem = {\n                    name: fileName,\n                    filePath: filePath,\n                };\n                // lookup existing dir\n                var treeDir = _this.dirLookup[dir];\n                if (!treeDir) {\n                    treeDir = createDirAndMakeSureAllParentExits(dir);\n                }\n                treeDir.files.push(subItem);\n            }\n            _this.setState({ treeRoot: rootDir, expansionState: _this.state.expansionState });\n            /** Also add the folders that may have no files */\n            var dirs = props.filePaths.filter(function (fp) { return fp.type == types.FilePathType.Dir; }).map(function (fp) { return fp.filePath; });\n            dirs.forEach(function (dirPath) {\n                var treeDir = _this.dirLookup[dirPath];\n                if (!treeDir) {\n                    createDirAndMakeSureAllParentExits(dirPath);\n                }\n            });\n            /**\n             * keep the selected file paths in sync with all the items that are available\n             */\n            // A map for easier lookup\n            var filePathMap = utils.createMap(filePaths);\n            var oldSelectedPaths = Object.keys(_this.state.selectedPaths);\n            var newSelectedPaths = {};\n            oldSelectedPaths.forEach(function (path) {\n                var isDir = _this.state.selectedPaths[path].isDir;\n                if (!filePathMap[path]) {\n                    return;\n                }\n                newSelectedPaths[path] = { isDir: isDir };\n            });\n            // If there is no selected path select the root\n            if (Object.keys(newSelectedPaths).length === 0) {\n                newSelectedPaths[rootDirPath] = { isDir: true };\n            }\n            _this.setState({ selectedPaths: newSelectedPaths });\n            /**\n             * Loading had focus. Transfer focus to root\n             */\n            if (document.activeElement === _this.refs['loading']) {\n                setTimeout(function () {\n                    var selectedPaths = (_a = {},\n                        _a[_this.state.treeRoot.filePath] = dirSelected,\n                        _a);\n                    _this.setState({ selectedPaths: selectedPaths });\n                    _this.focusOnPath(_this.state.treeRoot.filePath);\n                    var _a;\n                }, 500);\n            }\n        }, 1000);\n        _this.handleToggleDir = function (evt, item) {\n            evt.stopPropagation();\n            var dirPath = item.filePath;\n            var selectedPaths = (_a = {},\n                _a[dirPath] = dirSelected,\n                _a);\n            _this.state.expansionState[dirPath] = !_this.state.expansionState[dirPath];\n            _this.setState({ expansionState: _this.state.expansionState, selectedPaths: selectedPaths });\n            var _a;\n        };\n        _this.handleSelectFile = function (evt, item) {\n            evt.stopPropagation();\n            var filePath = item.filePath;\n            var selectedPaths = (_a = {},\n                _a[filePath] = fileSelected,\n                _a);\n            _this.setState({ selectedPaths: selectedPaths });\n            commands.doOpenOrActivateFileTab.emit({ filePath: filePath });\n            var _a;\n        };\n        _this.state = {\n            width: 200,\n            expansionState: {},\n            selectedPaths: {},\n            treeRoot: { name: 'loading', filePath: 'loading', subDirs: [], files: [] },\n            treeScrollHasFocus: false,\n        };\n        _this.setupTree(props);\n        return _this;\n        // debug\n        // this.state.shown = true; // debug\n    }\n    FileTree.prototype.componentWillReceiveProps = function (props) {\n        this.setupTree(props);\n    };\n    FileTree.prototype.componentDidMount = function () {\n        var _this = this;\n        settings.fileTreeWidth.get().then(function (res) {\n            var width = res || _this.state.width;\n            width = Math.min(window.innerWidth - 100, width);\n            _this.setState({ width: width });\n        });\n        var handleFocusRequestBasic = function (shown) {\n            if (!shown) {\n                state.expandFileTree({});\n            }\n            var selectedFilePaths = Object.keys(_this.state.selectedPaths);\n            var pathToFocus = selectedFilePaths.length > 0 && _this.ref(selectedFilePaths[selectedFilePaths.length - 1])\n                ? selectedFilePaths[selectedFilePaths.length - 1]\n                : _this.state.treeRoot.filePath;\n            _this.focusOnPath(pathToFocus);\n            return false;\n        };\n        this.disposible.add(commands.esc.on(function () {\n            if (_this.state.showHelp) {\n                _this.setState({ showHelp: false });\n                setTimeout(function () { return _this.focusOnPath(_this.state.treeRoot.filePath); }, 150);\n            }\n        }));\n        this.disposible.add(commands.treeViewToggle.on(function () {\n            var shown = _this.props.fileTreeShown;\n            shown ? state.collapseFileTree({}) : state.expandFileTree({});\n            if (!shown) {\n                handleFocusRequestBasic(true);\n            }\n            else {\n                commands.esc.emit({});\n            }\n        }));\n        this.disposible.add(commands.treeViewRevealActiveFile.on(function () {\n            if (!_this.props.fileTreeShown) {\n                state.expandFileTree({});\n            }\n            var selectedTab = appTabsContainer_1.tabState.getSelectedTab();\n            if (selectedTab && selectedTab.url.startsWith('file://')) {\n                var filePath = utils.getFilePathFromUrl(selectedTab.url);\n                // expand the tree to make sure this file is visible\n                var root = _this.state.treeRoot.filePath;\n                var remainderAfterRoot = filePath.substr(root.length + 1 /* for `/` */);\n                var dirPortionsAfterRoot = utils.getDirectory(remainderAfterRoot).split('/');\n                var runningPortion = '';\n                var expanded = {};\n                expanded[root] = true;\n                for (var _i = 0, dirPortionsAfterRoot_1 = dirPortionsAfterRoot; _i < dirPortionsAfterRoot_1.length; _i++) {\n                    var portion = dirPortionsAfterRoot_1[_i];\n                    runningPortion = runningPortion + '/' + portion;\n                    var fullPath = root + runningPortion;\n                    expanded[fullPath] = true;\n                }\n                var expansionState = csx.extend(_this.state.expansionState, expanded);\n                // also only select this node\n                var selectedPaths = (_a = {},\n                    _a[filePath] = fileSelected,\n                    _a);\n                _this.setState({ expansionState: expansionState, selectedPaths: selectedPaths });\n                _this.focusOnPath(filePath);\n            }\n            else {\n                handleFocusRequestBasic(true);\n            }\n            return false;\n            var _a;\n        }));\n        this.disposible.add(commands.treeViewFocus.on(function () {\n            handleFocusRequestBasic(_this.props.fileTreeShown);\n        }));\n        /**\n         * Utility: takes the selected state to the last item selected\n         * If no item selected it selects the root\n         */\n        var goDownToSmallestSelection = function () {\n            var selectedFilePaths = Object.keys(_this.state.selectedPaths);\n            if (selectedFilePaths.length == 0) {\n                var selectedPaths = (_a = {},\n                    _a[_this.state.treeRoot.filePath] = fileSelected,\n                    _a);\n                _this.setState({ selectedPaths: selectedPaths });\n            }\n            else if (selectedFilePaths.length > 1) {\n                var path = selectedFilePaths[selectedFilePaths.length - 1];\n                var selectedPaths = (_b = {},\n                    _b[path] = _this.state.selectedPaths[path],\n                    _b);\n                _this.setState({ selectedPaths: selectedPaths });\n            }\n            else {\n                // already single selection :)\n            }\n            var selectedFilePath = Object.keys(_this.state.selectedPaths)[0];\n            var selectedFilePathDetails = _this.state.selectedPaths[selectedFilePath];\n            return { selectedFilePath: selectedFilePath, isDir: selectedFilePathDetails.isDir };\n            var _a, _b;\n        };\n        /**\n         * Utility : gets you the last item selected if any, otherwise the root dir\n         * Does not modify state\n         */\n        var getLastSelected = function () {\n            var selectedFilePaths = Object.keys(_this.state.selectedPaths);\n            var last = selectedFilePaths[selectedFilePaths.length - 1];\n            if (!last) {\n                return { filePath: _this.state.treeRoot.filePath, isDir: true };\n            }\n            var selectedFilePathDetails = _this.state.selectedPaths[last];\n            return { filePath: last, isDir: selectedFilePathDetails.isDir };\n        };\n        /** Utility : set an item as the only selected */\n        var setAsOnlySelectedNoFocus = function (filePath, isDir) {\n            var selectedPaths = (_a = {},\n                _a[filePath] = { isDir: isDir },\n                _a);\n            _this.setState({ selectedPaths: selectedPaths });\n            var _a;\n        };\n        var setAsOnlySelected = function (filePath, isDir) {\n            setAsOnlySelectedNoFocus(filePath, isDir);\n            _this.focusOnPath(filePath);\n        };\n        /**\n         * Used in handling keyboard for tree items\n         */\n        var treeRoot = this.ref('__treeroot');\n        var handlers = new Mousetrap(treeRoot);\n        /**\n         * file action handlers\n         */\n        handlers.bind(commands.treeAddFile.config.keyboardShortcut, function () {\n            if (_this.loading)\n                return;\n            var lastSelected = getLastSelected();\n            var dirPath = lastSelected.isDir ? lastSelected.filePath : utils.getDirectory(lastSelected.filePath);\n            inputDialog_1.inputDialog.open({\n                header: \"Enter a file name\",\n                onOk: function (value) {\n                    var filePath = value;\n                    socketClient_1.server.addFile({ filePath: filePath }).then(function (res) {\n                        commands.doOpenOrFocusFile.emit({ filePath: filePath });\n                    });\n                },\n                onEsc: function () {\n                    setTimeout(handleFocusRequestBasic, 150);\n                },\n                filterValue: dirPath + '/',\n            });\n            return false;\n        });\n        handlers.bind(commands.treeAddFolder.config.keyboardShortcut, function () {\n            if (_this.loading)\n                return;\n            var lastSelected = getLastSelected();\n            var dirPath = lastSelected.isDir ? lastSelected.filePath : utils.getDirectory(lastSelected.filePath);\n            inputDialog_1.inputDialog.open({\n                header: \"Enter a folder name\",\n                onOk: function (value) {\n                    var filePath = value;\n                    socketClient_1.server.addFolder({ filePath: filePath }).then(function (res) {\n                        ui.notifyInfoQuickDisappear('Folder created');\n                    });\n                },\n                onEsc: function () {\n                    setTimeout(handleFocusRequestBasic, 150);\n                },\n                filterValue: dirPath + '/',\n            });\n            return false;\n        });\n        handlers.bind(commands.treeDuplicateFile.config.keyboardShortcut, function () {\n            if (_this.loading)\n                return;\n            var selection = goDownToSmallestSelection();\n            if (!selection) {\n                ui.notifyInfoNormalDisappear('Nothing selected');\n                return false;\n            }\n            var parentDir = utils.getDirectory(selection.selectedFilePath);\n            if (selection.isDir) {\n                inputDialog_1.inputDialog.open({\n                    header: \"Enter a new directory name\",\n                    onOk: function (value) {\n                        var filePath = value;\n                        socketClient_1.server.duplicateDir({ src: selection.selectedFilePath, dest: filePath });\n                        setAsOnlySelectedNoFocus(filePath, true);\n                        _this.state.expansionState[filePath] = true;\n                        _this.setState({ expansionState: _this.state.expansionState });\n                    },\n                    onEsc: function () {\n                        setTimeout(handleFocusRequestBasic, 150);\n                    },\n                    filterValue: parentDir + '/',\n                });\n            }\n            else {\n                inputDialog_1.inputDialog.open({\n                    header: \"Enter a new file name\",\n                    onOk: function (value) {\n                        var filePath = value;\n                        socketClient_1.server.duplicateFile({ src: selection.selectedFilePath, dest: filePath });\n                        commands.doOpenOrFocusFile.emit({ filePath: filePath });\n                        setAsOnlySelectedNoFocus(filePath, false);\n                    },\n                    onEsc: function () {\n                        setTimeout(handleFocusRequestBasic, 150);\n                    },\n                    filterValue: parentDir + '/',\n                });\n            }\n            return false;\n        });\n        handlers.bind([commands.treeMoveFile.config.keyboardShortcut, commands.treeRenameFile.config.keyboardShortcut], function () {\n            if (_this.loading)\n                return;\n            var selection = goDownToSmallestSelection();\n            if (!selection) {\n                ui.notifyInfoNormalDisappear('Nothing selected');\n                return false;\n            }\n            inputDialog_1.inputDialog.open({\n                header: \"Enter a new location\",\n                onOk: function (value) {\n                    var filePath = value;\n                    socketClient_1.server.movePath({ src: selection.selectedFilePath, dest: filePath }).then(function (res) {\n                        if (res.error) {\n                            ui.notifyWarningNormalDisappear(\"Failed to move: \" + res.error);\n                            return;\n                        }\n                        if (selection.isDir) {\n                            setAsOnlySelectedNoFocus(filePath, true);\n                            _this.state.expansionState[filePath] = true;\n                            _this.setState({ expansionState: _this.state.expansionState });\n                            commands.closeFilesDirs.emit({ files: [], dirs: [selection.selectedFilePath] });\n                        }\n                        else {\n                            commands.doOpenOrFocusFile.emit({ filePath: filePath });\n                            setAsOnlySelectedNoFocus(filePath, false);\n                            commands.closeFilesDirs.emit({ files: [selection.selectedFilePath], dirs: [] });\n                        }\n                    });\n                },\n                onEsc: function () {\n                    setTimeout(handleFocusRequestBasic, 150);\n                },\n                filterValue: selection.selectedFilePath,\n            });\n            return false;\n        });\n        handlers.bind([commands.treeDeleteFile.config.keyboardShortcut, \"backspace\"], function () {\n            if (_this.loading)\n                return;\n            var selectedFilePaths = Object.keys(_this.state.selectedPaths);\n            var selectedFilePathsDetails = selectedFilePaths.map(function (fp) {\n                return {\n                    filePath: fp,\n                    isDir: _this.state.selectedPaths[fp].isDir\n                };\n            });\n            if (selectedFilePaths.length == 0) {\n                ui.notifyInfoNormalDisappear('Nothing selected');\n                return false;\n            }\n            if (selectedFilePaths.some(function (fp) { return fp == _this.state.treeRoot.filePath; })) {\n                ui.notifyWarningNormalDisappear(\"You cannot delete the root working directory\");\n                return false;\n            }\n            inputDialog_1.inputDialog.open({\n                hideInput: true,\n                header: \"Delete \" + (selectedFilePaths.length > 1 ? selectedFilePaths.length + ' items' : utils.getFileName(selectedFilePaths[0])) + \"?\",\n                onOk: function () {\n                    var files = selectedFilePathsDetails.filter(function (x) { return !x.isDir; }).map(function (x) { return x.filePath; });\n                    var dirs = selectedFilePathsDetails.filter(function (x) { return x.isDir; }).map(function (x) { return x.filePath; });\n                    socketClient_1.server.deleteFromDisk({ files: files, dirs: dirs }).then(function (res) {\n                        commands.closeFilesDirs.emit({ files: files, dirs: dirs });\n                        // Leave selection in a useful state\n                        var lastSelectedDetails = selectedFilePathsDetails[selectedFilePathsDetails.length - 1].filePath;\n                        setAsOnlySelected(utils.getDirectory(lastSelectedDetails), true);\n                    });\n                },\n                onEsc: function () {\n                    setTimeout(handleFocusRequestBasic, 150);\n                }\n            });\n            return false;\n        });\n        handlers.bind(commands.treeOpenInExplorerFinder.config.keyboardShortcut, function () {\n            if (_this.loading)\n                return;\n            var selection = goDownToSmallestSelection();\n            if (!selection) {\n                ui.notifyInfoNormalDisappear('Nothing selected');\n                return false;\n            }\n            var dirFilePath = selection.selectedFilePath;\n            if (!selection.isDir) {\n                dirFilePath = utils.getDirectory(dirFilePath);\n            }\n            socketClient_1.server.launchDirectory({ filePath: dirFilePath });\n            ui.notifySuccessNormalDisappear(\"Command to open sent: \" + dirFilePath);\n            return false;\n        });\n        handlers.bind(commands.treeOpenInCmdTerminal.config.keyboardShortcut, function () {\n            if (_this.loading)\n                return;\n            var selection = goDownToSmallestSelection();\n            if (!selection) {\n                ui.notifyInfoNormalDisappear('Nothing selected');\n                return false;\n            }\n            var dirFilePath = selection.selectedFilePath;\n            if (!selection.isDir) {\n                dirFilePath = utils.getDirectory(dirFilePath);\n            }\n            socketClient_1.server.launchTerminal({ filePath: dirFilePath });\n            ui.notifySuccessNormalDisappear(\"Command to open cmd/terminal sent: \" + dirFilePath);\n            return false;\n        });\n        /**\n         * navigation handlers\n         */\n        handlers.bind('enter', function () {\n            if (_this.loading)\n                return;\n            var _a = goDownToSmallestSelection(), selectedFilePath = _a.selectedFilePath, isDir = _a.isDir;\n            if (isDir) {\n                _this.state.expansionState[selectedFilePath] = !_this.state.expansionState[selectedFilePath];\n                _this.setState({ expansionState: _this.state.expansionState });\n            }\n            else {\n                commands.doOpenOrFocusFile.emit({ filePath: selectedFilePath });\n            }\n            return false;\n        });\n        handlers.bind('up', function () {\n            if (_this.loading)\n                return;\n            var _a = goDownToSmallestSelection(), selectedFilePath = _a.selectedFilePath, isDir = _a.isDir;\n            // if root do nothing\n            if (selectedFilePath == _this.state.treeRoot.filePath) {\n                return;\n            }\n            // find the parent dir &&\n            // find this in the parent dir\n            var parentDirFilePath = utils.getDirectory(selectedFilePath);\n            var parentDirTreeItem = _this.dirLookup[parentDirFilePath];\n            var indexInParentDir = isDir\n                ? parentDirTreeItem.subDirs.map(function (x) { return x.filePath; }).indexOf(selectedFilePath)\n                : parentDirTreeItem.files.map(function (x) { return x.filePath; }).indexOf(selectedFilePath);\n            /** Goes to the bottom file / folder */\n            var gotoBottomOfFolder = function (closestDir) {\n                while (true) {\n                    if (!_this.state.expansionState[closestDir.filePath]) {\n                        setAsOnlySelected(closestDir.filePath, true);\n                        break;\n                    }\n                    if (closestDir.files.length) {\n                        setAsOnlySelected(closestDir.files[closestDir.files.length - 1].filePath, false);\n                        break;\n                    }\n                    else if (closestDir.subDirs.length) {\n                        closestDir = closestDir.subDirs[closestDir.subDirs.length - 1];\n                        continue;\n                    }\n                    else {\n                        setAsOnlySelected(closestDir.filePath, true);\n                        break;\n                    }\n                }\n            };\n            // if first\n            if (indexInParentDir == 0) {\n                if (isDir) {\n                    setAsOnlySelected(parentDirFilePath, true);\n                }\n                else if (parentDirTreeItem.subDirs.length == 0) {\n                    setAsOnlySelected(parentDirFilePath, true);\n                }\n                else {\n                    gotoBottomOfFolder(parentDirTreeItem.subDirs[parentDirTreeItem.subDirs.length - 1]);\n                }\n            }\n            else if (!isDir) {\n                setAsOnlySelected(parentDirTreeItem.files[indexInParentDir - 1].filePath, false);\n            }\n            else {\n                var closestDir = parentDirTreeItem.subDirs[indexInParentDir - 1];\n                gotoBottomOfFolder(closestDir);\n            }\n            return false;\n        });\n        handlers.bind('down', function () {\n            if (_this.loading)\n                return;\n            var _a = goDownToSmallestSelection(), selectedFilePath = _a.selectedFilePath, isDir = _a.isDir;\n            /** Goes to next sibling on any (recursive) parent folder */\n            var gotoNextSiblingHighUp = function (treeItem) {\n                // Special handling for root. Don't change selection :)\n                if (treeItem.filePath == _this.state.treeRoot.filePath) {\n                    return;\n                }\n                var parentDirFilePath = utils.getDirectory(treeItem.filePath);\n                var parentTreeItem = _this.dirLookup[parentDirFilePath];\n                var indexInParent = parentTreeItem.subDirs.map(function (x) { return x.filePath; }).indexOf(treeItem.filePath);\n                if (indexInParent !== (parentTreeItem.subDirs.length - 1)) {\n                    setAsOnlySelected(parentTreeItem.subDirs[indexInParent + 1].filePath, true);\n                }\n                else if (parentTreeItem.files.length) {\n                    setAsOnlySelected(parentTreeItem.files[0].filePath, false);\n                }\n                else {\n                    gotoNextSiblingHighUp(parentTreeItem);\n                }\n            };\n            if (isDir) {\n                var dirTreeItem = _this.dirLookup[selectedFilePath];\n                // If expanded and has children, select first relevant child\n                if (_this.state.expansionState[selectedFilePath]\n                    && (dirTreeItem.files.length || dirTreeItem.subDirs.length)) {\n                    dirTreeItem.subDirs[0]\n                        ? setAsOnlySelected(dirTreeItem.subDirs[0].filePath, true)\n                        : setAsOnlySelected(dirTreeItem.files[0].filePath, false);\n                }\n                else {\n                    // Else find the next sibling dir\n                    gotoNextSiblingHighUp(dirTreeItem);\n                }\n            }\n            else {\n                var parentDirFilePath = utils.getDirectory(selectedFilePath);\n                var parentTreeItem = _this.dirLookup[parentDirFilePath];\n                var indexInParent = parentTreeItem.files.map(function (f) { return f.filePath; }).indexOf(selectedFilePath);\n                // if not last select next sibling\n                if (indexInParent !== (parentTreeItem.files.length - 1)) {\n                    setAsOnlySelected(parentTreeItem.files[indexInParent + 1].filePath, false);\n                }\n                else {\n                    gotoNextSiblingHighUp(parentTreeItem);\n                }\n            }\n            return false;\n        });\n        handlers.bind('left', function () {\n            if (_this.loading)\n                return;\n            var _a = goDownToSmallestSelection(), selectedFilePath = _a.selectedFilePath, isDir = _a.isDir;\n            if (isDir) {\n                // if expanded then collapse\n                if (_this.state.expansionState[selectedFilePath]) {\n                    delete _this.state.expansionState[selectedFilePath];\n                    _this.setState({ expansionState: _this.state.expansionState });\n                    return;\n                }\n                // if root ... leave\n                if (_this.state.treeRoot.filePath == selectedFilePath) {\n                    return;\n                }\n            }\n            // Goto the parent directory\n            setAsOnlySelected(utils.getDirectory(selectedFilePath), true);\n            return false;\n        });\n        handlers.bind('right', function () {\n            if (_this.loading)\n                return;\n            var _a = goDownToSmallestSelection(), selectedFilePath = _a.selectedFilePath, isDir = _a.isDir;\n            if (isDir) {\n                // just expand\n                _this.state.expansionState[selectedFilePath] = true;\n                _this.setState({ expansionState: _this.state.expansionState });\n                return false;\n            }\n            return false;\n        });\n        handlers.bind('h', function () {\n            _this.setState({ showHelp: !_this.state.showHelp });\n        });\n        handlers.bind('c', function () {\n            var copyButtonRef = _this.ref('copypath');\n            if (!copyButtonRef) {\n                ui.notifyInfoNormalDisappear('Nothing selected');\n                return;\n            }\n            var copypathDom = ReactDOM.findDOMNode(copyButtonRef);\n            copypathDom.click();\n        });\n        /**\n         * TS to js and JS to ts\n         */\n        handlers.bind('t', function () {\n            if (_this.loading)\n                return;\n            var selection = goDownToSmallestSelection();\n            if (!selection) {\n                ui.notifyInfoNormalDisappear('Nothing selected');\n                return false;\n            }\n            var filePath = selection.selectedFilePath;\n            if (selection.isDir ||\n                (!filePath.endsWith('.js')) && !filePath.endsWith('.jsx')) {\n                ui.notifyInfoNormalDisappear('Please select a `.js`/`jsx` file');\n                return false;\n            }\n            var newFilePath = filePath.replace(/\\.js$/g, '.ts').replace(/\\.jsx$/g, '.tsx');\n            socketClient_1.server.movePath({ src: filePath, dest: newFilePath }).then(function (res) {\n                commands.doOpenOrFocusFile.emit({ filePath: newFilePath });\n                setAsOnlySelectedNoFocus(newFilePath, false);\n                commands.closeFilesDirs.emit({ files: [filePath], dirs: [] });\n                ui.notifySuccessNormalDisappear('File extension changed to be TypeScript');\n            });\n            return false;\n        });\n        handlers.bind('j', function () {\n            if (_this.loading)\n                return;\n            var selection = goDownToSmallestSelection();\n            if (!selection) {\n                ui.notifyInfoNormalDisappear('Nothing selected');\n                return false;\n            }\n            var filePath = selection.selectedFilePath;\n            if (selection.isDir ||\n                (!filePath.endsWith('.ts')) && !filePath.endsWith('.tsx')) {\n                ui.notifyInfoNormalDisappear('Please select a `.ts`/`tsx` file');\n                return false;\n            }\n            var newFilePath = filePath.replace(/\\.ts$/g, '.js').replace(/\\.tsx$/g, '.jsx');\n            socketClient_1.server.movePath({ src: filePath, dest: newFilePath }).then(function (res) {\n                commands.doOpenOrFocusFile.emit({ filePath: newFilePath });\n                setAsOnlySelectedNoFocus(newFilePath, false);\n                commands.closeFilesDirs.emit({ files: [filePath], dirs: [] });\n                ui.notifySuccessNormalDisappear('File extension changed to be JavaScript');\n            });\n            return false;\n        });\n    };\n    FileTree.prototype.render = function () {\n        var _this = this;\n        var singlePathSelected = Object.keys(this.state.selectedPaths).length == 1\n            && Object.keys(this.state.selectedPaths)[0];\n        var hideStyle = !this.props.fileTreeShown && { display: 'none' };\n        var haveFocus = this.state.treeScrollHasFocus;\n        var helpOpacity = haveFocus ? 1 : 0;\n        return (React.createElement(\"div\", { ref: this.refNames.__treeroot, className: \"alm-tree-root\", style: csx.extend(csx.flexRoot, csx.horizontal, { width: this.state.width, zIndex: 6 }, hideStyle) },\n            React.createElement(\"div\", { style: csx.extend(csx.flex, csx.vertical, treeListStyle, styles.someChildWillScroll, csx.newLayerParent) },\n                React.createElement(\"div\", { ref: this.refNames.__treeViewScroll, className: treeScrollClassName, style: csx.extend(csx.flex, csx.scroll), tabIndex: 0, onFocus: function () { return _this.setState({ treeScrollHasFocus: true }); }, onBlur: function () { return _this.setState({ treeScrollHasFocus: false }); } }, this.renderDir(this.state.treeRoot)),\n                this.props.filePathsCompleted || React.createElement(robocop_1.Robocop, null),\n                singlePathSelected\n                    && React.createElement(\"div\", { style: csx.extend(csx.content, csx.horizontal, csx.center, csx.centerJustified, { paddingTop: '5px', paddingBottom: '5px', width: this.state.width - 15 + 'px' }) },\n                        React.createElement(clipboard.Clipboard, { ref: 'copypath', text: singlePathSelected }),\n                        React.createElement(\"span\", { className: \"hint--top\", \"data-hint\": \"Click to copy the file path to clipboard\", \"data-clipboard-text\": singlePathSelected, style: currentSelectedItemCopyStyle, onClick: function () { return ui.notifyInfoQuickDisappear(\"Path copied to clipboard\"); } }, singlePathSelected)),\n                React.createElement(\"div\", { style: csx.extend(csx.content, csx.centerCenter, { fontSize: '.7em', lineHeight: '2em', opacity: helpOpacity, transition: 'opacity .2s' }) },\n                    React.createElement(\"span\", null,\n                        \"Tap \",\n                        React.createElement(\"span\", { style: styles.Tip.keyboardShortCutStyle }, \"H\"),\n                        \" to toggle tree view help\")),\n                this.state.showHelp\n                    && React.createElement(\"div\", { style: csx.extend(csx.newLayer, csx.centerCenter, csx.flex, { background: 'rgba(0,0,0,.7)' }), onClick: function () { return _this.setState({ showHelp: false }); } },\n                        React.createElement(\"div\", { style: csx.extend(csx.flexRoot, csx.vertical) },\n                            React.createElement(\"div\", { style: helpRowStyle },\n                                \"Tap \",\n                                React.createElement(\"span\", { style: styles.Tip.keyboardShortCutStyle }, \"ESC\"),\n                                \" to hide help\"),\n                            React.createElement(\"div\", { style: helpRowStyle },\n                                \"Tap \",\n                                React.createElement(\"span\", { style: styles.Tip.keyboardShortCutStyle }, \"A\"),\n                                \" to add a file\"),\n                            React.createElement(\"div\", { style: helpRowStyle },\n                                \"Tap \",\n                                React.createElement(\"span\", { style: styles.Tip.keyboardShortCutStyle }, \"Shift + A\"),\n                                \" to add a folder\"),\n                            React.createElement(\"div\", { style: helpRowStyle },\n                                \"Tap \",\n                                React.createElement(\"span\", { style: styles.Tip.keyboardShortCutStyle }, \"D\"),\n                                \" to duplicate file / folder\"),\n                            React.createElement(\"div\", { style: helpRowStyle },\n                                \"Tap \",\n                                React.createElement(\"span\", { style: styles.Tip.keyboardShortCutStyle }, \"M\"),\n                                \" to move file / folder\"),\n                            React.createElement(\"div\", { style: helpRowStyle },\n                                \"Tap \",\n                                React.createElement(\"span\", { style: styles.Tip.keyboardShortCutStyle }, \"R\"),\n                                \" to rename file / folder\"),\n                            React.createElement(\"div\", { style: helpRowStyle },\n                                \"Tap \",\n                                React.createElement(\"span\", { style: styles.Tip.keyboardShortCutStyle }, \"C\"),\n                                \" to copy path to clipboard\"),\n                            React.createElement(\"div\", { style: helpRowStyle },\n                                \"Tap \",\n                                React.createElement(\"span\", { style: styles.Tip.keyboardShortCutStyle }, \"O\"),\n                                \" to open in explorer/finder\"),\n                            React.createElement(\"div\", { style: helpRowStyle },\n                                \"Tap \",\n                                React.createElement(\"span\", { style: styles.Tip.keyboardShortCutStyle }, \"Shift + O\"),\n                                \" to open in cmd/terminal\"),\n                            React.createElement(\"div\", { style: helpRowStyle },\n                                \"Tap \",\n                                React.createElement(\"span\", { style: styles.Tip.keyboardShortCutStyle }, \"T\"),\n                                \" to change .js to .ts\"),\n                            React.createElement(\"div\", { style: helpRowStyle },\n                                \"Tap \",\n                                React.createElement(\"span\", { style: styles.Tip.keyboardShortCutStyle }, \"J\"),\n                                \" to change .ts to .js\"),\n                            React.createElement(\"div\", { style: helpRowStyle },\n                                \"Tap \",\n                                React.createElement(\"span\", { style: styles.Tip.keyboardShortCutStyle }, \"arrow keys\"),\n                                \" to browse\"),\n                            React.createElement(\"div\", { style: helpRowStyle },\n                                \"Tap \",\n                                React.createElement(\"span\", { style: styles.Tip.keyboardShortCutStyle }, \"del or backspace\"),\n                                \" to delete\"),\n                            React.createElement(\"div\", { style: helpRowStyle },\n                                \"Tap \",\n                                React.createElement(\"span\", { style: styles.Tip.keyboardShortCutStyle }, \"enter\"),\n                                \" to open file / expand dir\"),\n                            React.createElement(\"div\", { style: helpRowStyle },\n                                \"Tap \",\n                                React.createElement(\"span\", { style: styles.Tip.keyboardShortCutStyle },\n                                    commands.modName,\n                                    \" + \\\\\"),\n                                \" to toggle tree view\"),\n                            React.createElement(\"div\", { style: helpRowStyle },\n                                \"Tap \",\n                                React.createElement(\"span\", { style: styles.Tip.keyboardShortCutStyle },\n                                    \"Shift + \",\n                                    commands.modName,\n                                    \" + \\\\\"),\n                                \" to locate open file in view\"),\n                            React.createElement(\"div\", { style: helpRowStyle },\n                                \"Tap \",\n                                React.createElement(\"span\", { style: styles.Tip.keyboardShortCutStyle },\n                                    \" \",\n                                    commands.modName,\n                                    \" + 0\"),\n                                \" to focus on tree view\")))),\n            React.createElement(DraggableCore, { onDrag: this.handleDrag, onStop: this.handleDragStop },\n                React.createElement(\"div\", { style: csx.extend(csx.flexRoot, csx.centerCenter, resizerStyle) },\n                    React.createElement(icon_1.Icon, { name: \"ellipsis-v\" })))));\n    };\n    FileTree.prototype.renderDir = function (item, depth) {\n        if (depth === void 0) { depth = 0; }\n        var expanded = this.state.expansionState[item.filePath];\n        var sub = expanded ? this.renderDirSub(item, depth) : [];\n        var selected = !!this.state.selectedPaths[item.filePath];\n        return ([React.createElement(TreeNode.Dir, { key: item.filePath, ref: item.filePath, item: item, depth: depth, selected: selected, expanded: expanded, handleToggleDir: this.handleToggleDir, activeProjectFilePathTruthTable: this.props.activeProjectFilePathTruthTable })].concat(sub));\n    };\n    FileTree.prototype.renderDirSub = function (item, depth) {\n        var _this = this;\n        return item.subDirs.map(function (item) { return _this.renderDir(item, depth + 1); })\n            .concat(item.files.map(function (file) { return _this.renderFile(file, depth + 1); }));\n    };\n    FileTree.prototype.renderFile = function (item, depth) {\n        var selected = !!this.state.selectedPaths[item.filePath];\n        return (React.createElement(TreeNode.File, { ref: item.filePath, key: item.filePath, item: item, depth: depth, selected: selected, handleSelectFile: this.handleSelectFile, activeProjectFilePathTruthTable: this.props.activeProjectFilePathTruthTable }));\n    };\n    FileTree.prototype.focusOnPath = function (filePath) {\n        if (!this.ref(filePath))\n            return;\n        this.refs['__treeViewScroll'].focus();\n        this.ref(filePath).focus();\n    };\n    FileTree.prototype.componentWillUpdate = function (nextProps, nextState) {\n        if (nextState.width !== this.state.width\n            || nextProps.fileTreeShown !== this.props.fileTreeShown) {\n            appTabsContainer_1.tabState.debouncedResize();\n        }\n    };\n    return FileTree;\n}(ui_1.BaseComponent));\nFileTree = __decorate([\n    react_redux_1.connect(function (state) {\n        return {\n            filePaths: state.filePaths,\n            filePathsCompleted: state.filePathsCompleted,\n            rootDir: state.rootDir,\n            activeProjectFilePathTruthTable: state.activeProjectFilePathTruthTable,\n            fileTreeShown: state.fileTreeShown,\n        };\n    }),\n    __metadata(\"design:paramtypes\", [Object])\n], FileTree);\nexports.FileTree = FileTree;\nvar TreeNode;\n(function (TreeNode) {\n    var Dir = (function (_super) {\n        __extends(Dir, _super);\n        function Dir() {\n            var _this = _super !== null && _super.apply(this, arguments) || this;\n            _this.shouldComponentUpdate = pure.shouldComponentUpdate;\n            return _this;\n        }\n        Dir.prototype.focus = function (filePath) {\n            this.refs['root'].scrollIntoViewIfNeeded(false);\n        };\n        Dir.prototype.render = function () {\n            var _this = this;\n            var _a = this.props, item = _a.item, depth = _a.depth, expanded = _a.expanded;\n            var icon = expanded ? 'folder-open' : 'folder';\n            var selectedStyle = this.props.selected ? treeItemSelectedStyle : {};\n            var inProjectStyle = this.props.activeProjectFilePathTruthTable[item.filePath] ? treeItemInProjectStyle : {};\n            return (React.createElement(\"div\", { className: treeItemClassName, style: csx.extend(selectedStyle, inProjectStyle), key: item.filePath, ref: 'root', tabIndex: -1, onClick: function (evt) { return _this.props.handleToggleDir(evt, item); } },\n                React.createElement(\"div\", { style: { marginLeft: depth * 10 } },\n                    \" \",\n                    React.createElement(icon_1.Icon, { name: icon }),\n                    \" \",\n                    item.name)));\n        };\n        return Dir;\n    }(React.Component));\n    TreeNode.Dir = Dir;\n    /**\n     * File Name Based Icon\n     */\n    var FileNameBasedIcon = (function (_super) {\n        __extends(FileNameBasedIcon, _super);\n        function FileNameBasedIcon() {\n            var _this = _super !== null && _super.apply(this, arguments) || this;\n            _this.shouldComponentUpdate = pure.shouldComponentUpdate;\n            return _this;\n        }\n        FileNameBasedIcon.prototype.render = function () {\n            var fileName = this.props.fileName.toLowerCase();\n            var ext = utils.getExt(fileName);\n            // Default\n            var iconName = 'file-text-o';\n            if (ext == 'md') {\n                iconName = 'book';\n            }\n            else if (ext == 'json') {\n                iconName = 'database';\n            }\n            else if (ext == 'html' || ext == 'htm') {\n                iconName = 'file-code-o';\n            }\n            else if (ext == 'css' || ext == 'less' || ext == 'scss' || ext == 'sass') {\n                iconName = 'css3';\n            }\n            else if (ext.startsWith('git')) {\n                iconName = 'github';\n            }\n            else if (ext.endsWith('sh') || ext == 'bat' || ext == 'batch') {\n                iconName = 'terminal';\n            }\n            else if (ext.endsWith('coffee')) {\n                iconName = 'coffee';\n            }\n            else if (utils.isTs(fileName)) {\n                iconName = 'rocket';\n            }\n            else if (utils.isJs(fileName)) {\n                iconName = 'plane';\n            }\n            else if (utils.isImage(fileName)) {\n                iconName = 'file-image-o';\n            }\n            var icon = React.createElement(icon_1.Icon, { name: iconName });\n            return React.createElement(\"div\", null,\n                icon,\n                \" \",\n                this.props.fileName);\n        };\n        return FileNameBasedIcon;\n    }(React.Component));\n    /** Renders the file item */\n    var File = (function (_super) {\n        __extends(File, _super);\n        function File() {\n            var _this = _super !== null && _super.apply(this, arguments) || this;\n            _this.shouldComponentUpdate = pure.shouldComponentUpdate;\n            return _this;\n        }\n        File.prototype.focus = function () {\n            this.refs['root'].scrollIntoViewIfNeeded(false);\n        };\n        File.prototype.render = function () {\n            var _this = this;\n            var filePath = this.props.item.filePath;\n            var selectedStyle = this.props.selected ? treeItemSelectedStyle : {};\n            var inProjectStyle = this.props.activeProjectFilePathTruthTable[filePath] ? treeItemInProjectStyle : {};\n            /** Determine if generated */\n            var isGenerated = false;\n            if (filePath.endsWith('.js')) {\n                var noExtName = utils.removeExt(filePath);\n                if (filePath.endsWith('.js.map'))\n                    noExtName = utils.removeExt(noExtName);\n                var tsName = noExtName + '.ts';\n                var tsxName = noExtName + '.tsx';\n                isGenerated = !!this.props.activeProjectFilePathTruthTable[tsName] || !!this.props.activeProjectFilePathTruthTable[tsxName];\n            }\n            var isGeneratedStyle = isGenerated ? treeItemIsGeneratedStyle : {};\n            return (React.createElement(\"div\", { className: treeItemClassName, style: csx.extend(selectedStyle, inProjectStyle, isGeneratedStyle), ref: 'root', tabIndex: -1, onClick: function (evt) { return _this.props.handleSelectFile(evt, _this.props.item); } },\n                React.createElement(\"div\", { style: { marginLeft: this.props.depth * 10 } },\n                    React.createElement(FileNameBasedIcon, { fileName: this.props.item.name }))));\n        };\n        return File;\n    }(React.Component));\n    TreeNode.File = File;\n})(TreeNode = exports.TreeNode || (exports.TreeNode = {}));\n","/home/travis/build/npmtest/node-npmtest-alm/node_modules/alm/src/socket/socketClient.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar slc = require(\"../socketLib/socketLibClient\");\nvar contract = require(\"./socketContract\");\nexports.Types = contract.Types;\nvar Client;\n(function (Client) {\n    Client.increment = function (q) {\n        return Promise.resolve({\n            num: ++q.num\n        });\n    };\n})(Client || (Client = {}));\n// Ensure that the namespace follows the contract\nvar _checkTypes = Client;\n// launch client\nexports.server = (_a = slc.run({ clientImplementation: Client, serverContract: contract.server, cast: contract.cast }), _a.server), exports.cast = _a.cast, exports.pendingRequestsChanged = _a.pendingRequestsChanged, exports.connectionStatusChanged = _a.connectionStatusChanged;\n// Sample usage\nexports.cast.hello.on(function (p) { console.log(p); });\nvar _a;\n","/home/travis/build/npmtest/node-npmtest-alm/node_modules/alm/src/socketLib/socketLibClient.js":"\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar socketLib_1 = require(\"./socketLib\");\nvar socketIo = io;\nvar origin = window.location.protocol + \"//\" + window.location.hostname + (window.location.port ? ':' + window.location.port : '');\nexports.resolve = Promise.resolve.bind(Promise);\n/** This is your main function to launch the client */\nfunction run(config) {\n    var client = new Client(config.clientImplementation);\n    var server = client.sendAllToSocket(config.serverContract);\n    var cast = client.setupAllCast(config.cast);\n    var pendingRequestsChanged = new socketLib_1.TypedEvent();\n    client.pendingRequestsChanged = function (pending) { return pendingRequestsChanged.emit({ pending: pending }); };\n    return { client: client, server: server, cast: cast, pendingRequestsChanged: pendingRequestsChanged, connectionStatusChanged: client.connectionStatusChanged };\n}\nexports.run = run;\nvar Client = (function (_super) {\n    __extends(Client, _super);\n    function Client(clientImplementation) {\n        var _this = _super.call(this) || this;\n        _this.getSocket = function () { return _this.socket; };\n        _this.connectionStatusChanged = new socketLib_1.TypedEvent();\n        _this.typedEvents = {};\n        _this.socket = io.connect(origin);\n        // Also provide the following services to the server\n        _this.registerAllFunctionsExportedFromAsResponders(clientImplementation);\n        _this.startListening();\n        _this.socket.on(socketLib_1.anycastMessageName, function (msg) {\n            _this.typedEvents[msg.message].emit(msg.data);\n        });\n        var connected = false;\n        setInterval(function () {\n            var newConnected = _this.socket.connected;\n            if (newConnected != connected) {\n                connected = newConnected;\n                _this.connectionStatusChanged.emit({ connected: connected });\n            }\n        }, 2000);\n        return _this;\n    }\n    /**\n     * Each member of `instance` must be a typed event\n     * we wire these up to be emitted in the client if an emit is called on the server\n     */\n    Client.prototype.setupAllCast = function (instance) {\n        var _this = this;\n        Object.keys(instance).forEach(function (name) {\n            // Override the actual emit function with one that sends it on to the server\n            _this.typedEvents[name] = instance[name];\n        });\n        return instance;\n    };\n    return Client;\n}(socketLib_1.RequesterResponder));\nexports.Client = Client;\n","/home/travis/build/npmtest/node-npmtest-alm/node_modules/alm/src/app/findAndReplace.js":"\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar React = require(\"react\");\nvar ReactDOM = require('react-dom');\nvar csx = require(\"./base/csx\");\nvar ui_1 = require(\"./ui\");\nvar ui = require(\"./ui\");\nvar utils = require(\"../common/utils\");\nvar styles = require(\"./styles/styles\");\nvar state = require(\"./state/state\");\nvar commands = require(\"./commands/commands\");\nvar react_redux_1 = require(\"react-redux\");\nvar icon_1 = require(\"./components/icon\");\nvar tabRegistry = require(\"./tabs/v2/tabRegistry\");\nvar appTabsContainer_1 = require(\"./tabs/v2/appTabsContainer\");\nvar typestyle = require(\"typestyle\");\nvar csx_1 = require(\"./base/csx\");\nvar inputBlackStyleBase = styles.Input.inputBlackStyleBase;\nvar inputBlackClassName = typestyle.style(inputBlackStyleBase);\nexports.inputCodeStyle = {\n    fontFamily: 'monospace',\n};\nexports.searchOptionsLabelStyle = {\n    color: 'grey',\n    fontSize: '1.5rem',\n    fontWeight: 'bold',\n    cursor: 'pointer',\n    paddingLeft: '5px',\n    paddingRight: '5px',\n};\nvar labelStyle = {\n    color: 'grey',\n    padding: '4px'\n};\nvar FindAndReplace = (function (_super) {\n    __extends(FindAndReplace, _super);\n    function FindAndReplace() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.findInput = function () { return ReactDOM.findDOMNode(_this.refs.find); };\n        _this.replaceInput = function () { return ReactDOM.findDOMNode(_this.refs.replace); };\n        _this.regexInput = function () { return ReactDOM.findDOMNode(_this.refs.regex.refs.input); };\n        _this.caseInsensitiveInput = function () { return ReactDOM.findDOMNode(_this.refs.caseInsensitive.refs.input); };\n        _this.fullWordInput = function () { return ReactDOM.findDOMNode(_this.refs.fullWord.refs.input); };\n        _this.replaceWith = function () { return _this.replaceInput().value; };\n        /** Tab key is only called on key down :) */\n        _this.findKeyDownHandler = function (e) {\n            var _a = ui.getKeyStates(e), tab = _a.tab, shift = _a.shift, enter = _a.enter, mod = _a.mod;\n            if (shift && tab) {\n                _this.fullWordInput() && _this.fullWordInput().focus();\n                e.preventDefault();\n                return;\n            }\n            if (!state.getState().findOptions.query) {\n                return;\n            }\n            if (mod && enter && !shift) {\n                commands.replaceAll.emit({ newText: _this.replaceWith() });\n                return;\n            }\n            if (shift && enter) {\n                commands.findPrevious.emit({});\n                return;\n            }\n            if (enter) {\n                commands.findNext.emit({});\n                return;\n            }\n        };\n        _this.replaceKeyDownHandler = function (e) {\n            var _a = ui.getKeyStates(e), tab = _a.tab, shift = _a.shift, enter = _a.enter, mod = _a.mod;\n            if (!state.getState().findOptions.query) {\n                return;\n            }\n            if (mod && enter) {\n                commands.replaceAll.emit({ newText: _this.replaceWith() });\n                return;\n            }\n            // The cursor.replace function in code mirror focuses the editor *with a delay* :-/\n            var focusBackOnReplaceInput = function () { return setTimeout(function () { return _this.replaceInput().focus(); }, 50); };\n            if (shift && enter) {\n                commands.replacePrevious.emit({ newText: _this.replaceWith() });\n                focusBackOnReplaceInput();\n                return;\n            }\n            if (enter) {\n                commands.replaceNext.emit({ newText: _this.replaceWith() });\n                focusBackOnReplaceInput();\n                return;\n            }\n        };\n        _this.fullWordKeyDownHandler = function (e) {\n            var _a = ui.getKeyStates(e), tab = _a.tab, shift = _a.shift, enter = _a.enter;\n            if (tab && !shift) {\n                _this.findInput().focus();\n                e.preventDefault();\n                return;\n            }\n        };\n        _this.findChanged = utils.debounce(function () {\n            var val = _this.findInput().value;\n            state.setFindOptionsQuery(val);\n        }, 200);\n        _this.handleRegexChange = function (e) {\n            var val = e.target.checked;\n            state.setFindOptionsIsRegex(val);\n        };\n        _this.handleCaseSensitiveChange = function (e) {\n            var val = e.target.checked;\n            state.setFindOptionsIsCaseSensitive(val);\n        };\n        _this.handleFullWordChange = function (e) {\n            var val = e.target.checked;\n            state.setFindOptionsIsFullWord(val);\n        };\n        return _this;\n    }\n    FindAndReplace.prototype.componentDidMount = function () {\n        var _this = this;\n        this.disposible.add(commands.findAndReplace.on(function () {\n            /** Find input might not be there if current tab doesn't support search */\n            if (!_this.findInput()) {\n                return;\n            }\n            // if not shown and the current tab is an editor we should load the selected text from the editor (if any)\n            if (!state.getState().findOptions.isShown) {\n                var codeEditor = appTabsContainer_1.tabState.getFocusedCodeEditorIfAny();\n                if (codeEditor) {\n                    var selectedString = codeEditor.getSelectionSearchString();\n                    if (selectedString) {\n                        state.setFindOptionsQuery(selectedString);\n                        _this.findInput().value = selectedString;\n                    }\n                }\n            }\n            state.setFindOptionsIsShown(true);\n            _this.findInput().select();\n            _this.replaceInput() && _this.replaceInput().select();\n            _this.findInput().focus();\n        }));\n        this.disposible.add(commands.esc.on(function () {\n            state.setFindOptionsIsShown(false);\n            _this.findInput() && _this.findInput().focus();\n        }));\n        this.disposible.add(appTabsContainer_1.tabStateChanged.on(function () {\n            _this.forceUpdate();\n        }));\n    };\n    // searchLocation = (): HTMLInputElement=> ReactDOM.findDOMNode(this.refs.find);\n    FindAndReplace.prototype.render = function () {\n        var shownStyle = this.props.findQuery.isShown ? {} : { display: 'none' };\n        /** Detect advanced find needed or not */\n        var tab = appTabsContainer_1.tabState.getSelectedTab();\n        var searchSupport = tab && tabRegistry.getTabConfigByUrl(tab.url).searchSupport;\n        var advancedFind = searchSupport && searchSupport == tabRegistry.TabSearchSupport.Advanced;\n        /** For Find and Replace Multi ... completely bail out */\n        if (!tab || !searchSupport) {\n            return React.createElement(\"noscript\", null);\n        }\n        if (!advancedFind) {\n            return (React.createElement(\"div\", { style: csx.extend(csx.horizontal, shownStyle) },\n                React.createElement(\"div\", { style: csx_1.extend(csx.flex, csx.vertical) },\n                    React.createElement(\"div\", { style: csx_1.extend(csx.horizontal, csx.center, styles.padded1) },\n                        React.createElement(\"input\", { tabIndex: 1, ref: \"find\", placeholder: \"Find\", className: inputBlackClassName, style: csx_1.extend(exports.inputCodeStyle, csx.flex), onKeyDown: this.findKeyDownHandler, onChange: this.findChanged, defaultValue: this.props.findQuery.query })))));\n        }\n        return (React.createElement(\"div\", { style: csx_1.extend(csx.vertical, shownStyle) },\n            React.createElement(\"div\", { style: csx_1.extend(csx.horizontal, shownStyle) },\n                React.createElement(\"div\", { style: csx_1.extend(csx.flex, csx.vertical) },\n                    React.createElement(\"div\", { style: csx_1.extend(csx.horizontal, csx.center, styles.padded1) },\n                        React.createElement(\"input\", { tabIndex: 1, ref: \"find\", placeholder: \"Find\", className: inputBlackClassName, style: csx.extend(exports.inputCodeStyle, csx.flex), onKeyDown: this.findKeyDownHandler, onChange: this.findChanged, defaultValue: this.props.findQuery.query })),\n                    React.createElement(\"div\", { style: csx_1.extend(csx.horizontal, csx.center, styles.padded1) },\n                        React.createElement(\"input\", { tabIndex: 2, ref: \"replace\", placeholder: \"Replace\", className: inputBlackClassName, style: csx.extend(exports.inputCodeStyle, csx.flex), onKeyDown: this.replaceKeyDownHandler }))),\n                React.createElement(\"div\", { style: csx.centerCenter },\n                    React.createElement(\"div\", { style: csx.extend(csx.horizontal, csx.aroundJustified, styles.padded1) },\n                        React.createElement(\"label\", { style: csx_1.extend(csx.horizontal, csx.center) },\n                            React.createElement(ui.Toggle, { tabIndex: 3, ref: \"regex\", onChange: this.handleRegexChange }),\n                            React.createElement(\"span\", { style: exports.searchOptionsLabelStyle }, \".*\")),\n                        React.createElement(\"label\", { style: csx_1.extend(csx.horizontal, csx.center) },\n                            React.createElement(ui.Toggle, { tabIndex: 4, ref: \"caseInsensitive\", onChange: this.handleCaseSensitiveChange }),\n                            React.createElement(\"span\", { style: exports.searchOptionsLabelStyle }, \"Aa\")),\n                        React.createElement(\"label\", { style: csx_1.extend(csx.horizontal, csx.center) },\n                            React.createElement(ui.Toggle, { tabIndex: 5, ref: \"fullWord\", onKeyDown: this.fullWordKeyDownHandler, onChange: this.handleFullWordChange }),\n                            React.createElement(\"span\", { style: exports.searchOptionsLabelStyle },\n                                React.createElement(icon_1.Icon, { name: \"text-width\" })))))),\n            React.createElement(\"div\", { style: styles.Tip.root },\n                React.createElement(\"span\", { style: styles.Tip.keyboardShortCutStyle }, \"Esc\"),\n                \" to exit\",\n                ' ',\n                React.createElement(\"span\", { style: styles.Tip.keyboardShortCutStyle }, \"Enter\"),\n                \" to find/replace next\",\n                ' ',\n                React.createElement(\"span\", { style: styles.Tip.keyboardShortCutStyle }, \"Shift + Enter\"),\n                \" to find/replace previous\",\n                ' ',\n                React.createElement(\"span\", { style: styles.Tip.keyboardShortCutStyle },\n                    commands.modName,\n                    \" + Enter\"),\n                \" to replace all\")));\n    };\n    FindAndReplace.prototype.handleSearchKeys = function (e) {\n    };\n    FindAndReplace.prototype.componentWillUpdate = function (nextProps, nextState) {\n        if (nextProps.findQuery.isShown !== this.props.findQuery.isShown) {\n            appTabsContainer_1.tabState.debouncedResize();\n        }\n    };\n    return FindAndReplace;\n}(ui_1.BaseComponent));\nFindAndReplace = __decorate([\n    react_redux_1.connect(function (state) {\n        return {\n            findQuery: state.findOptions,\n        };\n    })\n], FindAndReplace);\nexports.FindAndReplace = FindAndReplace;\n","/home/travis/build/npmtest/node-npmtest-alm/node_modules/alm/src/app/globalErrorCacheClient.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * A global view on the errors. Essentially a sink for the errors from the server\n */\nvar errorsCache_1 = require(\"../server/utils/errorsCache\");\nexports.errorsCache = new errorsCache_1.ErrorsCache();\n","/home/travis/build/npmtest/node-npmtest-alm/node_modules/alm/src/app/gotoHistory.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ui = require(\"./ui\");\nvar state = require(\"./state/state\");\nvar commands = require(\"./commands/commands\");\nvar utils = require(\"../common/utils\");\nvar appTabsContainer_1 = require(\"./tabs/v2/appTabsContainer\");\nvar globalErrorCacheClient_1 = require(\"./globalErrorCacheClient\");\ncommands.gotoNext.on(function () {\n    gotoNext();\n});\ncommands.gotoPrevious.on(function () {\n    gotoPrevious();\n});\nvar errorsInOpenFiles = { members: [] };\nvar buildOutput = { members: [] };\nvar referencesOutput = { members: [] };\nvar reloadErrorsInOpenFiles = utils.debounce(function () {\n    var errorsFlattened = appTabsContainer_1.tabState.errorsByFilePathFiltered().errorsFlattened;\n    errorsInOpenFiles.members = errorsFlattened.map(function (x) {\n        return { filePath: x.filePath, line: x.from.line, col: x.from.ch };\n    });\n}, 500);\nglobalErrorCacheClient_1.errorsCache.errorsDelta.on(reloadErrorsInOpenFiles);\nstate.subscribeSub(function (state) { return state.errorsDisplayMode; }, reloadErrorsInOpenFiles);\nstate.subscribeSub(function (state) { return state.errorsFilter; }, reloadErrorsInOpenFiles);\nappTabsContainer_1.tabStateChanged.on(reloadErrorsInOpenFiles);\n/**\n * Use this to keep the *lastPosition* in error list in sync\n * A bit fugly because there might be multiple errors in the same location but works good enough\n */\nfunction gotoError(error) {\n    commands.doOpenOrFocusFile.emit({ filePath: error.filePath, position: error.from });\n    errorsInOpenFiles.lastIndex = indexOf(errorsInOpenFiles.members, function (member) {\n        return member.filePath == error.filePath && member.line == error.from.line && member.col == error.from.ch;\n    });\n}\nexports.gotoError = gotoError;\n/** This *must* always be set */\nvar activeList = errorsInOpenFiles;\nfunction gotoItemInActiveList(index) {\n    var member = activeList.members[index];\n    activeList.lastIndex = index;\n    commands.doOpenOrFocusFile.emit({ filePath: member.filePath, position: { line: member.line, ch: member.col } });\n}\n/**\n * Uses `activeList` to go to the next error or loop back\n * Storing `lastIndex` with the list allows us to be lazy elsewhere and actively find the element here\n */\nfunction findCurrentIndexInList() {\n    // Early exit if no members\n    if (!activeList.members.length) {\n        ui.notifyInfoNormalDisappear('No members in active go-to list');\n        return -1;\n    }\n    // If we don't have a lastPosition then first is the last position\n    if (!activeList.lastIndex || activeList.lastIndex == -1)\n        return 0;\n    // If we have gone too far, then goto last\n    if (activeList.lastIndex >= activeList.members.length)\n        return activeList.members.length - 1;\n    // Index is good. Return that :)\n    return activeList.lastIndex;\n}\n/** Uses `activeList` to go to the next position or loop back */\nfunction gotoNext() {\n    var currentIndex = findCurrentIndexInList();\n    if (currentIndex == -1)\n        return;\n    var nextIndex = currentIndex + 1;\n    // If next is == length then loop to zero\n    if (nextIndex == activeList.members.length) {\n        nextIndex = 0;\n    }\n    gotoItemInActiveList(nextIndex);\n}\nexports.gotoNext = gotoNext;\n/** Uses `activeList` to go to the previous position or loop back */\nfunction gotoPrevious() {\n    var currentIndex = findCurrentIndexInList();\n    if (currentIndex == -1)\n        return;\n    var previousIndex = currentIndex - 1;\n    // If next is == -1 then loop to length\n    if (previousIndex == -1) {\n        previousIndex = activeList.members.length - 1;\n    }\n    gotoItemInActiveList(previousIndex);\n}\nexports.gotoPrevious = gotoPrevious;\n/**\n * Utility Return index of element in an array based on a filter\n */\nfunction indexOf(items, filter) {\n    for (var i = 0; i < items.length; i++) {\n        if (filter(items[i])) {\n            return i;\n        }\n    }\n    return -1;\n}\n","/home/travis/build/npmtest/node-npmtest-alm/node_modules/alm/src/app/ui.js":"\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Convinient base component and ui utilities\n */\nexports.React = require(\"react\");\nexports.ReactDOM = require(\"react-dom\");\nvar events_1 = require(\"../common/events\");\nexports.$ = require(\"jquery\");\n/** The base component that provides an easy access point for overall app behaviour changes */\nvar BaseComponent = (function (_super) {\n    __extends(BaseComponent, _super);\n    function BaseComponent() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.disposible = new events_1.CompositeDisposible();\n        _this.isUnmounted = false;\n        _this._afterComponentDidUpdateQueue = [];\n        _this.getParentDomNode = function () {\n            var node = exports.ReactDOM.findDOMNode(_this);\n            return node.parentElement;\n        };\n        return _this;\n    }\n    BaseComponent.prototype.componentWillUnmount = function () {\n        this.disposible.dispose();\n        this.isUnmounted = true;\n    };\n    // Making it easier to deal with refs\n    BaseComponent.prototype.ref = function (name) {\n        return this.refs[name];\n    };\n    /**\n     * Register stuff to call after component did update\n     * Note: For redux-connected component,\n     * - call this *before* calling state action\n     *   (as its a bit undeterministic and sometimes runs render / didUpdate immediately after calling action)\n     */\n    BaseComponent.prototype.afterComponentDidUpdate = function (cb) {\n        this._afterComponentDidUpdateQueue.push(cb);\n    };\n    /**\n     * You generally want afterComponentDidUpdate.\n     */\n    BaseComponent.prototype.componentDidUpdate = function () {\n        this._afterComponentDidUpdateQueue.forEach(function (cb) { return cb(); });\n        this._afterComponentDidUpdateQueue = [];\n    };\n    return BaseComponent;\n}(exports.React.Component));\nexports.BaseComponent = BaseComponent;\n/**\n * Certain components control when they unmount themselves\n * e.g. Modals\n * This gives a convinient point for this logic\n */\nfunction getUnmountableNode() {\n    var node = document.createElement('div');\n    var unmount = function () {\n        exports.ReactDOM.unmountComponentAtNode(node);\n        node.remove();\n    };\n    return { node: node, unmount: unmount };\n}\nexports.getUnmountableNode = getUnmountableNode;\n/**\n * Toggle component\n * http://instructure-react.github.io/react-toggle/\n */\nexports.Toggle = require('react-toggle');\nrequire('react-toggle/style.css');\n/**\n * Notifications\n */\nvar toastr = require(\"toastr\");\nrequire('toastr/build/toastr.css');\nfunction notifyInfoQuickDisappear(message) {\n    toastr.info(message, null, { timeOut: 600 });\n}\nexports.notifyInfoQuickDisappear = notifyInfoQuickDisappear;\nfunction notifyInfoNormalDisappear(message, options) {\n    toastr.info(message, null, options && { onclick: options.onClick });\n}\nexports.notifyInfoNormalDisappear = notifyInfoNormalDisappear;\nfunction notifyWarningNormalDisappear(message, options) {\n    toastr.warning(message, null, options && { onclick: options.onClick });\n}\nexports.notifyWarningNormalDisappear = notifyWarningNormalDisappear;\nfunction notifySuccessNormalDisappear(message, options) {\n    toastr.success(message, null, options && { onclick: options.onClick });\n}\nexports.notifySuccessNormalDisappear = notifySuccessNormalDisappear;\nfunction comingSoon(featureName) {\n    toastr.info(\"Coming soon! : \" + featureName);\n}\nexports.comingSoon = comingSoon;\n/**\n * Keyboard handling\n */\n/** Utility function for keyboard handling */\nfunction getKeyStates(e) {\n    var event = e; // This is a lie .... but a convinient one as react provides the same stuff\n    var nativeEvent = e.nativeEvent; // This is the truth\n    var tab = event.key == 'Tab';\n    var shift = nativeEvent.shiftKey;\n    var mod = nativeEvent.metaKey || nativeEvent.ctrlKey;\n    var enter = event.key == 'Enter';\n    var up = event.key == 'ArrowUp';\n    var down = event.key == 'ArrowDown';\n    var tabNext = tab && !shift;\n    var tabPrevious = tab && shift;\n    return { tab: tab, tabNext: tabNext, tabPrevious: tabPrevious, up: up, down: down, shift: shift, mod: mod, enter: enter };\n}\nexports.getKeyStates = getKeyStates;\nexports.DraggableCore = require('react-draggable').DraggableCore;\n/**\n * General react utilities\n */\n/** Creates whitespace from a 0 based indent */\nfunction indent(indent, tabSize) {\n    if (tabSize === void 0) { tabSize = 4; }\n    return Array((indent * tabSize) + 1).join().split('').map(function (i) { return \"\\u00a0\"; });\n}\nexports.indent = indent;\n/**\n * General utility for consistent coloring\n */\nfunction kindToColor(kind, lighten) {\n    if (lighten === void 0) { lighten = false; }\n    var add = lighten ? 50 : 0;\n    var opacity = lighten ? 0.2 : 1;\n    switch (kind) {\n        case ts.ScriptElementKind.keyword:\n        case 'snippet':\n            // redish\n            return \"rgba(\" + (0xf9 + add) + \",\" + (0x26 + add) + \",\" + (0x72 + add) + \",\" + opacity + \")\";\n        case ts.ScriptElementKind.scriptElement:\n        case ts.ScriptElementKind.moduleElement:\n        case ts.ScriptElementKind.classElement:\n        case ts.ScriptElementKind.localClassElement:\n        case ts.ScriptElementKind.interfaceElement:\n        case ts.ScriptElementKind.typeElement:\n        case ts.ScriptElementKind.enumElement:\n        case ts.ScriptElementKind.alias:\n        case ts.ScriptElementKind.typeParameterElement:\n        case ts.ScriptElementKind.primitiveType:\n            // yelloish\n            // #e6db74\n            return \"rgba(\" + (0xe6 + add) + \",\" + (0xdb + add) + \",\" + (0x74 + add) + \",\" + opacity + \")\";\n        case ts.ScriptElementKind.variableElement:\n        case ts.ScriptElementKind.localVariableElement:\n        case ts.ScriptElementKind.memberVariableElement:\n        case ts.ScriptElementKind.letElement:\n        case ts.ScriptElementKind.constElement:\n        case ts.ScriptElementKind.label:\n        case ts.ScriptElementKind.parameterElement:\n        case ts.ScriptElementKind.indexSignatureElement:\n            // blueish\n            // #66d9ef\n            return \"rgba(\" + (0x66 + add) + \",\" + (0xd9 + add) + \",\" + (0xef + add) + \",\" + opacity + \")\";\n        case ts.ScriptElementKind.functionElement:\n        case ts.ScriptElementKind.localFunctionElement:\n        case ts.ScriptElementKind.memberFunctionElement:\n        case ts.ScriptElementKind.memberGetAccessorElement:\n        case ts.ScriptElementKind.memberSetAccessorElement:\n        case ts.ScriptElementKind.callSignatureElement:\n        case ts.ScriptElementKind.constructorImplementationElement:\n        case 'path':\n            // greenish\n            // #a6e22e\n            return \"rgba(\" + (0xa6 + add) + \",\" + (0xe2 + add) + \",\" + (0x2e + add) + \",\" + opacity + \")\";\n        default:\n            return \"rgba(\" + (0xaa + add) + \",\" + (0xaa + add) + \",\" + (0xaa + add) + \",\" + opacity + \")\";\n    }\n}\nexports.kindToColor = kindToColor;\n/**\n * For consitent icon lookup against kind\n */\nvar fontAwesomeToCharCode_1 = require(\"./utils/fontAwesomeToCharCode\");\nfunction kindToIcon(kind) {\n    switch (kind) {\n        case 'snippet':\n            return fontAwesomeToCharCode_1.toFontAwesomeCharCode(fontAwesomeToCharCode_1.FAIconName.exchange);\n        case 'path':\n            return fontAwesomeToCharCode_1.toFontAwesomeCharCode(fontAwesomeToCharCode_1.FAIconName.fileText);\n        case ts.ScriptElementKind.keyword:\n            return fontAwesomeToCharCode_1.toFontAwesomeCharCode(fontAwesomeToCharCode_1.FAIconName.key);\n        case ts.ScriptElementKind.classElement:\n            return fontAwesomeToCharCode_1.toFontAwesomeCharCode(fontAwesomeToCharCode_1.FAIconName.copyright);\n        case ts.ScriptElementKind.interfaceElement:\n            return fontAwesomeToCharCode_1.toFontAwesomeCharCode(fontAwesomeToCharCode_1.FAIconName.infoCircle);\n        case ts.ScriptElementKind.scriptElement:\n        case ts.ScriptElementKind.moduleElement:\n        case ts.ScriptElementKind.localClassElement:\n        case ts.ScriptElementKind.typeElement:\n        case ts.ScriptElementKind.enumElement:\n        case ts.ScriptElementKind.alias:\n        case ts.ScriptElementKind.typeParameterElement:\n        case ts.ScriptElementKind.primitiveType:\n            return fontAwesomeToCharCode_1.toFontAwesomeCharCode(fontAwesomeToCharCode_1.FAIconName.archive);\n        case ts.ScriptElementKind.variableElement:\n        case ts.ScriptElementKind.localVariableElement:\n        case ts.ScriptElementKind.memberVariableElement:\n        case ts.ScriptElementKind.letElement:\n        case ts.ScriptElementKind.constElement:\n        case ts.ScriptElementKind.label:\n        case ts.ScriptElementKind.parameterElement:\n        case ts.ScriptElementKind.indexSignatureElement:\n            return fontAwesomeToCharCode_1.toFontAwesomeCharCode(fontAwesomeToCharCode_1.FAIconName.at);\n        case ts.ScriptElementKind.functionElement:\n        case ts.ScriptElementKind.localFunctionElement:\n        case ts.ScriptElementKind.memberFunctionElement:\n        case ts.ScriptElementKind.memberGetAccessorElement:\n        case ts.ScriptElementKind.memberSetAccessorElement:\n        case ts.ScriptElementKind.callSignatureElement:\n        case ts.ScriptElementKind.constructorImplementationElement:\n            return fontAwesomeToCharCode_1.toFontAwesomeCharCode(fontAwesomeToCharCode_1.FAIconName.circleArrowRight);\n        default:\n            return fontAwesomeToCharCode_1.toFontAwesomeCharCode(fontAwesomeToCharCode_1.FAIconName.info);\n    }\n}\nexports.kindToIcon = kindToIcon;\n","/home/travis/build/npmtest/node-npmtest-alm/node_modules/alm/src/app/main.js":"window.monacoReady = function () {\n    require('./trueMain');\n};\n","/home/travis/build/npmtest/node-npmtest-alm/node_modules/alm/src/app/mainPanel.js":"\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar utils = require(\"../common/utils\");\nvar styles = require(\"./styles/styles\");\nvar React = require(\"react\");\nvar csx = require(\"./base/csx\");\nvar ui_1 = require(\"./ui\");\nvar ui = require(\"./ui\");\nvar commands = require(\"./commands/commands\");\nvar types = require(\"../common/types\");\nvar clipboard_1 = require(\"./components/clipboard\");\nvar icon_1 = require(\"./components/icon\");\nvar buttons_1 = require(\"./components/buttons\");\nvar inputs_1 = require(\"./components/inputs\");\nvar pure = require(\"../common/pure\");\nvar DraggableCore = ui.DraggableCore;\nvar react_redux_1 = require(\"react-redux\");\nvar state_1 = require(\"./state/state\");\nvar state = require(\"./state/state\");\nvar gotoHistory = require(\"./gotoHistory\");\nvar appTabsContainer_1 = require(\"./tabs/v2/appTabsContainer\");\nvar settings = require(\"./state/settings\");\nvar globalErrorCacheClient_1 = require(\"./globalErrorCacheClient\");\nvar notificationKeyboardStyle = {\n    border: '2px solid',\n    borderRadius: '6px',\n    display: 'inline-block',\n    padding: '5px',\n    background: 'grey',\n};\nvar resizerWidth = 5;\nvar resizerStyle = {\n    background: 'radial-gradient(#444,transparent)',\n    height: resizerWidth + 'px',\n    cursor: 'ns-resize',\n    color: '#666',\n};\nvar MainPanel = (function (_super) {\n    __extends(MainPanel, _super);\n    function MainPanel(props) {\n        var _this = _super.call(this, props) || this;\n        _this.toggleErrors = function () {\n            if (_this.props.errorsExpanded) {\n                state_1.collapseErrors({});\n            }\n            else {\n                state_1.expandErrors({});\n            }\n        };\n        _this.openErrorLocation = function (error) {\n            gotoHistory.gotoError(error);\n        };\n        _this.openFile = function (filePath) {\n            commands.doOpenOrFocusFile.emit({ filePath: filePath });\n        };\n        _this.handleDrag = function (evt, ui) {\n            _this.setState({ height: utils.rangeLimited({ num: _this.state.height - ui.deltaY, min: 100, max: window.innerHeight - 100 }) });\n        };\n        _this.handleStop = function () {\n            var height = _this.state.height;\n            settings.mainPanelHeight.set(height);\n        };\n        _this.state = {\n            height: 250,\n        };\n        return _this;\n    }\n    MainPanel.prototype.componentDidMount = function () {\n        var _this = this;\n        settings.mainPanelHeight.get().then(function (res) {\n            var height = res || _this.state.height;\n            height = Math.min(window.innerHeight - 100, height);\n            _this.setState({ height: height });\n        });\n        this.disposible.add(commands.toggleMessagePanel.on(function () {\n            state.getState().errorsExpanded ? state.collapseErrors({}) : state.expandErrors({});\n        }));\n        this.disposible.add(appTabsContainer_1.tabStateChanged.on(function () {\n            _this.forceUpdate();\n        }));\n        this.disposible.add(globalErrorCacheClient_1.errorsCache.errorsDelta.on(function () {\n            _this.forceUpdate();\n        }));\n    };\n    MainPanel.prototype.render = function () {\n        var errorsUpdate = globalErrorCacheClient_1.errorsCache.getErrorsLimited();\n        var errorPanel = undefined;\n        if (this.props.errorsExpanded) {\n            errorPanel = React.createElement(\"div\", null,\n                React.createElement(DraggableCore, { onDrag: this.handleDrag, onStop: this.handleStop },\n                    React.createElement(\"div\", { style: csx.extend(csx.flexRoot, csx.centerCenter, resizerStyle) },\n                        React.createElement(icon_1.Icon, { name: \"ellipsis-h\" }))),\n                React.createElement(\"div\", { style: csx.extend(styles.errorsPanel.main, { height: this.state.height }) },\n                    React.createElement(\"div\", { style: styles.errorsPanel.headerSection },\n                        React.createElement(\"div\", { style: csx.horizontal },\n                            React.createElement(\"div\", { style: csx.extend(csx.horizontal, csx.flex, csx.center, { marginRight: '10px' }) },\n                                React.createElement(buttons_1.ButtonBlack, { text: \"Show All\", onClick: function () { return state.setErrorsDisplayMode(types.ErrorsDisplayMode.all); }, isActive: this.props.errorsDisplayMode == types.ErrorsDisplayMode.all }),\n                                React.createElement(buttons_1.ButtonBlack, { text: \"Show Only Open Files\", onClick: function () { return state.setErrorsDisplayMode(types.ErrorsDisplayMode.openFiles); }, isActive: this.props.errorsDisplayMode == types.ErrorsDisplayMode.openFiles }),\n                                React.createElement(\"label\", { style: { marginLeft: '10px' } }, \"Filter:\"),\n                                React.createElement(inputs_1.InputBlack, { style: { marginRight: '10px', maxWidth: '200px' }, onChange: function (value) { return state.setErrorsFilter(value); }, value: this.props.errorsFilter }),\n                                React.createElement(buttons_1.ButtonBlack, { text: \"Clear\", disabled: !this.props.errorsFilter.trim(), onClick: function () { return state.setErrorsFilter(''); } })),\n                            errorsUpdate.tooMany\n                                && React.createElement(\"div\", { style: styles.errorsPanel.tooMany, className: \"hint--bottom-left hint--info\", \"data-hint\": \"We only sync the top 50 per file with a limit of 250. That ensures that live linting doesn't slow anything else down.\" },\n                                    errorsUpdate.totalCount,\n                                    \" total. Showing top \",\n                                    errorsUpdate.syncCount,\n                                    \".\"))),\n                    errorsUpdate.totalCount\n                        ? this.renderErrors()\n                        : React.createElement(\"div\", { style: styles.errorsPanel.success }, \"No Errors \\u2764\")));\n        }\n        return (React.createElement(\"div\", { style: { zIndex: 6 /* force over golden-layout */ } }, errorPanel));\n    };\n    MainPanel.prototype.renderErrors = function () {\n        var errorsToRender = appTabsContainer_1.tabState.errorsByFilePathFiltered().errorsByFilePath;\n        return (React.createElement(\"div\", { style: { overflow: 'auto' } }, Object.keys(errorsToRender)\n            .filter(function (filePath) { return !!errorsToRender[filePath].length; })\n            .map(function (filePath, i) {\n            var errors = errorsToRender[filePath];\n            return React.createElement(ErrorRenders.ErrorsForFilePath, { key: i, errors: errors, filePath: filePath });\n        })));\n    };\n    MainPanel.prototype.componentWillUpdate = function (nextProps, nextState) {\n        if (nextState.height !== this.state.height\n            || nextProps.errorsExpanded !== this.props.errorsExpanded) {\n            appTabsContainer_1.tabState.debouncedResize();\n        }\n    };\n    return MainPanel;\n}(ui_1.BaseComponent));\nMainPanel = __decorate([\n    react_redux_1.connect(function (state) {\n        return {\n            errorsExpanded: state.errorsExpanded,\n            activeProject: state.activeProject,\n            activeProjectFiles: state.activeProjectFilePathTruthTable,\n            socketConnected: state.socketConnected,\n            errorsDisplayMode: state.errorsDisplayMode,\n            errorsFilter: state.errorsFilter,\n        };\n    }),\n    __metadata(\"design:paramtypes\", [Object])\n], MainPanel);\nexports.MainPanel = MainPanel;\n/**\n * Pure components for rendering errors\n */\nvar ErrorRenders;\n(function (ErrorRenders) {\n    var openErrorLocation = function (error) {\n        gotoHistory.gotoError(error);\n    };\n    var ErrorsForFilePath = (function (_super) {\n        __extends(ErrorsForFilePath, _super);\n        function ErrorsForFilePath() {\n            var _this = _super !== null && _super.apply(this, arguments) || this;\n            _this.shouldComponentUpdate = pure.shouldComponentUpdate;\n            return _this;\n        }\n        ErrorsForFilePath.prototype.render = function () {\n            var _this = this;\n            var codeErrors = this.props.errors;\n            var errors = codeErrors.filter(function (x) { return x.level === 'error'; });\n            var warnings = codeErrors.filter(function (x) { return x.level === 'warning'; });\n            var errorsRendered = \n            // error before warning\n            errors.concat(warnings)\n                .map(function (e, j) { return (React.createElement(SingleError, { key: \"\" + j, error: e })); });\n            return React.createElement(\"div\", null,\n                React.createElement(\"div\", { style: styles.errorsPanel.filePath, onClick: function () { return openErrorLocation(_this.props.errors[0]); } },\n                    React.createElement(icon_1.Icon, { name: \"file-code-o\", style: { fontSize: '.8rem' } }),\n                    \"\\u00A0\",\n                    this.props.filePath,\n                    \"(\",\n                    !!errors.length && React.createElement(\"span\", { style: { color: styles.errorColor } }, errors.length),\n                    !!(errors.length && warnings.length) && ',',\n                    !!warnings.length && React.createElement(\"span\", { style: { color: styles.warningColor } }, warnings.length),\n                    \")\"),\n                React.createElement(\"div\", { style: styles.errorsPanel.perFileList }, errorsRendered));\n        };\n        return ErrorsForFilePath;\n    }(React.Component));\n    ErrorRenders.ErrorsForFilePath = ErrorsForFilePath;\n    var SingleError = (function (_super) {\n        __extends(SingleError, _super);\n        function SingleError() {\n            var _this = _super !== null && _super.apply(this, arguments) || this;\n            _this.shouldComponentUpdate = pure.shouldComponentUpdate;\n            return _this;\n        }\n        SingleError.prototype.render = function () {\n            var e = this.props.error;\n            var style = e.level === 'error'\n                ? styles.errorsPanel.errorDetailsContainer\n                : styles.errorsPanel.warningDetailsContainer;\n            return (React.createElement(\"div\", { style: style, onClick: function () { return openErrorLocation(e); } },\n                React.createElement(\"div\", { style: styles.errorsPanel.errorDetailsContent },\n                    React.createElement(\"div\", { style: styles.errorsPanel.errorMessage },\n                        \"\\uD83D\\uDC1B(\",\n                        e.from.line + 1,\n                        \": \",\n                        e.from.ch + 1,\n                        \") \",\n                        e.message,\n                        ' ',\n                        React.createElement(clipboard_1.Clipboard, { text: e.filePath + \":\" + (e.from.line + 1) + \" \" + e.message })),\n                    e.preview ? React.createElement(\"div\", { style: styles.errorsPanel.errorPreview }, e.preview) : '')));\n        };\n        return SingleError;\n    }(React.Component));\n    ErrorRenders.SingleError = SingleError;\n})(ErrorRenders || (ErrorRenders = {}));\n","/home/travis/build/npmtest/node-npmtest-alm/node_modules/alm/src/app/styles/styles.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar csx = require(\"../base/csx\");\nexports.textColor = '#BBB';\nexports.errorColor = '#f92672';\nexports.warningColor = '#f6d675'; // Color from CodeMirror `lint.css` warning squiggly color\nexports.successColor = '#00c990';\nexports.highlightColor = \"#6edeef\";\nexports.selectedBackgroundColor = '#444';\nexports.monokaiBackgroundColor = '#272822';\nexports.monokaiTextColor = \"#e6db74\"; // The color of strings\n/**\n * FA Icon names used in the application\n */\nexports.icons = {\n    tested: 'futbol-o',\n    testedSuite: 'pagelines',\n    testedTest: 'leaf',\n};\n/**\n * A background color that looks nice over the \"editor\" background black\n */\nexports.blackHighlightColor = \"#1C1D18\";\n/**\n * If you expect a child to scroll you need to tell it that I will not give you a scroll bar\n */\nexports.someChildWillScroll = {\n    overflow: 'hidden'\n};\nexports.tabHeaderContainer = {\n    background: 'grey'\n};\nexports.tabHeader = {\n    fontSize: '.8em',\n    fontFamily: 'Roboto, sans-serif',\n    fontWeight: 'bold',\n    paddingLeft: '10px',\n    paddingRight: '10px',\n    paddingTop: '5px',\n    paddingBottom: '5px',\n    background: \"rgb(66, 66, 66)\",\n    color: \"rgb(150,150,150)\",\n    borderLeft: '6px solid rgb(88, 88, 88)',\n    cursor: 'pointer',\n    userSelect: 'none',\n    transition: \"color .5s, border-left .5s, background .5s\"\n};\nexports.tabHeaderActive = {\n    color: exports.highlightColor,\n    borderLeft: \"6px solid \" + exports.highlightColor,\n};\nexports.tabHeaderUnsaved = {\n    background: \"#777\",\n};\nexports.fullWindow = {\n    position: 'absolute',\n    left: '10px',\n    right: '10px',\n    top: '10px',\n    bottom: '10px',\n};\nexports.padded1 = {\n    padding: '.25rem'\n};\nexports.padded1TopBottom = {\n    paddingTop: exports.padded1.padding,\n    paddingBottom: exports.padded1.padding\n};\nexports.padded1LeftRightBottom = {\n    paddingLeft: exports.padded1.padding,\n    paddingRight: exports.padded1.padding,\n    paddingBottom: exports.padded1.padding\n};\nexports.padded2 = {\n    padding: '.5rem'\n};\nexports.fullSize = {\n    width: '100%',\n    height: '100%',\n};\nvar statusBarHeight = 25;\nexports.statusBar = {\n    height: statusBarHeight + \"px\",\n    color: '#999',\n    paddingLeft: '3px',\n    paddingRight: '3px',\n    fontSize: '12px',\n    border: '1px solid #999',\n};\nexports.statusBarSection = {\n    paddingLeft: '3px',\n    paddingRight: '3px',\n};\nexports.statusBarError = {\n    color: exports.errorColor\n};\nexports.statusBarSuccess = {\n    color: exports.successColor\n};\nexports.noSelect = {\n    userSelect: 'none',\n    cursor: 'default'\n};\nexports.hand = {\n    cursor: 'pointer',\n};\nexports.noWrap = {\n    whiteSpace: 'nowrap',\n};\nexports.codeFont = {\n    fontFamily: 'monospace'\n};\nvar errorsPanel;\n(function (errorsPanel) {\n    errorsPanel.success = {\n        color: exports.successColor\n    };\n    errorsPanel.main = {\n        color: exports.textColor,\n        fontFamily: exports.codeFont.fontFamily,\n        padding: '6px',\n        overflow: 'hidden',\n        display: 'flex',\n        flexDirection: 'column'\n    };\n    errorsPanel.headerSection = {\n        flexShrink: 0,\n        marginBottom: '5px',\n    };\n    errorsPanel.tooMany = {\n        fontSize: '1.2rem',\n        fontWeight: 'bolder',\n    };\n    errorsPanel.filePath = {\n        fontSize: '1rem',\n        fontWeight: 'bold',\n        padding: '8px 8px 8px 0px',\n        cursor: exports.hand.cursor,\n    };\n    errorsPanel.perFileList = {};\n    var itemDetailsContainer = csx.extend(exports.hand, {\n        padding: '3px'\n    });\n    errorsPanel.errorDetailsContainer = csx.extend(itemDetailsContainer, {\n        borderLeft: '6px solid ' + exports.errorColor\n    });\n    errorsPanel.warningDetailsContainer = csx.extend(itemDetailsContainer, {\n        borderLeft: '6px solid ' + exports.warningColor\n    });\n    errorsPanel.errorDetailsContent = {\n        padding: '3px',\n    };\n    errorsPanel.errorMessage = {\n        paddingBottom: '3px',\n        cursor: 'pointer',\n        userSelect: 'none',\n    };\n    errorsPanel.errorPreview = {\n        padding: '3px',\n        background: 'black',\n        border: '2px solid #999',\n        cursor: 'pointer',\n    };\n})(errorsPanel = exports.errorsPanel || (exports.errorsPanel = {}));\n/**\n * Used by all our modals\n */\nvar modal;\n(function (modal) {\n    /** Keyboard shortcuts */\n    modal.keyStrokeStyle = {\n        fontSize: '0.9rem',\n        background: '#111',\n        paddingTop: '1px',\n        paddingBottom: '1px',\n        paddingLeft: '4px',\n        paddingRight: '4px',\n        borderRadius: '5px',\n        border: '2px solid'\n    };\n    /** Big input */\n    modal.inputStyleBase = {\n        backgroundColor: 'rgb(42,42,42)',\n        color: 'white',\n        outline: 'none',\n        padding: '2px',\n        fontSize: '1.5rem',\n        lineHeight: '2rem',\n        fontFamily: 'monospace',\n        border: '3px solid #3C3C3C',\n        transition: 'border .2s',\n        '&:focus': {\n            boxShadow: '0px 0px 1px 1px #3C3C3C'\n        }\n    };\n    /** The container around code samples */\n    modal.previewContainerStyle = {\n        background: exports.tabHeader.background,\n        padding: '5px',\n    };\n})(modal = exports.modal || (exports.modal = {}));\n/** Sometimes we need a keyboard input to handle our keyboard events but not be visible in any way */\nexports.hiddenInput = {\n    height: '0px',\n    width: '0px',\n    color: 'transparent',\n    background: 'transparent',\n    position: 'absolute',\n    top: '0px'\n};\nvar Input;\n(function (Input) {\n    Input.inputBlackStyleBase = {\n        backgroundColor: '#333',\n        color: 'white',\n        outline: 'none',\n        padding: '2px',\n        border: '2px solid #3C3C3C',\n        transition: 'border .2s',\n        '&:focus': {\n            border: '2px solid #0099E0',\n            boxShadow: '0px 0px 1px 1px #0099E0'\n        }\n    };\n})(Input = exports.Input || (exports.Input = {}));\n/**\n * Some views have tips at the bottom. This for that\n */\nvar Tip;\n(function (Tip) {\n    Tip.root = csx.extend({\n        color: 'grey',\n        lineHeight: '1.5rem',\n        fontSize: '.8rem',\n    }, exports.padded1);\n    Tip.keyboardShortCutStyle = {\n        border: '2px solid',\n        borderRadius: '6px',\n        padding: '2px',\n        backgroundColor: 'black',\n    };\n})(Tip = exports.Tip || (exports.Tip = {}));\n/**\n * For when you don't want anything on focus\n */\nexports.noFocusOutlineBase = {\n    \"&:focus\": {\n        outline: 'none'\n    }\n};\n/**\n * When you want text ellipsis\n * Note: whitespace no wrap is significant\n * Note: you probably want a limited width on the parent\n */\nexports.ellipsis = {\n    overflow: 'hidden',\n    textOverflow: 'ellipsis',\n    whiteSpace: 'nowrap'\n};\n","/home/travis/build/npmtest/node-npmtest-alm/node_modules/alm/src/app/base/csx.js":"/**\n * Provides useful `style` primitives\n */\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction extend() {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n    }\n    // Defend against user error\n    for (var _a = 0, args_1 = args; _a < args_1.length; _a++) {\n        var obj = args_1[_a];\n        if (obj instanceof Array) {\n            throw new Error(\"User error: use extend(a,b) instead of extend([a,b]). Object: \" + obj);\n        }\n    }\n    var newObj = {};\n    for (var _b = 0, args_2 = args; _b < args_2.length; _b++) {\n        var obj = args_2[_b];\n        for (var key in obj) {\n            //copy all the fields\n            newObj[key] = obj[key];\n        }\n    }\n    return newObj;\n}\nexports.extend = extend;\n;\n/** If you have more than one child prefer horizontal,vertical */\nexports.flexRoot = {\n    display: 'flex',\n};\n/**\n * A general grouping component that has no impact on the parent flexbox properties e.g.\n * <vertical>\n *    <pass>\n *       <content/>\n *    </pass>\n * </vertical>\n */\nexports.pass = {\n    display: 'inherit',\n    flexDirection: 'inherit',\n    flexGrow: 1,\n};\nexports.inlineRoot = {\n    display: 'inline-flex'\n};\nexports.horizontal = extend(exports.flexRoot, {\n    flexDirection: 'row'\n});\nexports.vertical = extend(exports.flexRoot, {\n    flexDirection: 'column'\n});\nexports.wrap = {\n    flexWrap: 'wrap'\n};\nexports.flexNone = {\n    flex: 'none'\n};\n/**\n * If you want items to be sized automatically by their children use this\n * This is because of a bug in various flexbox implementations: http://philipwalton.com/articles/normalizing-cross-browser-flexbox-bugs/\n */\nexports.content = {\n    flexShrink: 0\n};\nexports.flex = {\n    flex: 1\n};\nexports.flex1 = exports.flex;\nexports.flex2 = {\n    flex: 2\n};\nexports.flex3 = {\n    flex: 3\n};\nexports.flex4 = {\n    flex: 4\n};\nexports.flex5 = {\n    flex: 5\n};\nexports.flex6 = {\n    flex: 6\n};\nexports.flex7 = {\n    flex: 7\n};\nexports.flex8 = {\n    flex: 8\n};\nexports.flex9 = {\n    flex: 9\n};\nexports.flex10 = {\n    flex: 10\n};\nexports.flex11 = {\n    flex: 11\n};\nexports.flex12 = {\n    flex: 12\n};\n/////////////////////////////\n// Alignment in cross axis //\n/////////////////////////////\nexports.start = {\n    alignItems: 'flex-start'\n};\nexports.center = {\n    alignItems: 'center'\n};\nexports.end = {\n    alignItems: 'flex-end'\n};\n////////////////////////////\n// Alignment in main axis //\n////////////////////////////\nexports.startJustified = {\n    justifyContent: 'flex-start'\n};\nexports.centerJustified = {\n    justifyContent: 'center'\n};\nexports.endJustified = {\n    justifyContent: 'flex-end'\n};\nexports.aroundJustified = {\n    justifyContent: 'space-around'\n};\nexports.betweenJustified = {\n    justifyContent: 'space-between'\n};\n////////////////////////////\n// Alignment in both axes //\n////////////////////////////\nexports.centerCenter = extend(exports.flexRoot, exports.center, exports.centerJustified);\n////////////////////\n// Self alignment //\n////////////////////\nexports.selfStart = {\n    alignSelf: 'flex-start'\n};\nexports.selfCenter = {\n    alignSelf: 'center'\n};\nexports.selfEnd = {\n    alignSelf: 'flex-end'\n};\nexports.selfStretch = {\n    alignSelf: 'stretch'\n};\n//////////////////\n// Other layout //\n//////////////////\nexports.block = {\n    display: 'block'\n};\nexports.hidden = {\n    display: 'none'\n};\nexports.invisible = {\n    visibility: 'hidden'\n};\nexports.relative = {\n    position: 'relative'\n};\nexports.fit = {\n    position: 'absolute',\n    top: 0,\n    right: 0,\n    bottom: 0,\n    left: 0,\n};\nexports.fullBleedBody = {\n    margin: 0,\n    height: '100vh'\n};\nexports.scroll = {\n    overflow: 'auto'\n};\n////////////////////\n// Fixed position //\n////////////////////\n/**\n * You don't generally need to use this.\n * Instead use fixedBottom,fixedLeft,fixedRight,fixedTop\n */\nexports.fixed = {\n    position: 'fixed'\n};\nexports.fixedTop = extend(exports.fixed, {\n    top: 0,\n    left: 0,\n    right: 0,\n});\nexports.fixedRight = extend(exports.fixed, {\n    top: 0,\n    right: 0,\n    bottom: 0,\n});\nexports.fixedBottom = extend(exports.fixed, {\n    right: 0,\n    bottom: 0,\n    left: 0,\n});\nexports.fixedLeft = extend(exports.fixed, {\n    top: 0,\n    bottom: 0,\n    left: 0,\n});\n//////////////////\n// A new layer  //\n//////////////////\n/**\n * New Layer parent\n */\nexports.newLayerParent = {\n    position: 'relative',\n};\n/**\n *  You can have this anywhere and its like you have opened a new body\n *  This new layer will attach itself to the nearest parent with `position:relative` or `position:absolute` (which is what a new layer is by itself)\n */\nexports.newLayer = {\n    position: 'absolute',\n    left: 0,\n    right: 0,\n    top: 0,\n    bottom: 0,\n};\n/**\n * Box helpers\n * Having top, left, bottom, right seperated makes it easier to override and maintain individual properties\n */\nvar Box;\n(function (Box) {\n    function boxUnitToString(value) {\n        if (typeof value === 'number') {\n            return value.toString() + 'px';\n        }\n        else {\n            return value;\n        }\n    }\n    /**\n     * Takes a function that expects Box to be passed into it\n     * and creates a BoxFunction\n     */\n    function createBoxFunction(mapFromBox) {\n        var result = function (a, b, c, d) {\n            if (b === undefined && c === undefined && d === undefined) {\n                b = c = d = a;\n            }\n            else if (c === undefined && d === undefined) {\n                c = a;\n                d = b;\n            }\n            var box = {\n                top: boxUnitToString(a),\n                right: boxUnitToString(b),\n                bottom: boxUnitToString(c),\n                left: boxUnitToString(d)\n            };\n            return mapFromBox(box);\n        };\n        return result;\n    }\n    Box.padding = createBoxFunction(function (box) {\n        return {\n            paddingTop: box.top,\n            paddingRight: box.right,\n            paddingBottom: box.bottom,\n            paddingLeft: box.left\n        };\n    });\n    Box.margin = createBoxFunction(function (box) {\n        return {\n            marginTop: box.top,\n            marginRight: box.right,\n            marginBottom: box.bottom,\n            marginLeft: box.left\n        };\n    });\n    Box.border = createBoxFunction(function (box) {\n        return {\n            borderTop: box.top,\n            borderRight: box.right,\n            borderBottom: box.bottom,\n            borderLeft: box.left\n        };\n    });\n})(Box = exports.Box || (exports.Box = {}));\n/**\n * Flexbox Primitives with fallbacks\n * Because of the `fallbacks` (arrays and vendor prefixes) these should only be used in css generation (not raw styles)\n * E.g. `free-style` can use these to generate style sheets\n * NOTE:\n * -webkit- is needed for mobile safari (iPad)\n */\nvar vendorPrefixed;\n(function (vendorPrefixed) {\n    /** If you have more than one child prefer horizontal,vertical */\n    vendorPrefixed.flexRoot = {\n        display: ['-webkit-flex', 'flex']\n    };\n    vendorPrefixed.content = {\n        '-webkit-flex-shrink': 0,\n        flexShrink: 0,\n    };\n    vendorPrefixed.pass = {\n        display: 'inherit',\n        '-webkit-flex-direction': 'pass',\n        flexDirection: 'inherit',\n        '-webkit-flex-grow': 1,\n        flexGrow: 1,\n    };\n    vendorPrefixed.flex = {\n        '-webkit-flex': 1,\n        flex: 1,\n    };\n    vendorPrefixed.horizontal = extend(vendorPrefixed.flexRoot, {\n        '-webkit-flex-direction': 'row',\n        flexDirection: 'row',\n    });\n    vendorPrefixed.vertical = extend(vendorPrefixed.flexRoot, {\n        '-webkit-flex-direction': 'column',\n        flexDirection: 'column',\n    });\n    vendorPrefixed.selfCenter = {\n        '-webkit-align-self': 'center',\n        alignSelf: 'center',\n    };\n    vendorPrefixed.center = {\n        '-webkit-align-items': 'center',\n        alignItems: 'center'\n    };\n    vendorPrefixed.centerJustified = {\n        '-webkit-justify-content': 'center',\n        justifyContent: 'center'\n    };\n    vendorPrefixed.centerCenter = extend(vendorPrefixed.flexRoot, vendorPrefixed.center, vendorPrefixed.centerJustified);\n    vendorPrefixed.scroll = {\n        '-webkit-overflow-scrolling': 'touch',\n        overflow: 'auto'\n    };\n})(vendorPrefixed = exports.vendorPrefixed || (exports.vendorPrefixed = {}));\n","/home/travis/build/npmtest/node-npmtest-alm/node_modules/alm/src/app/pendingRequestsIndicator.js":"\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar React = require(\"react\");\nvar ui_1 = require(\"./ui\");\nvar react_redux_1 = require(\"react-redux\");\nvar ui = require(\"./ui\");\nrequire('./pendingRequestsIndicator.css');\nvar PendingRequestsIndicator = (function (_super) {\n    __extends(PendingRequestsIndicator, _super);\n    function PendingRequestsIndicator() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.handleClick = function () {\n            console.log(_this.props.pendingRequests);\n            ui.notifyInfoNormalDisappear(\"Pending Requests: \" + _this.props.pendingRequests.join(' 🚴 '));\n        };\n        return _this;\n    }\n    PendingRequestsIndicator.prototype.componentWillReceiveProps = function () {\n    };\n    PendingRequestsIndicator.prototype.render = function () {\n        var pendingRequestsCount = this.props.pendingRequests.length;\n        var style = {\n            opacity: pendingRequestsCount ? 1 : 0,\n            transition: 'opacity .5s',\n            cursor: 'pointer'\n        };\n        var pendingRequestCountStyle = {\n            fontSize: '7px',\n            paddingRight: '2px',\n            color: '#2776b7'\n        };\n        return (React.createElement(\"span\", { style: style, onClick: this.handleClick },\n            React.createElement(\"span\", { style: pendingRequestCountStyle }, pendingRequestsCount),\n            React.createElement(\"span\", { className: \"loader\" },\n                React.createElement(\"ul\", null,\n                    React.createElement(\"li\", { className: \"one\" }),\n                    React.createElement(\"li\", { className: \"two\" }),\n                    React.createElement(\"li\", { className: \"three\" }),\n                    React.createElement(\"li\", { className: \"four\" }),\n                    React.createElement(\"li\", { className: \"five\" })))));\n    };\n    return PendingRequestsIndicator;\n}(ui_1.BaseComponent));\nPendingRequestsIndicator = __decorate([\n    react_redux_1.connect(function (state) {\n        return {\n            pendingRequests: state.pendingRequests,\n        };\n    })\n], PendingRequestsIndicator);\nexports.PendingRequestsIndicator = PendingRequestsIndicator;\n","/home/travis/build/npmtest/node-npmtest-alm/node_modules/alm/src/app/root.js":"\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar React = require(\"react\");\nvar ui = require(\"./ui\");\nvar uix = require(\"./uix\");\nvar csx = require(\"./base/csx\");\nvar appTabsContainer_1 = require(\"./tabs/v2/appTabsContainer\");\nvar Modal = require('react-modal');\nvar omniSearch_1 = require(\"./omniSearch/omniSearch\");\nvar fileTree_1 = require(\"./fileTree\");\nvar selectListView_1 = require(\"./selectListView\");\nvar inputDialog_1 = require(\"./dialogs/inputDialog\");\nvar serverExit_1 = require(\"./serverExit/serverExit\");\nvar statusBar_1 = require(\"./statusBar\");\nvar mainPanel_1 = require(\"./mainPanel\");\nvar findAndReplace_1 = require(\"./findAndReplace\");\n/** Force require  */\nvar gotoHistory = require(\"./gotoHistory\");\nvar clipboardRing = require(\"./clipboardRing\");\nvar configCreator = require(\"./configCreator/configCreator\");\nvar settings = require(\"./settings/settings\");\nvar openFileFromServerDisk = require(\"./commands/general/openFileFromServerDisk\");\nvar gitAddAllCommitAndPush = require(\"./commands/general/gitAddAllCommitAndPush\");\nvar gitFetchLatestAndRebase = require(\"./commands/general/gitFetchLatestAndRebase\");\nvar ensureImport = gotoHistory\n    || configCreator\n    || settings\n    || openFileFromServerDisk\n    || gitAddAllCommitAndPush\n    || gitFetchLatestAndRebase\n    || clipboardRing;\nvar Root = (function (_super) {\n    __extends(Root, _super);\n    function Root(props) {\n        var _this = _super.call(this, props) || this;\n        _this.toggle = function () {\n            _this.refs.leftNav.toggle();\n        };\n        _this.state = {};\n        return _this;\n    }\n    Root.prototype.componentDidMount = function () {\n        uix.setup();\n    };\n    Root.prototype.render = function () {\n        var toret = React.createElement(\"div\", { id: \"root\", style: csx.vertical },\n            React.createElement(omniSearch_1.OmniSearch, null),\n            React.createElement(serverExit_1.ServerExit, null),\n            React.createElement(selectListView_1.SelectListView, null),\n            React.createElement(inputDialog_1.InputDialog, null),\n            React.createElement(\"div\", { style: csx.extend(csx.flex, csx.horizontal) },\n                React.createElement(fileTree_1.FileTree, null),\n                React.createElement(appTabsContainer_1.AppTabsContainer, null)),\n            React.createElement(findAndReplace_1.FindAndReplace, null),\n            React.createElement(mainPanel_1.MainPanel, null),\n            React.createElement(statusBar_1.StatusBar, { ref: \"statusBar\" }));\n        return toret;\n    };\n    return Root;\n}(ui.BaseComponent));\nexports.Root = Root;\n","/home/travis/build/npmtest/node-npmtest-alm/node_modules/alm/src/app/selectListView.js":"\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Provides a simple Select list view style API\n * similar to atom space pen views\n */\nvar React = require(\"react\");\nvar ReactDOM = require(\"react-dom\");\nvar csx = require(\"./base/csx\");\nvar ui_1 = require(\"./ui\");\nvar Modal = require(\"react-modal\");\nvar styles = require(\"./styles/styles\");\nvar utils_1 = require(\"../common/utils\");\nvar commands = require(\"./commands/commands\");\nvar fuzzaldrin_1 = require(\"fuzzaldrin\");\nvar utils = require(\"../common/utils\");\nvar typestyle = require(\"typestyle\");\nvar inputClassName = typestyle.style(styles.modal.inputStyleBase);\nvar SelectListView = (function (_super) {\n    __extends(SelectListView, _super);\n    function SelectListView(props) {\n        var _this = _super.call(this, props) || this;\n        _this.maxShowCount = 15;\n        _this.closeOmniSearch = function () {\n            _this.setState({ isOpen: false, filterValue: '' });\n        };\n        _this.onChangeFilter = utils_1.debounce(function (e) {\n            var filterValue = ReactDOM.findDOMNode(_this.refs.omniSearchInput).value;\n            _this.getNewData().then(function () {\n                _this.filteredResults = getFilteredItems({\n                    items: _this.state.data,\n                    textify: _this.state.textify,\n                    filterValue: filterValue\n                });\n                _this.filteredResults = _this.filteredResults.slice(0, _this.maxShowCount);\n                _this.setState({ filterValue: filterValue, selectedIndex: 0 });\n            });\n        }, 50);\n        _this.incrementSelected = utils_1.debounce(function () {\n            _this.setState({ selectedIndex: utils_1.rangeLimited({ num: ++_this.state.selectedIndex, min: 0, max: Math.min(_this.maxShowCount - 1, _this.filteredResults.length - 1), loopAround: true }) });\n        }, 0, true);\n        _this.decrementSelected = utils_1.debounce(function () {\n            _this.setState({ selectedIndex: utils_1.rangeLimited({ num: --_this.state.selectedIndex, min: 0, max: Math.min(_this.maxShowCount - 1, _this.filteredResults.length - 1), loopAround: true }) });\n        }, 0, true);\n        _this.onChangeSelected = function (e) {\n            if (e.key == 'ArrowUp') {\n                e.preventDefault();\n                _this.decrementSelected();\n            }\n            if (e.key == 'ArrowDown') {\n                e.preventDefault();\n                _this.incrementSelected();\n            }\n            if (e.key == 'Enter') {\n                e.preventDefault();\n                _this.selectIndex(_this.state.selectedIndex);\n            }\n        };\n        _this.selectIndex = function (index) {\n            var result = _this.filteredResults[index];\n            _this.state.onSelect(result);\n            _this.closeOmniSearch();\n        };\n        _this.getNewData = utils.onlyLastCall(function () {\n            var filterValue = ReactDOM.findDOMNode(_this.refs.omniSearchInput).value;\n            return _this.state.getNewData(filterValue).then(function (data) {\n                _this.setState({ data: data });\n            });\n        });\n        _this.filteredResults = [];\n        _this.state = {\n            isOpen: false,\n            selectedIndex: 0,\n            header: '',\n            data: [],\n        };\n        return _this;\n    }\n    /*\n    API sample usage\n        this.refs.selectListView.show<ActiveProjectConfigDetails>({\n        header: 'Select the active project',\n        data: availableProjects,\n        render: (d,highlitedText) => <div>{highlitedText}</div>,\n        textify: (d) => d.name,\n        onSelect: (d) => {\n            server.setActiveProjectName({ name: d.name });\n            state.setActiveProject(d.name);\n            state.setInActiveProject(types.TriState.Unknown);\n        }\n    });\n    */\n    /**\n     * The main interaction API\n     */\n    SelectListView.prototype.show = function (args) {\n        this.filteredResults = args.data.concat([]);\n        this.setState({\n            isOpen: true,\n            filterValue: '',\n            selectedIndex: 0,\n            header: args.header,\n            data: args.data,\n            render: args.render,\n            textify: args.textify,\n            onSelect: args.onSelect,\n            getNewData: args.getNewData || (function () { return Promise.resolve(args.data); }),\n        });\n        ReactDOM.findDOMNode(this.refs.omniSearchInput).focus();\n    };\n    SelectListView.prototype.componentDidMount = function () {\n        var _this = this;\n        exports.selectListView = this;\n        commands.esc.on(function () {\n            _this.closeOmniSearch();\n        });\n    };\n    SelectListView.prototype.componentDidUpdate = function () {\n        var _this = this;\n        // get the dom node that is selected\n        // make sure its parent scrolls to make this visible\n        setTimeout(function () {\n            if (_this.refs.selected) {\n                var selected = _this.refs.selected;\n                selected.scrollIntoViewIfNeeded(false);\n            }\n        });\n    };\n    SelectListView.prototype.render = function () {\n        var _this = this;\n        var fileList = this.filteredResults;\n        var selectedIndex = this.state.selectedIndex;\n        var fileListRendered = fileList.map(function (item, i) {\n            // key = i\n            var selected = selectedIndex === i;\n            var selectedStyle = selected ? {\n                background: '#545454',\n                color: 'white'\n            } : {};\n            var ref = selected && \"selected\";\n            return (React.createElement(\"div\", { key: i, style: csx.extend(selectedStyle, styles.padded2, styles.hand, csx.content), onClick: function () { return _this.selectIndex(i); }, ref: ref }, _this.state.render(item, renderMatchedSegments(_this.state.textify(item), _this.state.filterValue))));\n        });\n        return React.createElement(Modal, { isOpen: this.state.isOpen, onRequestClose: this.closeOmniSearch },\n            React.createElement(\"div\", { style: csx.extend(csx.vertical, csx.flex) },\n                React.createElement(\"div\", { style: csx.extend(csx.horizontal, csx.content) },\n                    React.createElement(\"h4\", null, this.state.header),\n                    React.createElement(\"div\", { style: csx.flex }),\n                    React.createElement(\"div\", { style: { fontSize: '0.9rem', color: 'grey' } },\n                        React.createElement(\"code\", { style: styles.modal.keyStrokeStyle }, \"Esc\"),\n                        \" to exit \",\n                        React.createElement(\"code\", { style: styles.modal.keyStrokeStyle }, \"Enter\"),\n                        \" to select\")),\n                React.createElement(\"div\", { style: csx.extend(styles.padded1TopBottom, csx.vertical, csx.content) },\n                    React.createElement(\"input\", { type: \"text\", ref: \"omniSearchInput\", placeholder: \"Filter\", className: inputClassName, onChange: this.onChangeFilter, onKeyDown: this.onChangeSelected })),\n                React.createElement(\"div\", { style: csx.extend(csx.vertical, csx.flex, { overflow: 'auto' }) },\n                    React.createElement(\"div\", { style: csx.vertical }, fileListRendered))));\n    };\n    return SelectListView;\n}(ui_1.BaseComponent));\nexports.SelectListView = SelectListView;\n/**\n * Applies fuzzy filter to the text version of each item returning the matched items\n */\nfunction getFilteredItems(args) {\n    // Store the items for each text value\n    var textValueToItems = Object.create(null);\n    args.items.forEach(function (item) {\n        var text = args.textify(item);\n        if (!textValueToItems[text])\n            textValueToItems[text] = [];\n        textValueToItems[text].push(item);\n    });\n    // Get the unique text values\n    var textValues = Object.keys(utils.createMap(args.items.map(args.textify)));\n    // filter them\n    var filteredTextValues = fuzzaldrin_1.filter(textValues, args.filterValue);\n    return utils.selectMany(filteredTextValues.map(function (textvalue) { return textValueToItems[textvalue]; }));\n}\nexports.getFilteredItems = getFilteredItems;\n/**\n * Based on https://github.com/atom/fuzzy-finder/blob/51f1f2415ecbfab785596825a011c1d2fa2658d3/lib/fuzzy-finder-view.coffee#L56-L74\n */\nfunction renderMatchedSegments(result, query) {\n    // local function that creates the *matched segment* data structure\n    function getMatchedSegments(result, query) {\n        var matches = fuzzaldrin_1.match(result, query);\n        var matchMap = utils_1.createMap(matches);\n        // collapse contiguous sections into a single `<strong>`\n        var currentUnmatchedCharacters = [];\n        var currentMatchedCharacters = [];\n        var combined = [];\n        function closeOffUnmatched() {\n            if (currentUnmatchedCharacters.length) {\n                combined.push({ str: currentUnmatchedCharacters.join(''), matched: false });\n                currentUnmatchedCharacters = [];\n            }\n        }\n        function closeOffMatched() {\n            if (currentMatchedCharacters.length) {\n                combined.push({ str: currentMatchedCharacters.join(''), matched: true });\n                currentMatchedCharacters = [];\n            }\n        }\n        result.split('').forEach(function (c, i) {\n            var isMatched = matchMap[i];\n            if (isMatched) {\n                if (currentMatchedCharacters.length) {\n                    currentMatchedCharacters.push(c);\n                }\n                else {\n                    currentMatchedCharacters = [c];\n                    // close off any unmatched characters\n                    closeOffUnmatched();\n                }\n            }\n            else {\n                if (currentUnmatchedCharacters.length) {\n                    currentUnmatchedCharacters.push(c);\n                }\n                else {\n                    currentUnmatchedCharacters = [c];\n                    // close off any matched characters\n                    closeOffMatched();\n                }\n            }\n        });\n        closeOffMatched();\n        closeOffUnmatched();\n        return combined;\n    }\n    /**\n     * Rendering the matched segment data structure is trivial\n     */\n    var matched = getMatchedSegments(result, query);\n    var matchedStyle = { fontWeight: 'bold', color: '#66d9ef' };\n    return matched.map(function (item, i) {\n        return React.createElement(\"span\", { key: i, style: item.matched ? matchedStyle : {} }, item.str);\n    });\n}\nexports.renderMatchedSegments = renderMatchedSegments;\n","/home/travis/build/npmtest/node-npmtest-alm/node_modules/alm/src/app/statusBar.js":"\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar utils = require(\"../common/utils\");\nvar styles = require(\"./styles/styles\");\nvar React = require(\"react\");\nvar ReactDOMServer = require(\"react-dom/server\");\nvar csx = require(\"./base/csx\");\nvar ui_1 = require(\"./ui\");\nvar ui = require(\"./ui\");\nvar commands = require(\"./commands/commands\");\nvar types = require(\"../common/types\");\nvar pendingRequestsIndicator_1 = require(\"./pendingRequestsIndicator\");\nvar icon_1 = require(\"./components/icon\");\nvar appTabsContainer_1 = require(\"./tabs/v2/appTabsContainer\");\nvar progress_1 = require(\"./components/progress\");\nvar react_redux_1 = require(\"react-redux\");\nvar state_1 = require(\"./state/state\");\nvar state = require(\"./state/state\");\nvar globalErrorCacheClient_1 = require(\"./globalErrorCacheClient\");\nvar clientTestResultsCache_1 = require(\"./clientTestResultsCache\");\nvar notificationKeyboardStyle = {\n    border: '2px solid',\n    borderRadius: '6px',\n    display: 'inline-block',\n    padding: '5px',\n    background: 'grey',\n};\nvar ouputStatusStyle = csx.extend(styles.noSelect, { fontSize: '.6rem' });\nvar activeProjectContainerStyle = csx.extend(styles.statusBarSection, styles.hand, styles.noSelect, {\n    border: '1px solid grey',\n    paddingTop: '2px',\n    paddingBottom: '2px',\n    paddingLeft: '4px',\n    paddingRight: '4px',\n    fontSize: '.7rem',\n    marginTop: '1px',\n});\nvar projectTipKeboard = ReactDOMServer.renderToString(React.createElement(\"div\", { style: notificationKeyboardStyle }, \"Alt+Shift+P\"));\nvar StatusBar = (function (_super) {\n    __extends(StatusBar, _super);\n    function StatusBar(props) {\n        var _this = _super.call(this, props) || this;\n        _this.toggleErrors = function () {\n            if (_this.props.errorsExpanded) {\n                state_1.collapseErrors({});\n            }\n            else {\n                state_1.expandErrors({});\n            }\n        };\n        _this.toggleFileTree = function () {\n            if (_this.props.fileTreeShown) {\n                state.collapseFileTree({});\n            }\n            else {\n                state.expandFileTree({});\n            }\n        };\n        _this.openErrorLocation = function (error) {\n            commands.doOpenOrFocusFile.emit({ filePath: error.filePath, position: error.from });\n        };\n        _this.openFile = function (filePath) {\n            commands.doOpenOrFocusFile.emit({ filePath: filePath });\n        };\n        _this.giveStar = function () {\n            window.open('https://github.com/alm-tools/alm');\n        };\n        _this.giveRose = function () {\n            window.open('https://twitter.com/basarat');\n        };\n        _this.whatsNew = function () {\n            /** We currently show the diff. Once we have semantic releases we will show release notes */\n            var update = serverState.update;\n            window.open(\"https://github.com/alm-tools/alm/compare/v\" + update.current + \"...v\" + update.latest);\n        };\n        _this.state = {};\n        return _this;\n    }\n    StatusBar.prototype.componentDidMount = function () {\n        var _this = this;\n        exports.statusBar = this;\n        appTabsContainer_1.tabStateChanged.on(function () { return _this.forceUpdate(); });\n        globalErrorCacheClient_1.errorsCache.errorsDelta.on(function () { return _this.forceUpdate(); });\n        clientTestResultsCache_1.testResultsCache.testResultsDelta.on(function () { return _this.forceUpdate(); });\n    };\n    StatusBar.prototype.render = function () {\n        var _this = this;\n        var tab = appTabsContainer_1.tabState.getSelectedTab();\n        var filePath = tab && utils.getFilePathFromUrl(tab.url);\n        var protocol = tab && utils.getFilePathAndProtocolFromUrl(tab.url).protocol;\n        var activeProjectDetails = this.props.activeProject\n            ? React.createElement(\"span\", { className: \"hint--top-right\", \"data-hint\": \"Active Project path. Click to open project file\", style: activeProjectContainerStyle, onClick: function () {\n                    _this.openFile(_this.props.activeProject.tsconfigFilePath);\n                    ui.notifyInfoNormalDisappear(\"TIP : You can change the active project using project search <br/> <br/> \" + projectTipKeboard, { onClick: function () { return commands.omniSelectProject.emit({}); } });\n                } },\n                React.createElement(\"span\", { style: csx.extend(styles.noSelect, styles.statusBarSuccess, styles.hand, { marginRight: '5px' }) },\n                    React.createElement(icon_1.Icon, { name: \"heartbeat\" })),\n                this.props.activeProject.isVirtual && React.createElement(\"span\", { style: csx.extend(styles.noSelect, styles.statusBarSuccess, styles.hand, { marginRight: '5px' }) },\n                    React.createElement(icon_1.Icon, { name: \"blind\" })),\n                this.props.activeProject.name)\n            : React.createElement(\"span\", { className: \"hint--top-right\", style: csx.extend(styles.statusBarSection, styles.noSelect, styles.statusBarError, styles.hand), onClick: function () { return ui.notifyWarningNormalDisappear(\"There is no active project. Please select from the available ones <br/> <br/> \" + projectTipKeboard, { onClick: function () { return commands.omniSelectProject.emit({}); } }); }, \"data-hint\": \"There is no active TypeScript project. Robots deactivated.\" },\n                React.createElement(icon_1.Icon, { name: \"heartbeat\" }));\n        var inActiveProjectSection = !tab\n            ? ''\n            : React.createElement(\"span\", { style: styles.statusBarSection }, state.inActiveProjectUrl(tab.url)\n                ? React.createElement(\"span\", { className: \"hint--top-right hint--success\", style: csx.extend(styles.noSelect, styles.statusBarSuccess, styles.hand), onClick: function () { return ui.notifySuccessNormalDisappear(\"The file is a part of the currently active TypeScript project and we are actively providing code intelligence\"); }, \"data-hint\": \"File is part of the currently active project. 💻 providing code intelligence.\" },\n                    React.createElement(icon_1.Icon, { name: \"eye\" }))\n                : React.createElement(\"span\", { className: \"hint--top-right\", style: csx.extend(styles.noSelect, styles.statusBarError, styles.hand), onClick: function () { return ui.notifyWarningNormalDisappear(\"The file is not a part of the currently active TypeScript project <br/> <br/> \" + projectTipKeboard, { onClick: function () { return commands.omniSelectProject.emit({}); } }); }, \"data-hint\": \"File is not a part of the currently active project. Robots deactivated.\" },\n                    React.createElement(icon_1.Icon, { name: \"eye-slash\" })));\n        var fileOutput = protocol !== 'file' ? null\n            : !this.props.outputStatusCache[filePath] ? null\n                : this.props.outputStatusCache[filePath];\n        var fileOutputState = fileOutput && fileOutput.state;\n        var openOutputJSFile = function () {\n            commands.doToggleFileTab.emit({ filePath: fileOutput.outputFilePath });\n        };\n        var fileOutputStateRendered = !!fileOutputState\n            && React.createElement(\"span\", { style: styles.statusBarSection },\n                React.createElement(\"span\", { style: csx.extend(ouputStatusStyle) }, fileOutputState === types.JSOutputState.NoJSFile ? null\n                    : fileOutputState === types.JSOutputState.JSOutOfDate ? React.createElement(\"span\", { style: csx.extend(styles.statusBarError, { transition: 'color .5s', cursor: 'pointer' }), onClick: openOutputJSFile }, \"\\u274C JS Outdated\")\n                        : React.createElement(\"span\", { style: csx.extend(styles.statusBarSuccess, { transition: 'color .5s', cursor: 'pointer' }), onClick: openOutputJSFile }, \"\\u2713 JS Current\")));\n        var fileTreeToggleRendered = React.createElement(\"span\", { style: csx.extend(styles.statusBarSection, styles.noSelect, styles.hand), onClick: this.toggleFileTree, className: \"hint--top-right\", \"data-hint\": \"Click to toggle the file tree \\uD83C\\uDF32\" },\n            React.createElement(\"span\", { style: csx.extend(this.props.fileTreeShown ? { color: 'white' } : { color: 'grey' }, { transition: 'color .4s' }) },\n                React.createElement(icon_1.Icon, { name: \"tree\" })));\n        var updateRendered = serverState.update\n            && React.createElement(\"span\", { style: csx.extend(styles.statusBarSection) },\n                React.createElement(\"span\", { className: \"hint--left hint--error\", \"data-hint\": \"Update \" + serverState.update.latest + \" available (current: \" + serverState.update.current + \")\" + \". Please run `npm i -g alm`\" },\n                    React.createElement(icon_1.Icon, { style: { color: styles.errorColor, cursor: 'pointer' }, name: \"wrench\", onClick: this.whatsNew })));\n        var errorsUpdate = globalErrorCacheClient_1.errorsCache.getErrorsLimited();\n        var errorFilteringActive = this.props.errorsDisplayMode !== types.ErrorsDisplayMode.all || this.props.errorsFilter.trim();\n        var errorsFilteredCount = appTabsContainer_1.tabState.errorsByFilePathFiltered().errorsFlattened.length;\n        /** Tested */\n        var testResultsStats = clientTestResultsCache_1.testResultsCache.getStats();\n        var failing = !!testResultsStats.failCount;\n        var totalThatRan = testResultsStats.passCount + testResultsStats.failCount;\n        var testStatsRendered = !!testResultsStats.testCount && React.createElement(\"span\", { className: \"hint--top-right\", \"data-hint\": \"Test Total: \" + testResultsStats.testCount + \", Pass: \" + testResultsStats.passCount + \", Fail: \" + testResultsStats.failCount + \", Skip: \" + testResultsStats.skipCount + \", Duration: \" + utils.formatMilliseconds(testResultsStats.durationMs), style: csx.extend(activeProjectContainerStyle), onClick: function () {\n                commands.doOpenTestResultsView.emit({});\n            } },\n            React.createElement(\"span\", { style: csx.extend(styles.noSelect, failing ? styles.statusBarError : styles.statusBarSuccess, styles.hand, {\n                    marginRight: '5px',\n                    transition: '.4s color, .4s opacity',\n                    opacity: this.props.testedWorking.working ? 1 : 0.5,\n                }) },\n                React.createElement(icon_1.Icon, { name: styles.icons.tested, spin: this.props.testedWorking.working })),\n            failing\n                ? React.createElement(\"span\", { style: { color: styles.errorColor, fontWeight: 'bold' } },\n                    testResultsStats.failCount,\n                    \"/\",\n                    totalThatRan,\n                    \" fail\")\n                : React.createElement(\"span\", { style: { color: styles.successColor, fontWeight: 'bold' } },\n                    testResultsStats.passCount,\n                    \"/\",\n                    totalThatRan,\n                    \" pass\"));\n        return (React.createElement(\"div\", null,\n            React.createElement(\"div\", { style: csx.extend(styles.statusBar, csx.horizontal, csx.center, styles.noWrap) },\n                React.createElement(\"span\", { style: csx.extend(styles.statusBarSection, styles.noSelect, styles.hand), onClick: this.toggleErrors, className: \"hint--top-right\", \"data-hint\": errorsUpdate.totalCount + \" errors. Click to toggle message panel.\" },\n                    React.createElement(\"span\", { style: csx.extend(errorsUpdate.totalCount ? styles.statusBarError : styles.statusBarSuccess, { transition: 'color .4s' }) },\n                        errorsUpdate.totalCount,\n                        \" \",\n                        React.createElement(icon_1.Icon, { name: \"times-circle\" }),\n                        errorFilteringActive && ' ',\n                        errorFilteringActive && React.createElement(\"span\", null,\n                            \"( \",\n                            errorsFilteredCount,\n                            \" \",\n                            React.createElement(icon_1.Icon, { name: \"filter\" }),\n                            \")\"))),\n                React.createElement(\"span\", { style: csx.extend(styles.statusBarSection, styles.noSelect, styles.hand) },\n                    React.createElement(\"span\", { className: this.props.tsWorking.working ? \"hint--right hint--success\" : \"hint--right\", \"data-hint\": this.props.tsWorking.working ? \"TS Worker Busy\" : \"TS Worker Idle\", style: {\n                            color: this.props.tsWorking.working ? 'white' : 'grey',\n                            transition: 'color .4s'\n                        } },\n                        React.createElement(icon_1.Icon, { name: \"rocket\" }))),\n                testStatsRendered,\n                fileTreeToggleRendered,\n                activeProjectDetails,\n                inActiveProjectSection,\n                filePath\n                    ? React.createElement(\"span\", { className: \"hint--top-right\", \"data-hint\": \"Click to copy the file path to clipboard\", \"data-clipboard-text\": filePath.replace(/\\//g, commands.windows ? '\\\\' : '/'), onClick: function () { return ui.notifyInfoQuickDisappear(\"File path copied to clipboard\"); }, style: csx.extend(styles.statusBarSection, styles.noSelect, styles.hand) }, filePath)\n                    : '',\n                fileOutputStateRendered,\n                React.createElement(\"span\", { style: csx.flex }),\n                React.createElement(\"span\", { style: csx.extend(styles.statusBarSection) },\n                    React.createElement(pendingRequestsIndicator_1.PendingRequestsIndicator, null)),\n                this.props.liveBuildResults.builtCount !== this.props.liveBuildResults.totalCount &&\n                    React.createElement(\"span\", { style: csx.extend(styles.statusBarSection) },\n                        React.createElement(progress_1.Progress, { current: this.props.liveBuildResults.builtCount, total: this.props.liveBuildResults.totalCount },\n                            this.props.liveBuildResults.builtCount,\n                            \" / \",\n                            this.props.liveBuildResults.totalCount)),\n                React.createElement(\"span\", { style: csx.extend(styles.statusBarSection) }, this.props.socketConnected ?\n                    React.createElement(\"span\", { className: \"hint--left hint--success\", \"data-hint\": \"Connected to server\" },\n                        \" \",\n                        React.createElement(icon_1.Icon, { style: { color: styles.successColor, cursor: 'pointer' }, name: \"flash\", onClick: function () { return ui.notifySuccessNormalDisappear(\"Connected to alm server\"); } }))\n                    : React.createElement(\"span\", { className: \"hint--left hint--error\", \"data-hint\": \"Disconnected from server\" },\n                        \" \",\n                        React.createElement(icon_1.Icon, { style: { color: styles.errorColor, cursor: 'pointer' }, name: \"spinner\", spin: true, onClick: function () { return ui.notifyWarningNormalDisappear(\"Disconneted from alm server\"); } }))),\n                React.createElement(\"span\", { style: csx.extend(styles.statusBarSection, styles.noSelect, styles.hand) },\n                    React.createElement(\"span\", { style: { paddingRight: '2px' }, onClick: this.giveStar, className: \"hint--left\", \"data-hint\": \"If you like it then you should have put a star on it \\uD83C\\uDF1F. Also, go here for support. Version: \" + serverState.version }, \"\\uD83C\\uDF1F\"),\n                    React.createElement(\"span\", { onClick: this.giveRose, className: \"hint--left\", \"data-hint\": \"Your love keep this rose alive 🌹\" }, \"\\uD83C\\uDF39\")),\n                updateRendered)));\n    };\n    return StatusBar;\n}(ui_1.BaseComponent));\nStatusBar = __decorate([\n    react_redux_1.connect(function (state) {\n        return {\n            errorsExpanded: state.errorsExpanded,\n            activeProject: state.activeProject,\n            activeProjectFiles: state.activeProjectFilePathTruthTable,\n            socketConnected: state.socketConnected,\n            outputStatusCache: state.outputStatusCache,\n            liveBuildResults: state.liveBuildResults,\n            fileTreeShown: state.fileTreeShown,\n            errorsDisplayMode: state.errorsDisplayMode,\n            errorsFilter: state.errorsFilter,\n            tsWorking: state.tsWorking,\n            testedWorking: state.testedWorking,\n        };\n    }),\n    __metadata(\"design:paramtypes\", [Object])\n], StatusBar);\nexports.StatusBar = StatusBar;\n","/home/travis/build/npmtest/node-npmtest-alm/node_modules/alm/src/app/trueMain.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Load up TypeScript\n */\nvar _ts = require(\"byots\");\nvar ensureImport = _ts;\n/**\n * The main entry point for the front end\n */\nvar root_1 = require(\"./root\");\nvar commands = require(\"./commands/commands\");\nvar React = require(\"react\");\nvar ReactDOM = require(\"react-dom\");\nvar ReactDOMServer = require(\"react-dom/server\");\nvar react_redux_1 = require(\"react-redux\");\nvar state = require(\"./state/state\");\nvar state_1 = require(\"./state/state\");\nvar ui = require(\"./ui\");\nvar appTabsContainer_1 = require(\"./tabs/v2/appTabsContainer\");\nvar settings = require(\"./state/settings\");\nvar clientSession = require(\"./state/clientSession\");\nvar types = require(\"../common/types\");\nvar globalErrorCacheClient_1 = require(\"./globalErrorCacheClient\");\nvar clientTestResultsCache_1 = require(\"./clientTestResultsCache\");\nvar socketClient_1 = require(\"../socket/socketClient\");\nvar Modal = require('react-modal');\n// Having jQuery ($) on the console helps us debug certin libs that use jQuery\nvar $ = require(\"jquery\");\nwindow.$ = $;\n// prevent backspace\nvar preventBackspaceNav_1 = require(\"./utils/preventBackspaceNav\");\npreventBackspaceNav_1.preventBackspaceNav();\n// Normalize css\nrequire('normalize.css');\n// Lost connection indicator\nrequire('./lostConnection.css');\n// Load clipboard and enable for all things clipboard\nvar Clipboard = require('clipboard/dist/clipboard.min');\nnew Clipboard('[data-clipboard-text]');\n// Load hint.css for fancy (styleable) titles\nrequire('hint.css/hint.css');\n// Setup font awesome\nrequire('font-awesome/css/font-awesome.css');\nvar afterLoaded = function () {\n    // The main app element\n    var appElement = document.getElementById('app');\n    // Register a modal location\n    Modal.setAppElement(appElement);\n    // Render the main app\n    ReactDOM.render(React.createElement(react_redux_1.Provider, { store: state_1.store },\n        React.createElement(root_1.Root, null)), appElement);\n    // Register commands\n    commands.register();\n    // For testing\n    // server.echo({text:\"123\",num:345}).then((res)=>console.log(res));\n    // Anything that should mutate the state\n    socketClient_1.server.getErrors({}).then(function (errorsUpdate) {\n        globalErrorCacheClient_1.errorsCache.setErrors(errorsUpdate);\n    });\n    socketClient_1.cast.errorsDelta.on(function (errorsDelta) {\n        if (errorsDelta.initial) {\n            globalErrorCacheClient_1.errorsCache.clearErrors();\n        }\n        globalErrorCacheClient_1.errorsCache.applyDelta(errorsDelta);\n    });\n    socketClient_1.server.getTestResults({}).then(function (results) {\n        clientTestResultsCache_1.testResultsCache.setResults(results);\n    });\n    socketClient_1.cast.testResultsDelta.on(function (testResultsDelta) {\n        clientTestResultsCache_1.testResultsCache.applyTestResultsDelta(testResultsDelta);\n    });\n    socketClient_1.pendingRequestsChanged.on(function (r) {\n        state.setPendingRequests(r.pending);\n    });\n    var firstConnectionState = true;\n    socketClient_1.connectionStatusChanged.on(function (r) {\n        state.setSocketConnected(r.connected);\n        if (firstConnectionState) {\n            $('.alm-connection-status').css('display', 'block');\n            firstConnectionState = false;\n            return;\n        }\n        $('.alm-connection-status').toggleClass('alm-connection-status-active', !r.connected);\n    });\n    socketClient_1.server.getActiveProjectConfigDetails({}).then(function (res) {\n        state.setActiveProject(res);\n    });\n    socketClient_1.cast.activeProjectConfigDetailsUpdated.on(function (res) {\n        state.setActiveProject(res);\n    });\n    socketClient_1.server.activeProjectFilePaths({}).then(function (res) {\n        state.setFilePathsInActiveProject(res.filePaths);\n    });\n    socketClient_1.cast.activeProjectFilePathsUpdated.on(function (res) {\n        state.setFilePathsInActiveProject(res.filePaths);\n    });\n    socketClient_1.server.filePaths({}).then(function (res) {\n        state.setFilePaths({ filePaths: res.filePaths, rootDir: res.rootDir, completed: res.completed });\n    });\n    socketClient_1.cast.filePathsUpdated.on(function (res) {\n        state.setFilePaths({ filePaths: res.filePaths, rootDir: res.rootDir, completed: res.completed });\n    });\n    socketClient_1.server.getCompleteOutputStatusCache({}).then(function (res) {\n        state.completeOuputStatusCacheUpdated(res);\n    });\n    socketClient_1.cast.fileOutputStatusUpdated.on(function (res) {\n        state.fileOuputStatusUpdated(res);\n    });\n    socketClient_1.cast.completeOutputStatusCacheUpdated.on(function (res) {\n        state.completeOuputStatusCacheUpdated(res);\n    });\n    socketClient_1.server.getLiveBuildResults({}).then(function (res) {\n        state.setLiveBuildResults(res);\n    });\n    socketClient_1.cast.liveBuildResults.on(function (res) {\n        state.setLiveBuildResults(res);\n    });\n    socketClient_1.cast.tsWorking.on(function (res) {\n        state.setTSWorking(res);\n    });\n    socketClient_1.cast.testedWorking.on(function (res) {\n        state.setTestedWorking(res);\n    });\n    commands.sync.on(function () {\n        socketClient_1.server.sync({});\n    });\n    commands.build.on(function () {\n        socketClient_1.server.build({});\n    });\n    /** Consolidate the file edit stuff into a single command */\n    socketClient_1.cast.didEdits.on(function (e) { commands.fileContentsChanged.emit({ filePath: e.filePath }); });\n    socketClient_1.cast.savedFileChangedOnDisk.on(function (e) { commands.fileContentsChanged.emit({ filePath: e.filePath }); });\n    commands.toggleDoctor.on(function () {\n        if (!state.inActiveProjectFilePath(appTabsContainer_1.tabState.getSelectedFilePath())) {\n            ui.notifyWarningNormalDisappear('Doctor is only available for files in active project');\n            return;\n        }\n        state.toggleDoctor({});\n    });\n    commands.toggleSemanticView.on(function () {\n        if (!state.inActiveProjectFilePath(appTabsContainer_1.tabState.getSelectedFilePath())) {\n            ui.notifyWarningNormalDisappear('Semantic view is only available for files in active project');\n            return;\n        }\n        state.toggleSemanticView({});\n    });\n    commands.duplicateWindow.on(function () {\n        var width = window.innerWidth;\n        var height = window.innerHeight;\n        window.open(window.location.href.replace(location.href, '') + \"#\" + types.urlHashNewSession, '', \"innerWidth=\" + width + \", innerHeight=\" + height);\n    });\n    /** Set the window session */\n    socketClient_1.server.getValidSessionId({ sessionId: clientSession.getSessionId() }).then(function (res) {\n        clientSession.setSessionId(res.sessionId);\n        var sessionId = res.sessionId;\n        // Now load all the other settings we want:\n        /**\n         * Pattern:\n         * - Load the setting into redux\n         * - Then keep it updated as redux changes\n         */\n        settings.showDoctor.get().then(function (res) {\n            state.setShowDoctor(res);\n            state.subscribeSub(function (s) { return s.showDoctor; }, function (showDoctor) {\n                settings.showDoctor.set(showDoctor);\n            });\n        });\n        settings.showSemanticView.get().then(function (res) {\n            state.setShowSemanticView(res);\n            state.subscribeSub(function (s) { return s.showSemanticView; }, function (showSemanticView) {\n                settings.showSemanticView.set(showSemanticView);\n            });\n        });\n        settings.errorsExpanded.get().then(function (res) {\n            if (res)\n                state.expandErrors({});\n            else\n                state.collapseErrors({});\n            state.subscribeSub(function (s) { return s.errorsExpanded; }, function (errorsExpanded) {\n                settings.errorsExpanded.set(errorsExpanded);\n            });\n        });\n        settings.errorsDisplayMode.get().then(function (res) {\n            state.setErrorsDisplayMode(res || types.ErrorsDisplayMode.all);\n            state.subscribeSub(function (s) { return s.errorsDisplayMode; }, function (errorsDisplayMode) {\n                settings.errorsDisplayMode.set(errorsDisplayMode);\n            });\n        });\n        settings.fileTreeExpanded.get().then(function (res) {\n            if (res)\n                state.expandFileTree({});\n            else\n                state.collapseFileTree({});\n            state.subscribeSub(function (s) { return s.fileTreeShown; }, function (fileTreeShown) {\n                settings.fileTreeExpanded.set(fileTreeShown);\n            });\n        });\n    });\n};\nafterLoaded();\n","/home/travis/build/npmtest/node-npmtest-alm/node_modules/alm/src/app/uix.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar utils = require(\"../common/utils\");\nvar commands = require(\"./commands/commands\");\nvar appTabsContainer_1 = require(\"./tabs/v2/appTabsContainer\");\nvar docCache = require(\"./monaco/model/docCache\");\n/**\n * After the app boots up\n */\nfunction setup() {\n    /**\n     * Setup all the CM commands to go to the right place\n     */\n    commands.commandRegistry\n        .filter(function (x) { return x.config.context == commands.CommandContext.Editor; })\n        .forEach(function (cmd) {\n        cmd.on(function () {\n            var editorTab = API.getFocusedCodeEditorIfAny();\n            if (editorTab && editorTab.editor) {\n                var editor = editorTab.editor;\n                var action_1 = editor.getAction(cmd.config.editorCommandName);\n                if (!action_1) {\n                    console.error('Failed to find editor action:', cmd.config);\n                }\n                else {\n                    // We need a set timeout as when we trigger from 'command search' the focus changes throws off monaco\n                    // e.g. goto line action (which tries to create its own modal) does not work without the set timeout\n                    setTimeout(function () {\n                        // console.log(action); // DEBUG action details\n                        action_1.run();\n                    });\n                }\n            }\n        });\n    });\n}\nexports.setup = setup;\n/**\n * Functions that can be provided as API\n */\nvar API;\n(function (API) {\n    function getClosedVsOpenFilePaths(filePaths) {\n        /** lookup all the *file* tabs that are open */\n        var allOpen = appTabsContainer_1.tabState.getOpenFilePaths();\n        var alreadyOpenFilePaths = filePaths.filter(function (fp) { return allOpen.indexOf(fp) != -1; });\n        var currentlyClosedFilePaths = filePaths.filter(function (fp) { return allOpen.indexOf(fp) == -1; });\n        return { alreadyOpenFilePaths: alreadyOpenFilePaths, currentlyClosedFilePaths: currentlyClosedFilePaths };\n    }\n    API.getClosedVsOpenFilePaths = getClosedVsOpenFilePaths;\n    function applyRefactorings(refactorings) {\n        var currentlyClosedFilePaths = getClosedVsOpenFilePaths(Object.keys(refactorings)).currentlyClosedFilePaths;\n        var tabs = currentlyClosedFilePaths.map(function (fp) {\n            var codeTab = {\n                id: utils.createId(),\n                url: \"file://\" + fp,\n                additionalData: null\n            };\n            return codeTab;\n        });\n        appTabsContainer_1.tabState.addTabs(tabs);\n        // Transact on docs\n        docCache.applyRefactoringsToTsDocs(refactorings);\n    }\n    API.applyRefactorings = applyRefactorings;\n    function getFocusedCodeEditorIfAny() {\n        return appTabsContainer_1.tabState.getFocusedCodeEditorIfAny();\n    }\n    API.getFocusedCodeEditorIfAny = getFocusedCodeEditorIfAny;\n})(API = exports.API || (exports.API = {}));\n","/home/travis/build/npmtest/node-npmtest-alm/node_modules/alm/src/common/pure.js":"/**\n * Mutablity helpers\n */\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Shallow Equal and Shallow Compare from\n * https://github.com/gaearon/react-pure-render/blob/master/src/shallowEqual.js\n *\n */\nfunction shouldComponentUpdate(nextProps, nextState) {\n    return !shallowEqual(this.props, nextProps) ||\n        !shallowEqual(this.state, nextState);\n}\nexports.shouldComponentUpdate = shouldComponentUpdate;\n/**\n * Performs equality by iterating through keys on an object and returning\n * false when any key has values which are not strictly equal between\n * objA and objB. Returns true when the values of all keys are strictly equal.\n *\n * @return {boolean}\n */\nfunction shallowEqual(objA, objB) {\n    if (objA === objB) {\n        return true;\n    }\n    if (typeof objA !== 'object' || objA === null ||\n        typeof objB !== 'object' || objB === null) {\n        return false;\n    }\n    var keysA = Object.keys(objA);\n    var keysB = Object.keys(objB);\n    if (keysA.length !== keysB.length) {\n        return false;\n    }\n    // Test for A's keys different from B.\n    var bHasOwnProperty = Object.prototype.hasOwnProperty.bind(objB);\n    for (var i = 0; i < keysA.length; i++) {\n        if (!bHasOwnProperty(keysA[i]) || objA[keysA[i]] !== objB[keysA[i]]) {\n            return false;\n        }\n    }\n    return true;\n}\nexports.shallowEqual = shallowEqual;\n","/home/travis/build/npmtest/node-npmtest-alm/node_modules/alm/src/languageServiceHost/languageServiceHost.js":"\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar liner = require(\"./liner\");\nvar events_1 = require(\"../common/events\");\nvar toPath = ts.toPath;\nvar LineIndex = liner.LineIndex;\nvar unorderedRemoveItem = ts.unorderedRemoveItem;\nvar createFileMap = ts.createFileMap;\n/** BAS : a function I added, useful as we are working without true fs host */\nvar toSimplePath = function (fileName) { return toPath(fileName, '', function (x) { return x; }); };\n/** our compiler settings for simple tokenization */\nvar defaultCompilerOptions = {\n    jsx: ts.JsxEmit.React,\n    module: ts.ModuleKind.CommonJS,\n    target: ts.ScriptTarget.Latest,\n    experimentalDecorators: true,\n    noLib: true,\n};\n/**\n * These classes are modified version of session.ts\n * Same names but modified to not use `fs` / `sys` / `host`\n */\nvar ScriptInfo = (function () {\n    function ScriptInfo(fileName, content, isOpen) {\n        if (isOpen === void 0) { isOpen = false; }\n        this.fileName = fileName;\n        this.content = content;\n        this.isOpen = isOpen;\n        this.children = []; // files referenced by this file\n        this.path = toSimplePath(fileName);\n        this.svc = ScriptVersionCache.fromString(content);\n    }\n    ScriptInfo.prototype.close = function () {\n        this.isOpen = false;\n    };\n    ScriptInfo.prototype.addChild = function (childInfo) {\n        this.children.push(childInfo);\n    };\n    ScriptInfo.prototype.snap = function () {\n        return this.svc.getSnapshot();\n    };\n    ScriptInfo.prototype.getText = function () {\n        var snap = this.snap();\n        return snap.getText(0, snap.getLength());\n    };\n    ScriptInfo.prototype.getLineInfo = function (line) {\n        var snap = this.snap();\n        return snap.index.lineNumberToInfo(line);\n    };\n    ScriptInfo.prototype.editContent = function (start, end, newText) {\n        this.svc.edit(start, end - start, newText);\n    };\n    ScriptInfo.prototype.getTextChangeRangeBetweenVersions = function (startVersion, endVersion) {\n        return this.svc.getTextChangesBetweenVersions(startVersion, endVersion);\n    };\n    ScriptInfo.prototype.getChangeRange = function (oldSnapshot) {\n        return this.snap().getChangeRange(oldSnapshot);\n    };\n    return ScriptInfo;\n}());\nexports.ScriptInfo = ScriptInfo;\nvar ScriptVersionCache = (function () {\n    function ScriptVersionCache() {\n        this.changes = [];\n        this.versions = [];\n        this.minVersion = 0; // no versions earlier than min version will maintain change history\n        this.currentVersion = 0;\n    }\n    // REVIEW: can optimize by coalescing simple edits\n    ScriptVersionCache.prototype.edit = function (pos, deleteLen, insertedText) {\n        this.changes[this.changes.length] = new TextChange(pos, deleteLen, insertedText);\n        if ((this.changes.length > ScriptVersionCache.changeNumberThreshold) ||\n            (deleteLen > ScriptVersionCache.changeLengthThreshold) ||\n            (insertedText && (insertedText.length > ScriptVersionCache.changeLengthThreshold))) {\n            this.getSnapshot();\n        }\n    };\n    ScriptVersionCache.prototype.latest = function () {\n        return this.versions[this.currentVersion];\n    };\n    ScriptVersionCache.prototype.latestVersion = function () {\n        if (this.changes.length > 0) {\n            this.getSnapshot();\n        }\n        return this.currentVersion;\n    };\n    // reload whole script, leaving no change history behind reload\n    ScriptVersionCache.prototype.reload = function (script) {\n        this.currentVersion++;\n        this.changes = []; // history wiped out by reload\n        var snap = new LineIndexSnapshot(this.currentVersion, this);\n        this.versions[this.currentVersion] = snap;\n        snap.index = new LineIndex();\n        var lm = LineIndex.linesFromText(script);\n        snap.index.load(lm.lines);\n        // REVIEW: could use linked list\n        for (var i = this.minVersion; i < this.currentVersion; i++) {\n            this.versions[i] = undefined;\n        }\n        this.minVersion = this.currentVersion;\n    };\n    ScriptVersionCache.prototype.getSnapshot = function () {\n        var snap = this.versions[this.currentVersion];\n        if (this.changes.length > 0) {\n            var snapIndex = this.latest().index;\n            for (var i = 0, len = this.changes.length; i < len; i++) {\n                var change = this.changes[i];\n                snapIndex = snapIndex.edit(change.pos, change.deleteLen, change.insertedText);\n            }\n            snap = new LineIndexSnapshot(this.currentVersion + 1, this);\n            snap.index = snapIndex;\n            snap.changesSincePreviousVersion = this.changes;\n            this.currentVersion = snap.version;\n            this.versions[snap.version] = snap;\n            this.changes = [];\n            if ((this.currentVersion - this.minVersion) >= ScriptVersionCache.maxVersions) {\n                var oldMin = this.minVersion;\n                this.minVersion = (this.currentVersion - ScriptVersionCache.maxVersions) + 1;\n                for (var j = oldMin; j < this.minVersion; j++) {\n                    this.versions[j] = undefined;\n                }\n            }\n        }\n        return snap;\n    };\n    ScriptVersionCache.prototype.getTextChangesBetweenVersions = function (oldVersion, newVersion) {\n        if (oldVersion < newVersion) {\n            if (oldVersion >= this.minVersion) {\n                var textChangeRanges = [];\n                for (var i = oldVersion + 1; i <= newVersion; i++) {\n                    var snap = this.versions[i];\n                    for (var j = 0, len = snap.changesSincePreviousVersion.length; j < len; j++) {\n                        var textChange = snap.changesSincePreviousVersion[j];\n                        textChangeRanges[textChangeRanges.length] = textChange.getTextChangeRange();\n                    }\n                }\n                return ts.collapseTextChangeRangesAcrossMultipleVersions(textChangeRanges);\n            }\n            else {\n                return undefined;\n            }\n        }\n        else {\n            return ts.unchangedTextChangeRange;\n        }\n    };\n    ScriptVersionCache.fromString = function (script) {\n        var svc = new ScriptVersionCache();\n        var snap = new LineIndexSnapshot(0, svc);\n        svc.versions[svc.currentVersion] = snap;\n        snap.index = new LineIndex();\n        var lm = LineIndex.linesFromText(script);\n        snap.index.load(lm.lines);\n        return svc;\n    };\n    return ScriptVersionCache;\n}());\nScriptVersionCache.changeNumberThreshold = 8;\nScriptVersionCache.changeLengthThreshold = 256;\nScriptVersionCache.maxVersions = 8;\nexports.ScriptVersionCache = ScriptVersionCache;\nvar LineIndexSnapshot = (function () {\n    function LineIndexSnapshot(version, cache) {\n        this.version = version;\n        this.cache = cache;\n        this.changesSincePreviousVersion = [];\n    }\n    LineIndexSnapshot.prototype.getText = function (rangeStart, rangeEnd) {\n        return this.index.getText(rangeStart, rangeEnd - rangeStart);\n    };\n    LineIndexSnapshot.prototype.getLength = function () {\n        return this.index.root.charCount();\n    };\n    // this requires linear space so don't hold on to these\n    LineIndexSnapshot.prototype.getLineStartPositions = function () {\n        var starts = [-1];\n        var count = 1;\n        var pos = 0;\n        this.index.every(function (ll, s, len) {\n            starts[count++] = pos;\n            pos += ll.text.length;\n            return true;\n        }, 0);\n        return starts;\n    };\n    LineIndexSnapshot.prototype.getLineMapper = function () {\n        var _this = this;\n        return (function (line) {\n            return _this.index.lineNumberToInfo(line).offset;\n        });\n    };\n    LineIndexSnapshot.prototype.getTextChangeRangeSinceVersion = function (scriptVersion) {\n        if (this.version <= scriptVersion) {\n            return ts.unchangedTextChangeRange;\n        }\n        else {\n            return this.cache.getTextChangesBetweenVersions(scriptVersion, this.version);\n        }\n    };\n    LineIndexSnapshot.prototype.getChangeRange = function (oldSnapshot) {\n        var oldSnap = oldSnapshot;\n        return this.getTextChangeRangeSinceVersion(oldSnap.version);\n    };\n    return LineIndexSnapshot;\n}());\nexports.LineIndexSnapshot = LineIndexSnapshot;\n// text change information\nvar TextChange = (function () {\n    function TextChange(pos, deleteLen, insertedText) {\n        this.pos = pos;\n        this.deleteLen = deleteLen;\n        this.insertedText = insertedText;\n    }\n    TextChange.prototype.getTextChangeRange = function () {\n        return ts.createTextChangeRange(ts.createTextSpan(this.pos, this.deleteLen), this.insertedText ? this.insertedText.length : 0);\n    };\n    return TextChange;\n}());\nexports.TextChange = TextChange;\nvar LSHost = (function () {\n    /**\n     * BAS: add configuration arguments\n     * - projectDirectory,\n     * - compilerOptions\n     */\n    function LSHost(projectDirectory, compilerOptions) {\n        if (compilerOptions === void 0) { compilerOptions = defaultCompilerOptions; }\n        var _this = this;\n        this.projectDirectory = projectDirectory;\n        this.compilerOptions = compilerOptions;\n        this.roots = [];\n        this.getDefaultLibFileName = function () { return null; };\n        // BAS : wired to config. Needed for proper `@types` expansion.\n        // See the child class `LanguageServiceHost` implementation below (with more comments).\n        this.getCurrentDirectory = function () { return _this.projectDirectory; };\n        this.filenameToScript = createFileMap();\n    }\n    LSHost.prototype.getScriptSnapshot = function (filename) {\n        var scriptInfo = this.getScriptInfo(filename);\n        if (scriptInfo) {\n            return scriptInfo.snap();\n        }\n    };\n    LSHost.prototype.lineAffectsRefs = function (filename, line) {\n        var info = this.getScriptInfo(filename);\n        var lineInfo = info.getLineInfo(line);\n        if (lineInfo && lineInfo.text) {\n            var regex = /reference|import|\\/\\*|\\*\\//;\n            return regex.test(lineInfo.text);\n        }\n    };\n    // BAS change this to return active project settings for file\n    LSHost.prototype.getCompilationSettings = function () {\n        return this.compilerOptions;\n    };\n    LSHost.prototype.getScriptFileNames = function () {\n        return this.roots.map(function (root) { return root.fileName; });\n    };\n    LSHost.prototype.getScriptVersion = function (filename) {\n        return this.getScriptInfo(filename).svc.latestVersion().toString();\n    };\n    LSHost.prototype.getScriptIsOpen = function (filename) {\n        return this.getScriptInfo(filename).isOpen;\n    };\n    LSHost.prototype.getScriptInfo = function (filename) {\n        var path = toSimplePath(filename);\n        var scriptInfo = this.filenameToScript.get(path);\n        return scriptInfo;\n    };\n    LSHost.prototype.addRoot = function (info) {\n        if (!this.filenameToScript.contains(info.path)) {\n            this.filenameToScript.set(info.path, info);\n            this.roots.push(info);\n        }\n    };\n    LSHost.prototype.removeRoot = function (info) {\n        if (!this.filenameToScript.contains(info.path)) {\n            this.filenameToScript.remove(info.path);\n            unorderedRemoveItem(this.roots, info);\n        }\n    };\n    LSHost.prototype.editScript = function (filename, start, end, newText) {\n        var script = this.getScriptInfo(filename);\n        if (script) {\n            script.editContent(start, end, newText);\n            return;\n        }\n        throw new Error(\"No script with name '\" + filename + \"'\");\n    };\n    /**\n     * Add a file with contents\n     */\n    LSHost.prototype.addScript = function (filePath, contents) {\n        var path = toSimplePath(filePath);\n        if (!this.filenameToScript.contains(path)) {\n            var info = new ScriptInfo(filePath, contents);\n            this.addRoot(info);\n        }\n    };\n    /**\n     *  @param line 1 based index\n     */\n    LSHost.prototype.lineToTextSpan = function (filename, line) {\n        var path = toSimplePath(filename);\n        var script = this.filenameToScript.get(path);\n        var index = script.snap().index;\n        var lineInfo = index.lineNumberToInfo(line + 1);\n        var len;\n        if (lineInfo.leaf) {\n            len = lineInfo.leaf.text.length;\n        }\n        else {\n            var nextLineInfo = index.lineNumberToInfo(line + 2);\n            len = nextLineInfo.offset - lineInfo.offset;\n        }\n        return ts.createTextSpan(lineInfo.offset, len);\n    };\n    /**\n     * @param line 1 based index\n     * @param offset 1 based index\n     */\n    LSHost.prototype.lineOffsetToPosition = function (filename, line, offset) {\n        var path = toSimplePath(filename);\n        var script = this.filenameToScript.get(path);\n        var index = script.snap().index;\n        var lineInfo = index.lineNumberToInfo(line);\n        // TODO: assert this offset is actually on the line\n        return (lineInfo.offset + offset - 1);\n    };\n    /**\n     * @param line 1-based index\n     * @param offset 1-based index\n     */\n    LSHost.prototype.positionToLineOffset = function (filename, position) {\n        var path = toSimplePath(filename);\n        var script = this.filenameToScript.get(path);\n        var index = script.snap().index;\n        var lineOffset = index.charOffsetToLineNumberAndPos(position);\n        return { line: lineOffset.line, offset: lineOffset.offset + 1 };\n    };\n    return LSHost;\n}());\nexports.LSHost = LSHost;\n/**\n * BAS:\n * This class is my own creation.\n */\nvar LanguageServiceHost = (function (_super) {\n    __extends(LanguageServiceHost, _super);\n    function LanguageServiceHost() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        /*\n         * LS host can optionally implement these methods to support getImportModuleCompletionsAtPosition.\n         * Without these methods, only completions for ambient modules will be provided.\n         */\n        _this.readDirectory = ts.sys ? ts.sys.readDirectory : undefined;\n        _this.readFile = ts.sys ? ts.sys.readFile : undefined;\n        _this.fileExists = ts.sys ? ts.sys.fileExists : undefined;\n        /**\n         * getDirectories is also required for full import and type reference completions.\n         * Without it defined, certain completions will not be provided\n         */\n        _this.getDirectories = ts.sys ? ts.sys.getDirectories : undefined;\n        /**\n         * For @types expansion, these two functions are needed.\n         */\n        _this.directoryExists = ts.sys ? ts.sys.directoryExists : undefined;\n        _this.getCurrentDirectory = function () {\n            /**\n             * TODO: use the same path as the path of tsconfig.json (if any)\n             * `undefined` is handled correctly in the compiler source :\n             * https://github.com/Microsoft/TypeScript/blob/02493de5ccd9e8c4c901bb154ba584dee392bd14/src/compiler/moduleNameResolver.ts#L98\n             */\n            return _this.projectDirectory;\n        };\n        /**\n         * We allow incremental loading of resources.\n         * Needed for node_modules and for stuff like `user types a require statement`\n         */\n        _this.incrementallyAddedFile = new events_1.TypedEvent();\n        return _this;\n    }\n    LanguageServiceHost.prototype.removeFile = function (filename) {\n        var script = this.getScriptInfo(filename);\n        this.removeRoot(script);\n    };\n    /**\n     * Basically having setContents ensure long term stability even if stuff does get out of sync due to errors in above implementation\n     */\n    LanguageServiceHost.prototype.setContents = function (filename, contents) {\n        var script = this.getScriptInfo(filename);\n        if (script) {\n            script.svc.reload(contents);\n            return;\n        }\n        throw new Error(\"No script with name '\" + filename + \"'\");\n    };\n    /**\n     * Note : This can be slow\n     */\n    LanguageServiceHost.prototype.getContents = function (filename) {\n        var script = this.getScriptInfo(filename);\n        if (script) {\n            return script.getText();\n        }\n        throw new Error(\"No script with name '\" + filename + \"'\");\n    };\n    /** 0 based */\n    LanguageServiceHost.prototype.getPositionOfLineAndCharacter = function (filePath, line, ch) {\n        return this.lineOffsetToPosition(filePath, line + 1, ch + 1);\n    };\n    /** 0 based */\n    LanguageServiceHost.prototype.getLineAndCharacterOfPosition = function (filePath, pos) {\n        var res = this.positionToLineOffset(filePath, pos);\n        return { line: res.line - 1, ch: res.offset - 1 };\n    };\n    /** Like parent EditScript but works on EditorPosition */\n    LanguageServiceHost.prototype.applyCodeEdit = function (fileName, start, end, newText) {\n        var minChar = this.getPositionOfLineAndCharacter(fileName, start.line, start.ch);\n        var limChar = this.getPositionOfLineAndCharacter(fileName, end.line, end.ch);\n        _super.prototype.editScript.call(this, fileName, minChar, limChar, newText);\n    };\n    return LanguageServiceHost;\n}(LSHost));\nexports.LanguageServiceHost = LanguageServiceHost;\n","/home/travis/build/npmtest/node-npmtest-alm/node_modules/alm/src/languageServiceHost/liner.js":"\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Debug = ts.Debug;\n/**\n *  All the line stuff as it is from session.ts\n */\nvar lineCollectionCapacity = 4;\nvar LineIndex = (function () {\n    function LineIndex() {\n        // set this to true to check each edit for accuracy\n        this.checkEdits = false;\n    }\n    LineIndex.prototype.charOffsetToLineNumberAndPos = function (charOffset) {\n        return this.root.charOffsetToLineNumberAndPos(1, charOffset);\n    };\n    LineIndex.prototype.lineNumberToInfo = function (lineNumber) {\n        var lineCount = this.root.lineCount();\n        if (lineNumber <= lineCount) {\n            var lineInfo = this.root.lineNumberToInfo(lineNumber, 0);\n            lineInfo.line = lineNumber;\n            return lineInfo;\n        }\n        else {\n            return {\n                line: lineNumber,\n                offset: this.root.charCount()\n            };\n        }\n    };\n    LineIndex.prototype.load = function (lines) {\n        if (lines.length > 0) {\n            var leaves = [];\n            for (var i = 0, len = lines.length; i < len; i++) {\n                leaves[i] = new LineLeaf(lines[i]);\n            }\n            this.root = LineIndex.buildTreeFromBottom(leaves);\n        }\n        else {\n            this.root = new LineNode();\n        }\n    };\n    LineIndex.prototype.walk = function (rangeStart, rangeLength, walkFns) {\n        this.root.walk(rangeStart, rangeLength, walkFns);\n    };\n    LineIndex.prototype.getText = function (rangeStart, rangeLength) {\n        var accum = \"\";\n        if ((rangeLength > 0) && (rangeStart < this.root.charCount())) {\n            this.walk(rangeStart, rangeLength, {\n                goSubtree: true,\n                done: false,\n                leaf: function (relativeStart, relativeLength, ll) {\n                    accum = accum.concat(ll.text.substring(relativeStart, relativeStart + relativeLength));\n                }\n            });\n        }\n        return accum;\n    };\n    LineIndex.prototype.getLength = function () {\n        return this.root.charCount();\n    };\n    LineIndex.prototype.every = function (f, rangeStart, rangeEnd) {\n        if (!rangeEnd) {\n            rangeEnd = this.root.charCount();\n        }\n        var walkFns = {\n            goSubtree: true,\n            done: false,\n            leaf: function (relativeStart, relativeLength, ll) {\n                if (!f(ll, relativeStart, relativeLength)) {\n                    this.done = true;\n                }\n            }\n        };\n        this.walk(rangeStart, rangeEnd - rangeStart, walkFns);\n        return !walkFns.done;\n    };\n    LineIndex.prototype.edit = function (pos, deleteLength, newText) {\n        function editFlat(source, s, dl, nt) {\n            if (nt === void 0) { nt = \"\"; }\n            return source.substring(0, s) + nt + source.substring(s + dl, source.length);\n        }\n        if (this.root.charCount() === 0) {\n            // TODO: assert deleteLength === 0\n            if (newText) {\n                this.load(LineIndex.linesFromText(newText).lines);\n                return this;\n            }\n        }\n        else {\n            var checkText = void 0;\n            if (this.checkEdits) {\n                checkText = editFlat(this.getText(0, this.root.charCount()), pos, deleteLength, newText);\n            }\n            var walker = new EditWalker();\n            if (pos >= this.root.charCount()) {\n                // insert at end\n                pos = this.root.charCount() - 1;\n                var endString = this.getText(pos, 1);\n                if (newText) {\n                    newText = endString + newText;\n                }\n                else {\n                    newText = endString;\n                }\n                deleteLength = 0;\n                walker.suppressTrailingText = true;\n            }\n            else if (deleteLength > 0) {\n                // check whether last characters deleted are line break\n                var e = pos + deleteLength;\n                var lineInfo = this.charOffsetToLineNumberAndPos(e);\n                if ((lineInfo && (lineInfo.offset === 0))) {\n                    // move range end just past line that will merge with previous line\n                    deleteLength += lineInfo.text.length;\n                    // store text by appending to end of insertedText\n                    if (newText) {\n                        newText = newText + lineInfo.text;\n                    }\n                    else {\n                        newText = lineInfo.text;\n                    }\n                }\n            }\n            if (pos < this.root.charCount()) {\n                this.root.walk(pos, deleteLength, walker);\n                walker.insertLines(newText);\n            }\n            if (this.checkEdits) {\n                var updatedText = this.getText(0, this.root.charCount());\n                Debug.assert(checkText == updatedText, \"buffer edit mismatch\");\n            }\n            return walker.lineIndex;\n        }\n    };\n    LineIndex.buildTreeFromBottom = function (nodes) {\n        var nodeCount = Math.ceil(nodes.length / lineCollectionCapacity);\n        var interiorNodes = [];\n        var nodeIndex = 0;\n        for (var i = 0; i < nodeCount; i++) {\n            interiorNodes[i] = new LineNode();\n            var charCount = 0;\n            var lineCount = 0;\n            for (var j = 0; j < lineCollectionCapacity; j++) {\n                if (nodeIndex < nodes.length) {\n                    interiorNodes[i].add(nodes[nodeIndex]);\n                    charCount += nodes[nodeIndex].charCount();\n                    lineCount += nodes[nodeIndex].lineCount();\n                }\n                else {\n                    break;\n                }\n                nodeIndex++;\n            }\n            interiorNodes[i].totalChars = charCount;\n            interiorNodes[i].totalLines = lineCount;\n        }\n        if (interiorNodes.length === 1) {\n            return interiorNodes[0];\n        }\n        else {\n            return this.buildTreeFromBottom(interiorNodes);\n        }\n    };\n    LineIndex.linesFromText = function (text) {\n        var lineStarts = ts.computeLineStarts(text);\n        if (lineStarts.length === 0) {\n            return { lines: [], lineMap: lineStarts };\n        }\n        var lines = new Array(lineStarts.length);\n        var lc = lineStarts.length - 1;\n        for (var lmi = 0; lmi < lc; lmi++) {\n            lines[lmi] = text.substring(lineStarts[lmi], lineStarts[lmi + 1]);\n        }\n        var endText = text.substring(lineStarts[lc]);\n        if (endText.length > 0) {\n            lines[lc] = endText;\n        }\n        else {\n            lines.length--;\n        }\n        return { lines: lines, lineMap: lineStarts };\n    };\n    return LineIndex;\n}());\nexports.LineIndex = LineIndex;\nvar LineNode = (function () {\n    function LineNode() {\n        this.totalChars = 0;\n        this.totalLines = 0;\n        this.children = [];\n    }\n    LineNode.prototype.isLeaf = function () {\n        return false;\n    };\n    LineNode.prototype.updateCounts = function () {\n        this.totalChars = 0;\n        this.totalLines = 0;\n        for (var i = 0, len = this.children.length; i < len; i++) {\n            var child = this.children[i];\n            this.totalChars += child.charCount();\n            this.totalLines += child.lineCount();\n        }\n    };\n    LineNode.prototype.execWalk = function (rangeStart, rangeLength, walkFns, childIndex, nodeType) {\n        if (walkFns.pre) {\n            walkFns.pre(rangeStart, rangeLength, this.children[childIndex], this, nodeType);\n        }\n        if (walkFns.goSubtree) {\n            this.children[childIndex].walk(rangeStart, rangeLength, walkFns);\n            if (walkFns.post) {\n                walkFns.post(rangeStart, rangeLength, this.children[childIndex], this, nodeType);\n            }\n        }\n        else {\n            walkFns.goSubtree = true;\n        }\n        return walkFns.done;\n    };\n    LineNode.prototype.skipChild = function (relativeStart, relativeLength, childIndex, walkFns, nodeType) {\n        if (walkFns.pre && (!walkFns.done)) {\n            walkFns.pre(relativeStart, relativeLength, this.children[childIndex], this, nodeType);\n            walkFns.goSubtree = true;\n        }\n    };\n    LineNode.prototype.walk = function (rangeStart, rangeLength, walkFns) {\n        // assume (rangeStart < this.totalChars) && (rangeLength <= this.totalChars)\n        var childIndex = 0;\n        var child = this.children[0];\n        var childCharCount = child.charCount();\n        // find sub-tree containing start\n        var adjustedStart = rangeStart;\n        while (adjustedStart >= childCharCount) {\n            this.skipChild(adjustedStart, rangeLength, childIndex, walkFns, CharRangeSection.PreStart);\n            adjustedStart -= childCharCount;\n            child = this.children[++childIndex];\n            childCharCount = child.charCount();\n        }\n        // Case I: both start and end of range in same subtree\n        if ((adjustedStart + rangeLength) <= childCharCount) {\n            if (this.execWalk(adjustedStart, rangeLength, walkFns, childIndex, CharRangeSection.Entire)) {\n                return;\n            }\n        }\n        else {\n            // Case II: start and end of range in different subtrees (possibly with subtrees in the middle)\n            if (this.execWalk(adjustedStart, childCharCount - adjustedStart, walkFns, childIndex, CharRangeSection.Start)) {\n                return;\n            }\n            var adjustedLength = rangeLength - (childCharCount - adjustedStart);\n            child = this.children[++childIndex];\n            childCharCount = child.charCount();\n            while (adjustedLength > childCharCount) {\n                if (this.execWalk(0, childCharCount, walkFns, childIndex, CharRangeSection.Mid)) {\n                    return;\n                }\n                adjustedLength -= childCharCount;\n                child = this.children[++childIndex];\n                childCharCount = child.charCount();\n            }\n            if (adjustedLength > 0) {\n                if (this.execWalk(0, adjustedLength, walkFns, childIndex, CharRangeSection.End)) {\n                    return;\n                }\n            }\n        }\n        // Process any subtrees after the one containing range end\n        if (walkFns.pre) {\n            var clen = this.children.length;\n            if (childIndex < (clen - 1)) {\n                for (var ej = childIndex + 1; ej < clen; ej++) {\n                    this.skipChild(0, 0, ej, walkFns, CharRangeSection.PostEnd);\n                }\n            }\n        }\n    };\n    LineNode.prototype.charOffsetToLineNumberAndPos = function (lineNumber, charOffset) {\n        var childInfo = this.childFromCharOffset(lineNumber, charOffset);\n        if (!childInfo.child) {\n            return {\n                line: lineNumber,\n                offset: charOffset,\n            };\n        }\n        else if (childInfo.childIndex < this.children.length) {\n            if (childInfo.child.isLeaf()) {\n                return {\n                    line: childInfo.lineNumber,\n                    offset: childInfo.charOffset,\n                    text: (childInfo.child).text,\n                    leaf: (childInfo.child)\n                };\n            }\n            else {\n                var lineNode = (childInfo.child);\n                return lineNode.charOffsetToLineNumberAndPos(childInfo.lineNumber, childInfo.charOffset);\n            }\n        }\n        else {\n            var lineInfo = this.lineNumberToInfo(this.lineCount(), 0);\n            return { line: this.lineCount(), offset: lineInfo.leaf.charCount() };\n        }\n    };\n    LineNode.prototype.lineNumberToInfo = function (lineNumber, charOffset) {\n        var childInfo = this.childFromLineNumber(lineNumber, charOffset);\n        if (!childInfo.child) {\n            return {\n                line: lineNumber,\n                offset: charOffset\n            };\n        }\n        else if (childInfo.child.isLeaf()) {\n            return {\n                line: lineNumber,\n                offset: childInfo.charOffset,\n                text: (childInfo.child).text,\n                leaf: (childInfo.child)\n            };\n        }\n        else {\n            var lineNode = (childInfo.child);\n            return lineNode.lineNumberToInfo(childInfo.relativeLineNumber, childInfo.charOffset);\n        }\n    };\n    LineNode.prototype.childFromLineNumber = function (lineNumber, charOffset) {\n        var child;\n        var relativeLineNumber = lineNumber;\n        var i;\n        var len;\n        for (i = 0, len = this.children.length; i < len; i++) {\n            child = this.children[i];\n            var childLineCount = child.lineCount();\n            if (childLineCount >= relativeLineNumber) {\n                break;\n            }\n            else {\n                relativeLineNumber -= childLineCount;\n                charOffset += child.charCount();\n            }\n        }\n        return {\n            child: child,\n            childIndex: i,\n            relativeLineNumber: relativeLineNumber,\n            charOffset: charOffset\n        };\n    };\n    LineNode.prototype.childFromCharOffset = function (lineNumber, charOffset) {\n        var child;\n        var i;\n        var len;\n        for (i = 0, len = this.children.length; i < len; i++) {\n            child = this.children[i];\n            if (child.charCount() > charOffset) {\n                break;\n            }\n            else {\n                charOffset -= child.charCount();\n                lineNumber += child.lineCount();\n            }\n        }\n        return {\n            child: child,\n            childIndex: i,\n            charOffset: charOffset,\n            lineNumber: lineNumber\n        };\n    };\n    LineNode.prototype.splitAfter = function (childIndex) {\n        var splitNode;\n        var clen = this.children.length;\n        childIndex++;\n        var endLength = childIndex;\n        if (childIndex < clen) {\n            splitNode = new LineNode();\n            while (childIndex < clen) {\n                splitNode.add(this.children[childIndex++]);\n            }\n            splitNode.updateCounts();\n        }\n        this.children.length = endLength;\n        return splitNode;\n    };\n    LineNode.prototype.remove = function (child) {\n        var childIndex = this.findChildIndex(child);\n        var clen = this.children.length;\n        if (childIndex < (clen - 1)) {\n            for (var i = childIndex; i < (clen - 1); i++) {\n                this.children[i] = this.children[i + 1];\n            }\n        }\n        this.children.length--;\n    };\n    LineNode.prototype.findChildIndex = function (child) {\n        var childIndex = 0;\n        var clen = this.children.length;\n        while ((this.children[childIndex] !== child) && (childIndex < clen))\n            childIndex++;\n        return childIndex;\n    };\n    LineNode.prototype.insertAt = function (child, nodes) {\n        var childIndex = this.findChildIndex(child);\n        var clen = this.children.length;\n        var nodeCount = nodes.length;\n        // if child is last and there is more room and only one node to place, place it\n        if ((clen < lineCollectionCapacity) && (childIndex === (clen - 1)) && (nodeCount === 1)) {\n            this.add(nodes[0]);\n            this.updateCounts();\n            return [];\n        }\n        else {\n            var shiftNode = this.splitAfter(childIndex);\n            var nodeIndex = 0;\n            childIndex++;\n            while ((childIndex < lineCollectionCapacity) && (nodeIndex < nodeCount)) {\n                this.children[childIndex++] = nodes[nodeIndex++];\n            }\n            var splitNodes = [];\n            var splitNodeCount = 0;\n            if (nodeIndex < nodeCount) {\n                splitNodeCount = Math.ceil((nodeCount - nodeIndex) / lineCollectionCapacity);\n                splitNodes = new Array(splitNodeCount);\n                var splitNodeIndex = 0;\n                for (var i = 0; i < splitNodeCount; i++) {\n                    splitNodes[i] = new LineNode();\n                }\n                var splitNode = splitNodes[0];\n                while (nodeIndex < nodeCount) {\n                    splitNode.add(nodes[nodeIndex++]);\n                    if (splitNode.children.length === lineCollectionCapacity) {\n                        splitNodeIndex++;\n                        splitNode = splitNodes[splitNodeIndex];\n                    }\n                }\n                for (var i = splitNodes.length - 1; i >= 0; i--) {\n                    if (splitNodes[i].children.length === 0) {\n                        splitNodes.length--;\n                    }\n                }\n            }\n            if (shiftNode) {\n                splitNodes[splitNodes.length] = shiftNode;\n            }\n            this.updateCounts();\n            for (var i = 0; i < splitNodeCount; i++) {\n                splitNodes[i].updateCounts();\n            }\n            return splitNodes;\n        }\n    };\n    // assume there is room for the item; return true if more room\n    LineNode.prototype.add = function (collection) {\n        this.children[this.children.length] = collection;\n        return (this.children.length < lineCollectionCapacity);\n    };\n    LineNode.prototype.charCount = function () {\n        return this.totalChars;\n    };\n    LineNode.prototype.lineCount = function () {\n        return this.totalLines;\n    };\n    return LineNode;\n}());\nexports.LineNode = LineNode;\nvar LineLeaf = (function () {\n    function LineLeaf(text) {\n        this.text = text;\n    }\n    LineLeaf.prototype.setUdata = function (data) {\n        this.udata = data;\n    };\n    LineLeaf.prototype.getUdata = function () {\n        return this.udata;\n    };\n    LineLeaf.prototype.isLeaf = function () {\n        return true;\n    };\n    LineLeaf.prototype.walk = function (rangeStart, rangeLength, walkFns) {\n        walkFns.leaf(rangeStart, rangeLength, this);\n    };\n    LineLeaf.prototype.charCount = function () {\n        return this.text.length;\n    };\n    LineLeaf.prototype.lineCount = function () {\n        return 1;\n    };\n    return LineLeaf;\n}());\nexports.LineLeaf = LineLeaf;\nvar CharRangeSection;\n(function (CharRangeSection) {\n    CharRangeSection[CharRangeSection[\"PreStart\"] = 0] = \"PreStart\";\n    CharRangeSection[CharRangeSection[\"Start\"] = 1] = \"Start\";\n    CharRangeSection[CharRangeSection[\"Entire\"] = 2] = \"Entire\";\n    CharRangeSection[CharRangeSection[\"Mid\"] = 3] = \"Mid\";\n    CharRangeSection[CharRangeSection[\"End\"] = 4] = \"End\";\n    CharRangeSection[CharRangeSection[\"PostEnd\"] = 5] = \"PostEnd\";\n})(CharRangeSection = exports.CharRangeSection || (exports.CharRangeSection = {}));\nvar BaseLineIndexWalker = (function () {\n    function BaseLineIndexWalker() {\n        this.goSubtree = true;\n        this.done = false;\n    }\n    BaseLineIndexWalker.prototype.leaf = function (rangeStart, rangeLength, ll) {\n    };\n    return BaseLineIndexWalker;\n}());\nvar EditWalker = (function (_super) {\n    __extends(EditWalker, _super);\n    function EditWalker() {\n        var _this = _super.call(this) || this;\n        _this.lineIndex = new LineIndex();\n        _this.endBranch = [];\n        _this.state = CharRangeSection.Entire;\n        _this.initialText = \"\";\n        _this.trailingText = \"\";\n        _this.suppressTrailingText = false;\n        _this.lineIndex.root = new LineNode();\n        _this.startPath = [_this.lineIndex.root];\n        _this.stack = [_this.lineIndex.root];\n        return _this;\n    }\n    EditWalker.prototype.insertLines = function (insertedText) {\n        if (this.suppressTrailingText) {\n            this.trailingText = \"\";\n        }\n        if (insertedText) {\n            insertedText = this.initialText + insertedText + this.trailingText;\n        }\n        else {\n            insertedText = this.initialText + this.trailingText;\n        }\n        var lm = LineIndex.linesFromText(insertedText);\n        var lines = lm.lines;\n        if (lines.length > 1) {\n            if (lines[lines.length - 1] == \"\") {\n                lines.length--;\n            }\n        }\n        var branchParent;\n        var lastZeroCount;\n        for (var k = this.endBranch.length - 1; k >= 0; k--) {\n            this.endBranch[k].updateCounts();\n            if (this.endBranch[k].charCount() === 0) {\n                lastZeroCount = this.endBranch[k];\n                if (k > 0) {\n                    branchParent = this.endBranch[k - 1];\n                }\n                else {\n                    branchParent = this.branchNode;\n                }\n            }\n        }\n        if (lastZeroCount) {\n            branchParent.remove(lastZeroCount);\n        }\n        // path at least length two (root and leaf)\n        var insertionNode = this.startPath[this.startPath.length - 2];\n        var leafNode = this.startPath[this.startPath.length - 1];\n        var len = lines.length;\n        if (len > 0) {\n            leafNode.text = lines[0];\n            if (len > 1) {\n                var insertedNodes = new Array(len - 1);\n                var startNode = leafNode;\n                for (var i = 1, len_1 = lines.length; i < len_1; i++) {\n                    insertedNodes[i - 1] = new LineLeaf(lines[i]);\n                }\n                var pathIndex = this.startPath.length - 2;\n                while (pathIndex >= 0) {\n                    insertionNode = this.startPath[pathIndex];\n                    insertedNodes = insertionNode.insertAt(startNode, insertedNodes);\n                    pathIndex--;\n                    startNode = insertionNode;\n                }\n                var insertedNodesLen = insertedNodes.length;\n                while (insertedNodesLen > 0) {\n                    var newRoot = new LineNode();\n                    newRoot.add(this.lineIndex.root);\n                    insertedNodes = newRoot.insertAt(this.lineIndex.root, insertedNodes);\n                    insertedNodesLen = insertedNodes.length;\n                    this.lineIndex.root = newRoot;\n                }\n                this.lineIndex.root.updateCounts();\n            }\n            else {\n                for (var j = this.startPath.length - 2; j >= 0; j--) {\n                    this.startPath[j].updateCounts();\n                }\n            }\n        }\n        else {\n            // no content for leaf node, so delete it\n            insertionNode.remove(leafNode);\n            for (var j = this.startPath.length - 2; j >= 0; j--) {\n                this.startPath[j].updateCounts();\n            }\n        }\n        return this.lineIndex;\n    };\n    EditWalker.prototype.post = function (relativeStart, relativeLength, lineCollection, parent, nodeType) {\n        // have visited the path for start of range, now looking for end\n        // if range is on single line, we will never make this state transition\n        if (lineCollection === this.lineCollectionAtBranch) {\n            this.state = CharRangeSection.End;\n        }\n        // always pop stack because post only called when child has been visited\n        this.stack.length--;\n        return undefined;\n    };\n    EditWalker.prototype.pre = function (relativeStart, relativeLength, lineCollection, parent, nodeType) {\n        // currentNode corresponds to parent, but in the new tree\n        var currentNode = this.stack[this.stack.length - 1];\n        if ((this.state === CharRangeSection.Entire) && (nodeType === CharRangeSection.Start)) {\n            // if range is on single line, we will never make this state transition\n            this.state = CharRangeSection.Start;\n            this.branchNode = currentNode;\n            this.lineCollectionAtBranch = lineCollection;\n        }\n        var child;\n        function fresh(node) {\n            if (node.isLeaf()) {\n                return new LineLeaf(\"\");\n            }\n            else\n                return new LineNode();\n        }\n        switch (nodeType) {\n            case CharRangeSection.PreStart:\n                this.goSubtree = false;\n                if (this.state !== CharRangeSection.End) {\n                    currentNode.add(lineCollection);\n                }\n                break;\n            case CharRangeSection.Start:\n                if (this.state === CharRangeSection.End) {\n                    this.goSubtree = false;\n                }\n                else {\n                    child = fresh(lineCollection);\n                    currentNode.add(child);\n                    this.startPath[this.startPath.length] = child;\n                }\n                break;\n            case CharRangeSection.Entire:\n                if (this.state !== CharRangeSection.End) {\n                    child = fresh(lineCollection);\n                    currentNode.add(child);\n                    this.startPath[this.startPath.length] = child;\n                }\n                else {\n                    if (!lineCollection.isLeaf()) {\n                        child = fresh(lineCollection);\n                        currentNode.add(child);\n                        this.endBranch[this.endBranch.length] = child;\n                    }\n                }\n                break;\n            case CharRangeSection.Mid:\n                this.goSubtree = false;\n                break;\n            case CharRangeSection.End:\n                if (this.state !== CharRangeSection.End) {\n                    this.goSubtree = false;\n                }\n                else {\n                    if (!lineCollection.isLeaf()) {\n                        child = fresh(lineCollection);\n                        currentNode.add(child);\n                        this.endBranch[this.endBranch.length] = child;\n                    }\n                }\n                break;\n            case CharRangeSection.PostEnd:\n                this.goSubtree = false;\n                if (this.state !== CharRangeSection.Start) {\n                    currentNode.add(lineCollection);\n                }\n                break;\n        }\n        if (this.goSubtree) {\n            this.stack[this.stack.length] = child;\n        }\n        return lineCollection;\n    };\n    // just gather text from the leaves\n    EditWalker.prototype.leaf = function (relativeStart, relativeLength, ll) {\n        if (this.state === CharRangeSection.Start) {\n            this.initialText = ll.text.substring(0, relativeStart);\n        }\n        else if (this.state === CharRangeSection.Entire) {\n            this.initialText = ll.text.substring(0, relativeStart);\n            this.trailingText = ll.text.substring(relativeStart + relativeLength);\n        }\n        else {\n            // state is CharRangeSection.End\n            this.trailingText = ll.text.substring(relativeStart + relativeLength);\n        }\n    };\n    return EditWalker;\n}(BaseLineIndexWalker));\n","/home/travis/build/npmtest/node-npmtest-alm/node_modules/alm/src/languageServiceHost/languageServiceHostNode.js":"\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar lsh = require(\"./languageServiceHost\");\nvar typescriptDir = require(\"../server/workers/lang/core/typeScriptDir\");\nvar fs = require(\"fs\");\n/**\n * Similar to the base, just adds stuff that uses `require.resolve` to load lib.d.ts\n */\nvar LanguageServiceHost = (function (_super) {\n    __extends(LanguageServiceHost, _super);\n    function LanguageServiceHost() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.getDefaultLibFileName = function () {\n            /** TypeScript doesn't handle `undefined` here gracefully, but it handles an empty string just fine */\n            return typescriptDir.getDefaultLibFilePaths(_this.compilerOptions)[0] || '';\n        };\n        /** alm demo service */\n        _this.addAlmDemo = function () {\n            _this.addScript('alm.d.ts', fs.readFileSync(__dirname + '/alm.d.ts').toString());\n            return _this;\n        };\n        return _this;\n    }\n    LanguageServiceHost.prototype.getScriptSnapshot = function (fileName) {\n        var snap = _super.prototype.getScriptSnapshot.call(this, fileName);\n        if (!snap) {\n            // This script should be a part of the project if it exists\n            // But we only do this in the server\n            if (typeof process !== \"undefined\" && typeof require !== \"undefined\") {\n                if (require('fs').existsSync(fileName)) {\n                    try {\n                        /** Just because the file exists doesn't mean we can *read* it. Hence the try */\n                        var contents = require('fs').readFileSync(fileName, 'utf8');\n                        this.addScript(fileName, contents);\n                        snap = _super.prototype.getScriptSnapshot.call(this, fileName);\n                        this.incrementallyAddedFile.emit({ filePath: fileName });\n                    }\n                    catch (e) {\n                    }\n                }\n            }\n        }\n        return snap;\n    };\n    return LanguageServiceHost;\n}(lsh.LanguageServiceHost));\nexports.LanguageServiceHost = LanguageServiceHost;\n"}